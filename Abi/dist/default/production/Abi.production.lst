

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Thu Jun 24 15:36:21 2021

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    41                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    46                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    47                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    48  0000                     
    49                           ; Version 2.05
    50                           ; Generated 20/12/2018 GMT
    51                           ; 
    52                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    53                           ; All rights reserved.
    54                           ; 
    55                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    56                           ; 
    57                           ; Redistribution and use in source and binary forms, with or without modification, are
    58                           ; permitted provided that the following conditions are met:
    59                           ; 
    60                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    61                           ;        conditions and the following disclaimer.
    62                           ; 
    63                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    64                           ;        of conditions and the following disclaimer in the documentation and/or other
    65                           ;        materials provided with the distribution.
    66                           ; 
    67                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    68                           ;        software without specific prior written permission.
    69                           ; 
    70                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    71                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    72                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    73                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    74                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    75                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    76                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    77                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    78                           ; 
    79                           ; 
    80                           ; Code-generator required, PIC18F4550 Definitions
    81                           ; 
    82                           ; SFR Addresses
    83  0000                     
    84                           	psect	idataCOMRAM
    85  003410                     __pidataCOMRAM:
    86                           	opt callstack 0
    87                           
    88                           ;initializer for _a
    89  003410  0005               	dw	5
    90  003412  0000               	dw	0
    91                           
    92                           ;initializer for _col
    93  003414  FF                 	db	255
    94                           
    95                           ;initializer for _fila
    96  003415  FF                 	db	255
    97                           
    98                           ;initializer for tic_encoder@estado
    99  003416  04                 	db	4
   100                           
   101                           ;initializer for tic_debounce@debounce_tic
   102  003417  0A                 	db	10
   103                           
   104                           ;initializer for _UpperByte
   105  003418  FF                 	db	255
   106                           
   107                           ;initializer for Send4Disp@Nro_Disp
   108  003419  01                 	db	1
   109                           
   110                           ;initializer for Leds13@i
   111  00341A  01                 	db	1
   112                           
   113                           ;initializer for _frecuencia
   114  00341B  03E8               	dw	1000
   115                           
   116                           	psect	idataBANK0
   117  00323A                     __pidataBANK0:
   118                           	opt callstack 0
   119                           
   120                           ;initializer for _seisalto
   121  00323A  0014               	dw	20
   122  00323C  0000               	dw	0
   123                           
   124                           ;initializer for _seismedio
   125  00323E  000A               	dw	10
   126  003240  0000               	dw	0
   127                           
   128                           ;initializer for _seisbajo
   129  003242  0005               	dw	5
   130  003244  0000               	dw	0
   131                           
   132                           ;initializer for _cent
   133  003246  0003               	dw	3
   134  003248  0000               	dw	0
   135                           
   136                           ;initializer for _alto3
   137  00324A  0014               	dw	20
   138  00324C  0000               	dw	0
   139                           
   140                           ;initializer for _medio3
   141  00324E  000A               	dw	10
   142  003250  0000               	dw	0
   143                           
   144                           ;initializer for _bajo3
   145  003252  0005               	dw	5
   146  003254  0000               	dw	0
   147                           
   148                           ;initializer for _cont_siete
   149  003256  000A               	dw	10
   150  003258  0000               	dw	0
   151                           
   152                           ;initializer for _contdes_a
   153  00325A  000A               	dw	10
   154  00325C  0000               	dw	0
   155                           
   156                           ;initializer for _c
   157  00325E  000F               	dw	15
   158  003260  0000               	dw	0
   159                           
   160                           ;initializer for _b
   161  003262  0005               	dw	5
   162  003264  0000               	dw	0
   163                           
   164                           ;initializer for _alto
   165  003266  0014               	dw	20
   166  003268  0000               	dw	0
   167                           
   168                           ;initializer for _medio
   169  00326A  000A               	dw	10
   170  00326C  0000               	dw	0
   171                           
   172                           ;initializer for _bajo
   173  00326E  0005               	dw	5
   174  003270  0000               	dw	0
   175                           
   176                           ;initializer for _cont_inicio
   177  003272  0007               	dw	7
   178  003274  0000               	dw	0
   179                           
   180                           ;initializer for _OffsetPeriodo
   181  003276  20                 	db	32
   182                           
   183                           	psect	smallconst
   184  002100                     __psmallconst:
   185                           	opt callstack 0
   186  002100  00                 	db	0
   187  002101                     _teclas:
   188                           	opt callstack 0
   189  002101  01                 	db	1
   190  002102  02                 	db	2
   191  002103  03                 	db	3
   192  002104  04                 	db	4
   193  002105  05                 	db	5
   194  002106  06                 	db	6
   195  002107  07                 	db	7
   196  002108  08                 	db	8
   197  002109  09                 	db	9
   198  00210A  2A                 	db	42
   199  00210B  00                 	db	0
   200  00210C  2B                 	db	43
   201  00210D                     __end_of_teclas:
   202                           	opt callstack 0
   203  00210D  20                 	db	32
   204  00210E  20                 	db	32
   205  00210F  20                 	db	32
   206  002110  2A                 	db	42
   207  002111  2A                 	db	42
   208  002112  46                 	db	70	;'F'
   209  002113  72                 	db	114	;'r'
   210  002114  61                 	db	97	;'a'
   211  002115  73                 	db	115	;'s'
   212  002116  65                 	db	101	;'e'
   213  002117  20                 	db	32
   214  002118  65                 	db	101	;'e'
   215  002119  73                 	db	115	;'s'
   216  00211A  63                 	db	99	;'c'
   217  00211B  6F                 	db	111	;'o'
   218  00211C  6E                 	db	110	;'n'
   219  00211D  64                 	db	100	;'d'
   220  00211E  69                 	db	105	;'i'
   221  00211F  64                 	db	100	;'d'
   222  002120  61                 	db	97	;'a'
   223  002121  20                 	db	32
   224  002122  3A                 	db	58	;':'
   225  002123  2D                 	db	45
   226  002124  29                 	db	41
   227  002125  20                 	db	32
   228  002126  2A                 	db	42
   229  002127  2A                 	db	42
   230  002128  00                 	db	0
   231  002129                     STR_5:
   232  002129  20                 	db	32
   233  00212A  41                 	db	65	;'A'
   234  00212B  47                 	db	71	;'G'
   235  00212C  55                 	db	85	;'U'
   236  00212D  41                 	db	65	;'A'
   237  00212E  20                 	db	32
   238  00212F  59                 	db	89	;'Y'
   239  002130  20                 	db	32
   240  002131  4A                 	db	74	;'J'
   241  002132  41                 	db	65	;'A'
   242  002133  42                 	db	66	;'B'
   243  002134  4F                 	db	79	;'O'
   244  002135  4E                 	db	78	;'N'
   245  002136  20                 	db	32
   246  002137  20                 	db	32
   247  002138  00                 	db	0
   248  002139                     STR_9:
   249  002139  23                 	db	35
   250  00213A  23                 	db	35
   251  00213B  20                 	db	32
   252  00213C  43                 	db	67	;'C'
   253  00213D  41                 	db	65	;'A'
   254  00213E  52                 	db	82	;'R'
   255  00213F  47                 	db	71	;'G'
   256  002140  41                 	db	65	;'A'
   257  002141  4E                 	db	78	;'N'
   258  002142  44                 	db	68	;'D'
   259  002143  4F                 	db	79	;'O'
   260  002144  20                 	db	32
   261  002145  23                 	db	35
   262  002146  23                 	db	35
   263  002147  00                 	db	0
   264  002148                     STR_2:
   265  002148  23                 	db	35
   266  002149  23                 	db	35
   267  00214A  46                 	db	70	;'F'
   268  00214B  49                 	db	73	;'I'
   269  00214C  4E                 	db	78	;'N'
   270  00214D  41                 	db	65	;'A'
   271  00214E  4C                 	db	76	;'L'
   272  00214F  49                 	db	73	;'I'
   273  002150  5A                 	db	90	;'Z'
   274  002151  41                 	db	65	;'A'
   275  002152  44                 	db	68	;'D'
   276  002153  4F                 	db	79	;'O'
   277  002154  23                 	db	35
   278  002155  23                 	db	35
   279  002156  00                 	db	0
   280  002157                     STR_1:
   281  002157  23                 	db	35
   282  002158  23                 	db	35
   283  002159  43                 	db	67	;'C'
   284  00215A  41                 	db	65	;'A'
   285  00215B  4C                 	db	76	;'L'
   286  00215C  45                 	db	69	;'E'
   287  00215D  4E                 	db	78	;'N'
   288  00215E  54                 	db	84	;'T'
   289  00215F  41                 	db	65	;'A'
   290  002160  4E                 	db	78	;'N'
   291  002161  44                 	db	68	;'D'
   292  002162  4F                 	db	79	;'O'
   293  002163  23                 	db	35
   294  002164  23                 	db	35
   295  002165  00                 	db	0
   296  002166                     STR_7:
   297  002166  44                 	db	68	;'D'
   298  002167  45                 	db	69	;'E'
   299  002168  53                 	db	83	;'S'
   300  002169  41                 	db	65	;'A'
   301  00216A  47                 	db	71	;'G'
   302  00216B  4F                 	db	79	;'O'
   303  00216C  54                 	db	84	;'T'
   304  00216D  41                 	db	65	;'A'
   305  00216E  4E                 	db	78	;'N'
   306  00216F  44                 	db	68	;'D'
   307  002170  4F                 	db	79	;'O'
   308  002171  2E                 	db	46
   309  002172  2E                 	db	46
   310  002173  2E                 	db	46
   311  002174  00                 	db	0
   312  002175                     STR_3:
   313  002175  50                 	db	80	;'P'
   314  002176  65                 	db	101	;'e'
   315  002177  73                 	db	115	;'s'
   316  002178  6F                 	db	111	;'o'
   317  002179  20                 	db	32
   318  00217A  73                 	db	115	;'s'
   319  00217B  65                 	db	101	;'e'
   320  00217C  6E                 	db	110	;'n'
   321  00217D  73                 	db	115	;'s'
   322  00217E  61                 	db	97	;'a'
   323  00217F  64                 	db	100	;'d'
   324  002180  6F                 	db	111	;'o'
   325  002181  3A                 	db	58	;':'
   326  002182  00                 	db	0
   327  002183                     STR_15:
   328  002183  4D                 	db	77	;'M'
   329  002184  4F                 	db	79	;'O'
   330  002185  54                 	db	84	;'T'
   331  002186  4F                 	db	79	;'O'
   332  002187  52                 	db	82	;'R'
   333  002188  20                 	db	32
   334  002189  48                 	db	72	;'H'
   335  00218A  4F                 	db	79	;'O'
   336  00218B  52                 	db	82	;'R'
   337  00218C  41                 	db	65	;'A'
   338  00218D  52                 	db	82	;'R'
   339  00218E  49                 	db	73	;'I'
   340  00218F  4F                 	db	79	;'O'
   341  002190  00                 	db	0
   342  002191  48                 	db	72	;'H'
   343  002192  6F                 	db	111	;'o'
   344  002193  6C                 	db	108	;'l'
   345  002194  61                 	db	97	;'a'
   346  002195  20                 	db	32
   347  002196  41                 	db	65	;'A'
   348  002197  6C                 	db	108	;'l'
   349  002198  75                 	db	117	;'u'
   350  002199  6D                 	db	109	;'m'
   351  00219A  6E                 	db	110	;'n'
   352  00219B  6F                 	db	111	;'o'
   353  00219C  73                 	db	115	;'s'
   354  00219D  00                 	db	0
   355  00219E                     STR_19:
   356  00219E  23                 	db	35
   357  00219F  23                 	db	35
   358  0021A0  20                 	db	32
   359  0021A1  4C                 	db	76	;'L'
   360  0021A2  41                 	db	65	;'A'
   361  0021A3  56                 	db	86	;'V'
   362  0021A4  41                 	db	65	;'A'
   363  0021A5  44                 	db	68	;'D'
   364  0021A6  4F                 	db	79	;'O'
   365  0021A7  20                 	db	32
   366  0021A8  23                 	db	35
   367  0021A9  23                 	db	35
   368  0021AA  00                 	db	0
   369  0021AB                     STR_16:
   370  0021AB  4C                 	db	76	;'L'
   371  0021AC  41                 	db	65	;'A'
   372  0021AD  56                 	db	86	;'V'
   373  0021AE  41                 	db	65	;'A'
   374  0021AF  4E                 	db	78	;'N'
   375  0021B0  44                 	db	68	;'D'
   376  0021B1  4F                 	db	79	;'O'
   377  0021B2  2E                 	db	46
   378  0021B3  2E                 	db	46
   379  0021B4  2E                 	db	46
   380  0021B5  00                 	db	0
   381  0021B6                     STR_17:
   382  0021B6  4D                 	db	77	;'M'
   383  0021B7  4F                 	db	79	;'O'
   384  0021B8  54                 	db	84	;'T'
   385  0021B9  4F                 	db	79	;'O'
   386  0021BA  52                 	db	82	;'R'
   387  0021BB  20                 	db	32
   388  0021BC  41                 	db	65	;'A'
   389  0021BD  4E                 	db	78	;'N'
   390  0021BE  54                 	db	84	;'T'
   391  0021BF  49                 	db	73	;'I'
   392  0021C0  00                 	db	0
   393  0021C1                     STR_20:
   394  0021C1  46                 	db	70	;'F'
   395  0021C2  49                 	db	73	;'I'
   396  0021C3  4E                 	db	78	;'N'
   397  0021C4  41                 	db	65	;'A'
   398  0021C5  4C                 	db	76	;'L'
   399  0021C6  49                 	db	73	;'I'
   400  0021C7  5A                 	db	90	;'Z'
   401  0021C8  41                 	db	65	;'A'
   402  0021C9  44                 	db	68	;'D'
   403  0021CA  4F                 	db	79	;'O'
   404  0021CB  00                 	db	0
   405  0021CC                     STR_6:
   406  0021CC  20                 	db	32
   407  0021CD  43                 	db	67	;'C'
   408  0021CE  41                 	db	65	;'A'
   409  0021CF  52                 	db	82	;'R'
   410  0021D0  47                 	db	71	;'G'
   411  0021D1  41                 	db	65	;'A'
   412  0021D2  44                 	db	68	;'D'
   413  0021D3  4F                 	db	79	;'O'
   414  0021D4  53                 	db	83	;'S'
   415  0021D5  00                 	db	0
   416  0021D6                     STR_10:
   417  0021D6  20                 	db	32
   418  0021D7  20                 	db	32
   419  0021D8  20                 	db	32
   420  0021D9  20                 	db	32
   421  0021DA  20                 	db	32
   422  0021DB  20                 	db	32
   423  0021DC  20                 	db	32
   424  0021DD  00                 	db	0
   425  0021DE  42                 	db	66	;'B'
   426  0021DF  4F                 	db	79	;'O'
   427  0021E0  54                 	db	84	;'T'
   428  0021E1  31                 	db	49	;'1'
   429  0021E2  20                 	db	32
   430  0021E3  00                 	db	0
   431  0021E4  42                 	db	66	;'B'
   432  0021E5  4F                 	db	79	;'O'
   433  0021E6  54                 	db	84	;'T'
   434  0021E7  31                 	db	49	;'1'
   435  0021E8  00                 	db	0
   436  0021E9  42                 	db	66	;'B'
   437  0021EA  4F                 	db	79	;'O'
   438  0021EB  54                 	db	84	;'T'
   439  0021EC  32                 	db	50	;'2'
   440  0021ED  00                 	db	0
   441  0021EE  42                 	db	66	;'B'
   442  0021EF  4F                 	db	79	;'O'
   443  0021F0  54                 	db	84	;'T'
   444  0021F1  33                 	db	51	;'3'
   445  0021F2  00                 	db	0
   446  0021F3  42                 	db	66	;'B'
   447  0021F4  4F                 	db	79	;'O'
   448  0021F5  54                 	db	84	;'T'
   449  0021F6  34                 	db	52	;'4'
   450  0021F7  00                 	db	0
   451  0021F8                     STR_4:
   452  0021F8  4B                 	db	75	;'K'
   453  0021F9  67                 	db	103	;'g'
   454  0021FA  00                 	db	0
   455  0000                     
   456                           ; #config settings
   457  0021FB  00                 	db	0	; dummy byte at the end
   458  0000                     
   459                           	psect	nvBANK0
   460  0000FE                     __pnvBANK0:
   461                           	opt callstack 0
   462  0000FE                     _LCD_tout:
   463                           	opt callstack 0
   464  0000FE                     	ds	2
   465  0000                     _PORTBbits	set	3969
   466  0000                     _INTCON3bits	set	4080
   467  0000                     _INTCON2bits	set	4081
   468  0000                     _TRISBbits	set	3987
   469  0000                     _EECON2	set	4007
   470  0000                     _EECON1bits	set	4006
   471  0000                     _EEDATA	set	4008
   472  0000                     _EEADR	set	4009
   473  0000                     _PORTB	set	3969
   474  0000                     _ADRESL	set	4035
   475  0000                     _ADRESH	set	4036
   476  0000                     _ADCON0bits	set	4034
   477  0000                     _ADCON2	set	4032
   478  0000                     _PORTA	set	3968
   479  0000                     _TXREG	set	4013
   480  0000                     _T2CONbits	set	4042
   481  0000                     _CCP1CONbits	set	4029
   482  0000                     _CCPR1L	set	4030
   483  0000                     _PR2	set	4043
   484  0000                     _RCREG	set	4014
   485  0000                     _RCSTAbits	set	4011
   486  0000                     _SPBRGH	set	4016
   487  0000                     _SPBRG	set	4015
   488  0000                     _BAUDCONbits	set	4024
   489  0000                     _TXSTAbits	set	4012
   490  0000                     _PIE1bits	set	3997
   491  0000                     _PIR1bits	set	3998
   492  0000                     _T1CONbits	set	4045
   493  0000                     _T0CONbits	set	4053
   494  0000                     _TRISC	set	3988
   495  0000                     _LATEbits	set	3981
   496  0000                     _TRISB	set	3987
   497  0000                     _TRISE	set	3990
   498  0000                     _TRISA	set	3986
   499  0000                     _ADCON1	set	4033
   500  0000                     _CMCON	set	4020
   501  0000                     _LATE	set	3981
   502  0000                     _LATC	set	3979
   503  0000                     _LATB	set	3978
   504  0000                     _LATA	set	3977
   505  0000                     _PORTDbits	set	3971
   506  0000                     _LATD	set	3980
   507  0000                     _PORTEbits	set	3972
   508  0000                     _TRISEbits	set	3990
   509  0000                     _TRISD	set	3989
   510  0000                     _LATDbits	set	3980
   511  0000                     _LATCbits	set	3979
   512  0000                     _LATAbits	set	3977
   513  0000                     _TMR1H	set	4047
   514  0000                     _TMR1L	set	4046
   515  0000                     _TMR0H	set	4055
   516  0000                     _TMR0L	set	4054
   517  0000                     _INTCONbits	set	4082
   518  0000                     _TRISAbits	set	3986
   519  0000                     _TRISCbits	set	3988
   520  0000                     _TRISDbits	set	3989
   521  0000                     _RBIE	set	32659
   522  0000                     _RBIP	set	32648
   523  0000                     _RBPU	set	32655
   524  0000                     _INT1IE	set	32643
   525  0000                     _INT1IF	set	32640
   526  0000                     _INT0IF	set	32657
   527  0000                     _INT0IE	set	32660
   528  0000                     _RBIF	set	32656
   529  0000                     _TMR1IF	set	31984
   530  0000                     _TMR0IF	set	32658
   531  0000                     _TMR1ON	set	32360
   532  0000                     _TMR0ON	set	32431
   533                           
   534                           	psect	cinit
   535  0030D4                     __pcinit:
   536                           	opt callstack 0
   537  0030D4                     start_initialization:
   538                           	opt callstack 0
   539  0030D4                     __initialization:
   540                           	opt callstack 0
   541                           
   542                           ; Initialize objects allocated to BANK0 (61 bytes)
   543                           ; load TBLPTR registers with __pidataBANK0
   544  0030D4  0E3A               	movlw	low __pidataBANK0
   545  0030D6  6EF6               	movwf	tblptrl,c
   546  0030D8  0E32               	movlw	high __pidataBANK0
   547  0030DA  6EF7               	movwf	tblptrh,c
   548  0030DC  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   549  0030DE  6EF8               	movwf	tblptru,c
   550  0030E0  EE00  F0C1         	lfsr	0,__pdataBANK0
   551  0030E4  EE10 F03D          	lfsr	1,61
   552  0030E8                     copy_data0:
   553  0030E8  0009               	tblrd		*+
   554  0030EA  CFF5 FFEE          	movff	tablat,postinc0
   555  0030EE  50E5               	movf	postdec1,w,c
   556  0030F0  50E1               	movf	fsr1l,w,c
   557  0030F2  E1FA               	bnz	copy_data0
   558                           
   559                           ; Initialize objects allocated to COMRAM (13 bytes)
   560                           ; load TBLPTR registers with __pidataCOMRAM
   561  0030F4  0E10               	movlw	low __pidataCOMRAM
   562  0030F6  6EF6               	movwf	tblptrl,c
   563  0030F8  0E34               	movlw	high __pidataCOMRAM
   564  0030FA  6EF7               	movwf	tblptrh,c
   565  0030FC  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   566  0030FE  6EF8               	movwf	tblptru,c
   567  003100  EE00  F052         	lfsr	0,__pdataCOMRAM
   568  003104  EE10 F00D          	lfsr	1,13
   569  003108                     copy_data1:
   570  003108  0009               	tblrd		*+
   571  00310A  CFF5 FFEE          	movff	tablat,postinc0
   572  00310E  50E5               	movf	postdec1,w,c
   573  003110  50E1               	movf	fsr1l,w,c
   574  003112  E1FA               	bnz	copy_data1
   575                           
   576                           ; Clear objects allocated to BANK1 (8 bytes)
   577  003114  EE01  F000         	lfsr	0,__pbssBANK1
   578  003118  0E08               	movlw	8
   579  00311A                     clear_0:
   580  00311A  6AEE               	clrf	postinc0,c
   581  00311C  06E8               	decf	wreg,f,c
   582  00311E  E1FD               	bnz	clear_0
   583                           
   584                           ; Clear objects allocated to BANK0 (97 bytes)
   585  003120  EE00  F060         	lfsr	0,__pbssBANK0
   586  003124  0E61               	movlw	97
   587  003126                     clear_1:
   588  003126  6AEE               	clrf	postinc0,c
   589  003128  06E8               	decf	wreg,f,c
   590  00312A  E1FD               	bnz	clear_1
   591                           
   592                           ; Clear objects allocated to COMRAM (33 bytes)
   593  00312C  EE00  F031         	lfsr	0,__pbssCOMRAM
   594  003130  0E21               	movlw	33
   595  003132                     clear_2:
   596  003132  6AEE               	clrf	postinc0,c
   597  003134  06E8               	decf	wreg,f,c
   598  003136  E1FD               	bnz	clear_2
   599  003138                     end_of_initialization:
   600                           	opt callstack 0
   601  003138                     __end_of__initialization:
   602                           	opt callstack 0
   603  003138  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   604  00313A  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   605  00313C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   606  00313E  6EF8               	movwf	tblptru,c
   607  003140  0100               	movlb	0
   608  003142  EF93  F019         	goto	_main	;jump to C main() function
   609                           
   610                           	psect	bssCOMRAM
   611  000031                     __pbssCOMRAM:
   612                           	opt callstack 0
   613  000031                     _kilos:
   614                           	opt callstack 0
   615  000031                     	ds	4
   616  000035                     _MedioPeriodoSet:
   617                           	opt callstack 0
   618  000035                     	ds	2
   619  000037                     _led_tout:
   620                           	opt callstack 0
   621  000037                     	ds	2
   622  000039                     tecla@status_KB:
   623                           	opt callstack 0
   624  000039                     	ds	1
   625  00003A                     _delay_kb:
   626                           	opt callstack 0
   627  00003A                     	ds	1
   628  00003B                     _flag_kb:
   629                           	opt callstack 0
   630  00003B                     	ds	1
   631  00003C                     _flagCanal:
   632                           	opt callstack 0
   633  00003C                     	ds	1
   634  00003D                     _encoderTout:
   635                           	opt callstack 0
   636  00003D                     	ds	1
   637  00003E                     _posicionEncoder:
   638                           	opt callstack 0
   639  00003E                     	ds	1
   640  00003F                     _minimoEncoder:
   641                           	opt callstack 0
   642  00003F                     	ds	1
   643  000040                     _maximoEncoder:
   644                           	opt callstack 0
   645  000040                     	ds	1
   646  000041                     demo_shield2_1@cont3:
   647                           	opt callstack 0
   648  000041                     	ds	1
   649  000042                     demo_shield2_1@cont2:
   650                           	opt callstack 0
   651  000042                     	ds	1
   652  000043                     demo_shield2_1@cont1:
   653                           	opt callstack 0
   654  000043                     	ds	1
   655  000044                     demo_shield2_1@cont:
   656                           	opt callstack 0
   657  000044                     	ds	1
   658  000045                     demo_shield2_1@Desplazar:
   659                           	opt callstack 0
   660  000045                     	ds	1
   661  000046                     demo_shield2_1@PrimeraVez:
   662                           	opt callstack 0
   663  000046                     	ds	1
   664  000047                     demo_shield2_1@flag3:
   665                           	opt callstack 0
   666  000047                     	ds	1
   667  000048                     demo_shield2_1@flag2:
   668                           	opt callstack 0
   669  000048                     	ds	1
   670  000049                     demo_shield2_1@flag1:
   671                           	opt callstack 0
   672  000049                     	ds	1
   673  00004A                     demo_shield2_1@flag0:
   674                           	opt callstack 0
   675  00004A                     	ds	1
   676  00004B                     debounce@cnt1:
   677                           	opt callstack 0
   678  00004B                     	ds	1
   679  00004C                     debounce@cnt0:
   680                           	opt callstack 0
   681  00004C                     	ds	1
   682  00004D                     debounce@state:
   683                           	opt callstack 0
   684  00004D                     	ds	1
   685  00004E                     Botones13@Estado_BOT:
   686                           	opt callstack 0
   687  00004E                     	ds	1
   688  00004F                     _bot_tout:
   689                           	opt callstack 0
   690  00004F                     	ds	1
   691  000050                     _mux_tout:
   692                           	opt callstack 0
   693  000050                     	ds	1
   694  000051                     _EstadoDeLosBotones:
   695                           	opt callstack 0
   696  000051                     	ds	1
   697                           
   698                           	psect	dataCOMRAM
   699  000052                     __pdataCOMRAM:
   700                           	opt callstack 0
   701  000052                     _a:
   702                           	opt callstack 0
   703  000052                     	ds	4
   704  000056                     _col:
   705                           	opt callstack 0
   706  000056                     	ds	1
   707  000057                     _fila:
   708                           	opt callstack 0
   709  000057                     	ds	1
   710  000058                     tic_encoder@estado:
   711                           	opt callstack 0
   712  000058                     	ds	1
   713  000059                     tic_debounce@debounce_tic:
   714                           	opt callstack 0
   715  000059                     	ds	1
   716  00005A                     _UpperByte:
   717                           	opt callstack 0
   718  00005A                     	ds	1
   719  00005B                     Send4Disp@Nro_Disp:
   720                           	opt callstack 0
   721  00005B                     	ds	1
   722  00005C                     Leds13@i:
   723                           	opt callstack 0
   724  00005C                     	ds	1
   725  00005D                     _frecuencia:
   726                           	opt callstack 0
   727  00005D                     	ds	2
   728                           
   729                           	psect	bssBANK0
   730  000060                     __pbssBANK0:
   731                           	opt callstack 0
   732  000060                     _flagalto:
   733                           	opt callstack 0
   734  000060                     	ds	4
   735  000064                     _flagmedio:
   736                           	opt callstack 0
   737  000064                     	ds	4
   738  000068                     _flagbajo:
   739                           	opt callstack 0
   740  000068                     	ds	4
   741  00006C                     _y1:
   742                           	opt callstack 0
   743  00006C                     	ds	4
   744  000070                     _t3:
   745                           	opt callstack 0
   746  000070                     	ds	4
   747  000074                     _t2:
   748                           	opt callstack 0
   749  000074                     	ds	4
   750  000078                     _t1:
   751                           	opt callstack 0
   752  000078                     	ds	4
   753  00007C                     _flag_siete:
   754                           	opt callstack 0
   755  00007C                     	ds	4
   756  000080                     _flagdes:
   757                           	opt callstack 0
   758  000080                     	ds	4
   759  000084                     _cuatro:
   760                           	opt callstack 0
   761  000084                     	ds	4
   762  000088                     _fa:
   763                           	opt callstack 0
   764  000088                     	ds	4
   765  00008C                     _fb:
   766                           	opt callstack 0
   767  00008C                     	ds	4
   768  000090                     _flag:
   769                           	opt callstack 0
   770  000090                     	ds	4
   771  000094                     _flag5:
   772                           	opt callstack 0
   773  000094                     	ds	4
   774  000098                     _flag4:
   775                           	opt callstack 0
   776  000098                     	ds	4
   777  00009C                     _flag3:
   778                           	opt callstack 0
   779  00009C                     	ds	4
   780  0000A0                     _flag2:
   781                           	opt callstack 0
   782  0000A0                     	ds	4
   783  0000A4                     _multi:
   784                           	opt callstack 0
   785  0000A4                     	ds	4
   786  0000A8                     _uni:
   787                           	opt callstack 0
   788  0000A8                     	ds	4
   789  0000AC                     _dec:
   790                           	opt callstack 0
   791  0000AC                     	ds	4
   792  0000B0                     _guarda_ADC:
   793                           	opt callstack 0
   794  0000B0                     	ds	4
   795  0000B4                     _flag_etapa2:
   796                           	opt callstack 0
   797  0000B4                     	ds	4
   798  0000B8                     _flag_inicio:
   799                           	opt callstack 0
   800  0000B8                     	ds	4
   801  0000BC                     _desplazar_tout:
   802                           	opt callstack 0
   803  0000BC                     	ds	2
   804  0000BE                     _MultiplicadorSet:
   805                           	opt callstack 0
   806  0000BE                     	ds	1
   807  0000BF                     _Multiplicador:
   808                           	opt callstack 0
   809  0000BF                     	ds	1
   810  0000C0                     _LowerByte:
   811                           	opt callstack 0
   812  0000C0                     	ds	1
   813                           
   814                           	psect	dataBANK0
   815  0000C1                     __pdataBANK0:
   816                           	opt callstack 0
   817  0000C1                     _seisalto:
   818                           	opt callstack 0
   819  0000C1                     	ds	4
   820  0000C5                     _seismedio:
   821                           	opt callstack 0
   822  0000C5                     	ds	4
   823  0000C9                     _seisbajo:
   824                           	opt callstack 0
   825  0000C9                     	ds	4
   826  0000CD                     _cent:
   827                           	opt callstack 0
   828  0000CD                     	ds	4
   829  0000D1                     _alto3:
   830                           	opt callstack 0
   831  0000D1                     	ds	4
   832  0000D5                     _medio3:
   833                           	opt callstack 0
   834  0000D5                     	ds	4
   835  0000D9                     _bajo3:
   836                           	opt callstack 0
   837  0000D9                     	ds	4
   838  0000DD                     _cont_siete:
   839                           	opt callstack 0
   840  0000DD                     	ds	4
   841  0000E1                     _contdes_a:
   842                           	opt callstack 0
   843  0000E1                     	ds	4
   844  0000E5                     _c:
   845                           	opt callstack 0
   846  0000E5                     	ds	4
   847  0000E9                     _b:
   848                           	opt callstack 0
   849  0000E9                     	ds	4
   850  0000ED                     _alto:
   851                           	opt callstack 0
   852  0000ED                     	ds	4
   853  0000F1                     _medio:
   854                           	opt callstack 0
   855  0000F1                     	ds	4
   856  0000F5                     _bajo:
   857                           	opt callstack 0
   858  0000F5                     	ds	4
   859  0000F9                     _cont_inicio:
   860                           	opt callstack 0
   861  0000F9                     	ds	4
   862  0000FD                     _OffsetPeriodo:
   863                           	opt callstack 0
   864  0000FD                     	ds	1
   865                           
   866                           	psect	bssBANK1
   867  000100                     __pbssBANK1:
   868                           	opt callstack 0
   869  000100                     _flag7:
   870                           	opt callstack 0
   871  000100                     	ds	4
   872  000104                     _flag6:
   873                           	opt callstack 0
   874  000104                     	ds	4
   875                           
   876                           	psect	cstackCOMRAM
   877  000001                     __pcstackCOMRAM:
   878                           	opt callstack 0
   879  000001                     ??_tecla:
   880  000001                     ?_obtener_ADC10:
   881                           	opt callstack 0
   882  000001                     ?___lmul:
   883                           	opt callstack 0
   884  000001                     write_LCD@dato:
   885                           	opt callstack 0
   886  000001                     ___lmul@multiplier:
   887                           	opt callstack 0
   888                           
   889                           ; 4 bytes @ 0x0
   890  000001                     	ds	1
   891  000002                     write_DATA@dato:
   892                           	opt callstack 0
   893  000002                     write_CMD@dato:
   894                           	opt callstack 0
   895                           
   896                           ; 1 bytes @ 0x1
   897  000002                     	ds	1
   898  000003                     char2LCD@dato:
   899                           	opt callstack 0
   900  000003                     set_CURSOR@posi:
   901                           	opt callstack 0
   902  000003                     obtener_ADC10@GuardoPorta:
   903                           	opt callstack 0
   904  000003                     tecla@tecla_KB:
   905                           	opt callstack 0
   906  000003                     msg2LCD@datos:
   907                           	opt callstack 0
   908  000003                     clear_LCD@i:
   909                           	opt callstack 0
   910  000003                     LCD_init@i:
   911                           	opt callstack 0
   912                           
   913                           ; 4 bytes @ 0x2
   914  000003                     	ds	1
   915  000004                     obtener_ADC10@GuardoTrisa:
   916                           	opt callstack 0
   917  000004                     char2LCD@i:
   918                           	opt callstack 0
   919  000004                     set_CURSOR@i:
   920                           	opt callstack 0
   921                           
   922                           ; 4 bytes @ 0x3
   923  000004                     	ds	1
   924  000005                     obtener_ADC10@ad_res:
   925                           	opt callstack 0
   926  000005                     msg2LCD@i:
   927                           	opt callstack 0
   928  000005                     ___lmul@multiplicand:
   929                           	opt callstack 0
   930                           
   931                           ; 4 bytes @ 0x4
   932  000005                     	ds	2
   933  000007                     LCD_init@i_690:
   934                           	opt callstack 0
   935                           
   936                           ; 4 bytes @ 0x6
   937  000007                     	ds	2
   938  000009                     ??_casos:
   939  000009                     ___lmul@product:
   940                           	opt callstack 0
   941                           
   942                           ; 4 bytes @ 0x8
   943  000009                     	ds	2
   944  00000B                     LCD_init@i_691:
   945                           	opt callstack 0
   946                           
   947                           ; 4 bytes @ 0xA
   948  00000B                     	ds	2
   949  00000D                     ?___aldiv:
   950                           	opt callstack 0
   951  00000D                     ___aldiv@dividend:
   952                           	opt callstack 0
   953                           
   954                           ; 4 bytes @ 0xC
   955  00000D                     	ds	2
   956  00000F                     LCD_init@i_692:
   957                           	opt callstack 0
   958                           
   959                           ; 4 bytes @ 0xE
   960  00000F                     	ds	2
   961  000011                     ___aldiv@divisor:
   962                           	opt callstack 0
   963                           
   964                           ; 4 bytes @ 0x10
   965  000011                     	ds	2
   966  000013                     LCD_init@i_693:
   967                           	opt callstack 0
   968                           
   969                           ; 4 bytes @ 0x12
   970  000013                     	ds	2
   971  000015                     ___aldiv@counter:
   972                           	opt callstack 0
   973                           
   974                           ; 1 bytes @ 0x14
   975  000015                     	ds	1
   976  000016                     ___aldiv@sign:
   977                           	opt callstack 0
   978                           
   979                           ; 1 bytes @ 0x15
   980  000016                     	ds	1
   981  000017                     LCD_init@i_694:
   982                           	opt callstack 0
   983  000017                     ___aldiv@quotient:
   984                           	opt callstack 0
   985                           
   986                           ; 4 bytes @ 0x16
   987  000017                     	ds	4
   988  00001B                     ?_readADC:
   989                           	opt callstack 0
   990                           
   991                           ; 4 bytes @ 0x1A
   992  00001B                     	ds	4
   993  00001F                     ?___almod:
   994                           	opt callstack 0
   995  00001F                     ___almod@dividend:
   996                           	opt callstack 0
   997                           
   998                           ; 4 bytes @ 0x1E
   999  00001F                     	ds	4
  1000  000023                     ___almod@divisor:
  1001                           	opt callstack 0
  1002                           
  1003                           ; 4 bytes @ 0x22
  1004  000023                     	ds	4
  1005  000027                     ___almod@counter:
  1006                           	opt callstack 0
  1007                           
  1008                           ; 1 bytes @ 0x26
  1009  000027                     	ds	1
  1010  000028                     ___almod@sign:
  1011                           	opt callstack 0
  1012                           
  1013                           ; 1 bytes @ 0x27
  1014  000028                     	ds	1
  1015  000029                     ??_principal:
  1016                           
  1017                           ; 1 bytes @ 0x28
  1018  000029                     	ds	4
  1019  00002D                     _principal$2717:
  1020                           	opt callstack 0
  1021                           
  1022                           ; 4 bytes @ 0x2C
  1023  00002D                     	ds	4
  1024  000031                     
  1025                           ; 1 bytes @ 0x30
  1026 ;;
  1027 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1028 ;;
  1029 ;; *************** function _main *****************
  1030 ;; Defined at:
  1031 ;;		line 90 in file "main.c"
  1032 ;; Parameters:    Size  Location     Type
  1033 ;;		None
  1034 ;; Auto vars:     Size  Location     Type
  1035 ;;		None
  1036 ;; Return value:  Size  Location     Type
  1037 ;;                  1    wreg      void 
  1038 ;; Registers used:
  1039 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1040 ;; Tracked objects:
  1041 ;;		On entry : 0/0
  1042 ;;		On exit  : 0/0
  1043 ;;		Unchanged: 0/0
  1044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1045 ;;      Params:         0       0       0       0       0       0       0       0       0
  1046 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1047 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1048 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1049 ;;Total ram usage:        0 bytes
  1050 ;; Hardware stack levels required when called:    7
  1051 ;; This function calls:
  1052 ;;		_LCD_init
  1053 ;;		_PicIni21
  1054 ;;		_TIMER0_INI
  1055 ;;		_TIMER1_INI
  1056 ;;		_principal
  1057 ;;		_tecladoIni13
  1058 ;; This function is called by:
  1059 ;;		Startup code after reset
  1060 ;; This function uses a non-reentrant model
  1061 ;;
  1062                           
  1063                           	psect	text0
  1064  003326                     __ptext0:
  1065                           	opt callstack 0
  1066  003326                     _main:
  1067                           	opt callstack 24
  1068                           
  1069                           ;main.c: 92: PicIni21();
  1070                           
  1071                           ;incstack = 0
  1072  003326  ECAA  F019         	call	_PicIni21	;wreg free
  1073                           
  1074                           ;main.c: 94: TRISDbits.RD1 = 0;
  1075  00332A  9295               	bcf	3989,1,c	;volatile
  1076                           
  1077                           ;main.c: 95: TRISDbits.RD0 = 0;
  1078  00332C  9095               	bcf	3989,0,c	;volatile
  1079                           
  1080                           ;main.c: 96: TRISCbits.RC0 = 0;
  1081  00332E  9094               	bcf	3988,0,c	;volatile
  1082                           
  1083                           ;main.c: 97: TRISCbits.RC1 = 0;
  1084  003330  9294               	bcf	3988,1,c	;volatile
  1085                           
  1086                           ;main.c: 98: TRISCbits.RC2 = 0;
  1087  003332  9494               	bcf	3988,2,c	;volatile
  1088                           
  1089                           ;main.c: 99: TRISAbits.RA2 = 0;
  1090  003334  9492               	bcf	3986,2,c	;volatile
  1091                           
  1092                           ;main.c: 100: TRISAbits.RA5 = 0;
  1093  003336  9A92               	bcf	3986,5,c	;volatile
  1094                           
  1095                           ;main.c: 102: TIMER0_INI();
  1096  003338  ECE0  F019         	call	_TIMER0_INI	;wreg free
  1097                           
  1098                           ;main.c: 103: TMR0ON = 1;
  1099  00333C  8ED5               	bsf	4053,7,c	;volatile
  1100                           
  1101                           ;main.c: 104: TIMER1_INI();
  1102  00333E  ECC0  F019         	call	_TIMER1_INI	;wreg free
  1103                           
  1104                           ;main.c: 105: TMR1ON = 1;
  1105  003342  80CD               	bsf	4045,0,c	;volatile
  1106                           
  1107                           ;main.c: 106: (INTCONbits.GIE = 1);
  1108  003344  8EF2               	bsf	4082,7,c	;volatile
  1109                           
  1110                           ;main.c: 107: tecladoIni13();
  1111  003346  ECED  F019         	call	_tecladoIni13	;wreg free
  1112                           
  1113                           ;main.c: 109: LCD_init();
  1114  00334A  EC03  F015         	call	_LCD_init	;wreg free
  1115  00334E                     l4213:
  1116                           
  1117                           ;main.c: 115: principal();
  1118  00334E  ECFE  F010         	call	_principal	;wreg free
  1119  003352  D7FD               	goto	l4213
  1120  003354                     __end_of_main:
  1121                           	opt callstack 0
  1122                           
  1123 ;; *************** function _tecladoIni13 *****************
  1124 ;; Defined at:
  1125 ;;		line 42 in file "teclado.c"
  1126 ;; Parameters:    Size  Location     Type
  1127 ;;		None
  1128 ;; Auto vars:     Size  Location     Type
  1129 ;;		None
  1130 ;; Return value:  Size  Location     Type
  1131 ;;                  1    wreg      void 
  1132 ;; Registers used:
  1133 ;;		wreg, status,2
  1134 ;; Tracked objects:
  1135 ;;		On entry : 0/0
  1136 ;;		On exit  : 0/0
  1137 ;;		Unchanged: 0/0
  1138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1139 ;;      Params:         0       0       0       0       0       0       0       0       0
  1140 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1141 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1142 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1143 ;;Total ram usage:        0 bytes
  1144 ;; Hardware stack levels used:    1
  1145 ;; Hardware stack levels required when called:    2
  1146 ;; This function calls:
  1147 ;;		Nothing
  1148 ;; This function is called by:
  1149 ;;		_main
  1150 ;; This function uses a non-reentrant model
  1151 ;;
  1152                           
  1153                           	psect	text1
  1154  0033DA                     __ptext1:
  1155                           	opt callstack 0
  1156  0033DA                     _tecladoIni13:
  1157                           	opt callstack 28
  1158                           
  1159                           ;teclado.c: 44: LATB = 0;
  1160                           
  1161                           ;incstack = 0
  1162  0033DA  0E00               	movlw	0
  1163  0033DC  6E8A               	movwf	3978,c	;volatile
  1164                           
  1165                           ;teclado.c: 45: PORTB = 0;
  1166  0033DE  0E00               	movlw	0
  1167  0033E0  6E81               	movwf	3969,c	;volatile
  1168                           
  1169                           ;teclado.c: 46: TRISB = 0xF0;
  1170  0033E2  0EF0               	movlw	240
  1171  0033E4  6E93               	movwf	3987,c	;volatile
  1172                           
  1173                           ;teclado.c: 47: RBPU = 0;
  1174  0033E6  9EF1               	bcf	4081,7,c	;volatile
  1175                           
  1176                           ;teclado.c: 48: RBIP = 1;
  1177  0033E8  80F1               	bsf	4081,0,c	;volatile
  1178                           
  1179                           ;teclado.c: 49: RBIF = 0;
  1180  0033EA  90F2               	bcf	4082,0,c	;volatile
  1181                           
  1182                           ;teclado.c: 50: RBIE = 1;
  1183  0033EC  86F2               	bsf	4082,3,c	;volatile
  1184  0033EE  0012               	return		;funcret
  1185  0033F0                     __end_of_tecladoIni13:
  1186                           	opt callstack 0
  1187                           
  1188 ;; *************** function _principal *****************
  1189 ;; Defined at:
  1190 ;;		line 265 in file "main.c"
  1191 ;; Parameters:    Size  Location     Type
  1192 ;;		None
  1193 ;; Auto vars:     Size  Location     Type
  1194 ;;		None
  1195 ;; Return value:  Size  Location     Type
  1196 ;;                  1    wreg      void 
  1197 ;; Registers used:
  1198 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1199 ;; Tracked objects:
  1200 ;;		On entry : 0/0
  1201 ;;		On exit  : 0/0
  1202 ;;		Unchanged: 0/0
  1203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1204 ;;      Params:         0       0       0       0       0       0       0       0       0
  1205 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1206 ;;      Temps:          4       0       0       0       0       0       0       0       0
  1207 ;;      Totals:         8       0       0       0       0       0       0       0       0
  1208 ;;Total ram usage:        8 bytes
  1209 ;; Hardware stack levels used:    1
  1210 ;; Hardware stack levels required when called:    6
  1211 ;; This function calls:
  1212 ;;		___aldiv
  1213 ;;		___almod
  1214 ;;		_casos
  1215 ;;		_char2LCD
  1216 ;;		_clear_LCD
  1217 ;;		_msg2LCD
  1218 ;;		_pesoalto
  1219 ;;		_pesobajo
  1220 ;;		_pesomedio
  1221 ;;		_readADC
  1222 ;;		_set_CURSOR
  1223 ;;		_tecla
  1224 ;; This function is called by:
  1225 ;;		_main
  1226 ;; This function uses a non-reentrant model
  1227 ;;
  1228                           
  1229                           	psect	text2
  1230  0021FC                     __ptext2:
  1231                           	opt callstack 0
  1232  0021FC                     _principal:
  1233                           	opt callstack 24
  1234                           
  1235                           ;main.c: 266: switch (multi) {
  1236                           
  1237                           ;incstack = 0
  1238  0021FC  D17F               	goto	l4097
  1239  0021FE                     l3981:
  1240                           
  1241                           ;main.c: 268: {;main.c: 269: if (tecla() == 2) {
  1242  0021FE  ECC7  F015         	call	_tecla	;wreg free
  1243  002202  0A02               	xorlw	2
  1244  002204  A4D8               	btfss	status,2,c
  1245  002206  D013               	goto	l3991
  1246                           
  1247                           ;main.c: 270: flag_inicio = 1;
  1248  002208  0E01               	movlw	1
  1249  00220A  0100               	movlb	0	; () banked
  1250  00220C  6FB8               	movwf	_flag_inicio& (0+255),b
  1251  00220E  0E00               	movlw	0
  1252  002210  6FB9               	movwf	(_flag_inicio+1)& (0+255),b
  1253  002212  0E00               	movlw	0
  1254  002214  6FBA               	movwf	(_flag_inicio+2)& (0+255),b
  1255  002216  0E00               	movlw	0
  1256  002218  6FBB               	movwf	(_flag_inicio+3)& (0+255),b
  1257                           
  1258                           ; BSR set to: 0
  1259                           ;main.c: 271: LATAbits.LA5 = 1;
  1260  00221A  8A89               	bsf	3977,5,c	;volatile
  1261                           
  1262                           ; BSR set to: 0
  1263                           ;main.c: 272: set_CURSOR(0x01);
  1264  00221C  0E01               	movlw	1
  1265  00221E  EC3C  F019         	call	_set_CURSOR
  1266                           
  1267                           ;main.c: 273: msg2LCD("##CALENTANDO##");
  1268  002222  0E57               	movlw	low STR_1
  1269  002224  6E03               	movwf	msg2LCD@datos,c
  1270  002226  0E21               	movlw	high STR_1
  1271  002228  6E04               	movwf	msg2LCD@datos+1,c
  1272  00222A  ECA3  F018         	call	_msg2LCD	;wreg free
  1273  00222E                     l3991:
  1274                           
  1275                           ;main.c: 274: };main.c: 275: if (tecla() == 1) {
  1276  00222E  ECC7  F015         	call	_tecla	;wreg free
  1277  002232  06E8               	decf	wreg,f,c
  1278  002234  A4D8               	btfss	status,2,c
  1279  002236  D011               	goto	l3999
  1280                           
  1281                           ;main.c: 276: if (cont_inicio == 0) {
  1282  002238  0100               	movlb	0	; () banked
  1283  00223A  51F9               	movf	_cont_inicio& (0+255),w,b
  1284  00223C  11FA               	iorwf	(_cont_inicio+1)& (0+255),w,b
  1285  00223E  11FB               	iorwf	(_cont_inicio+2)& (0+255),w,b
  1286  002240  11FC               	iorwf	(_cont_inicio+3)& (0+255),w,b
  1287  002242  A4D8               	btfss	status,2,c
  1288  002244  D00A               	goto	l3999
  1289                           
  1290                           ; BSR set to: 0
  1291                           ;main.c: 277: flag_etapa2 = 1;
  1292  002246  0E01               	movlw	1
  1293  002248  6FB4               	movwf	_flag_etapa2& (0+255),b
  1294  00224A  0E00               	movlw	0
  1295  00224C  6FB5               	movwf	(_flag_etapa2+1)& (0+255),b
  1296  00224E  0E00               	movlw	0
  1297  002250  6FB6               	movwf	(_flag_etapa2+2)& (0+255),b
  1298  002252  0E00               	movlw	0
  1299  002254  6FB7               	movwf	(_flag_etapa2+3)& (0+255),b
  1300                           
  1301                           ; BSR set to: 0
  1302                           ;main.c: 278: clear_LCD();
  1303  002256  EC77  F019         	call	_clear_LCD	;wreg free
  1304  00225A                     l3999:
  1305                           
  1306                           ;main.c: 279: };main.c: 280: };main.c: 282: if (cont_inicio == 0 && flag_etapa2 == 0) {
  1307  00225A  0100               	movlb	0	; () banked
  1308  00225C  51F9               	movf	_cont_inicio& (0+255),w,b
  1309  00225E  11FA               	iorwf	(_cont_inicio+1)& (0+255),w,b
  1310  002260  11FB               	iorwf	(_cont_inicio+2)& (0+255),w,b
  1311  002262  11FC               	iorwf	(_cont_inicio+3)& (0+255),w,b
  1312  002264  A4D8               	btfss	status,2,c
  1313  002266  D018               	goto	l4011
  1314                           
  1315                           ; BSR set to: 0
  1316  002268  51B4               	movf	_flag_etapa2& (0+255),w,b
  1317  00226A  11B5               	iorwf	(_flag_etapa2+1)& (0+255),w,b
  1318  00226C  11B6               	iorwf	(_flag_etapa2+2)& (0+255),w,b
  1319  00226E  11B7               	iorwf	(_flag_etapa2+3)& (0+255),w,b
  1320  002270  A4D8               	btfss	status,2,c
  1321  002272  D012               	goto	l4011
  1322                           
  1323                           ; BSR set to: 0
  1324                           ;main.c: 283: LATAbits.LA5 = 0;
  1325  002274  9A89               	bcf	3977,5,c	;volatile
  1326                           
  1327                           ; BSR set to: 0
  1328                           ;main.c: 284: flag_inicio = 0;
  1329  002276  0E00               	movlw	0
  1330  002278  6FB8               	movwf	_flag_inicio& (0+255),b
  1331  00227A  0E00               	movlw	0
  1332  00227C  6FB9               	movwf	(_flag_inicio+1)& (0+255),b
  1333  00227E  0E00               	movlw	0
  1334  002280  6FBA               	movwf	(_flag_inicio+2)& (0+255),b
  1335  002282  0E00               	movlw	0
  1336  002284  6FBB               	movwf	(_flag_inicio+3)& (0+255),b
  1337                           
  1338                           ; BSR set to: 0
  1339                           ;main.c: 285: set_CURSOR(0x01);
  1340  002286  0E01               	movlw	1
  1341  002288  EC3C  F019         	call	_set_CURSOR
  1342                           
  1343                           ;main.c: 286: msg2LCD("##FINALIZADO##");
  1344  00228C  0E48               	movlw	low STR_2
  1345  00228E  6E03               	movwf	msg2LCD@datos,c
  1346  002290  0E21               	movlw	high STR_2
  1347  002292  6E04               	movwf	msg2LCD@datos+1,c
  1348  002294  ECA3  F018         	call	_msg2LCD	;wreg free
  1349  002298                     l4011:
  1350                           
  1351                           ;main.c: 287: };main.c: 289: if (flag_etapa2 == 1) {
  1352  002298  0100               	movlb	0	; () banked
  1353  00229A  05B4               	decf	_flag_etapa2& (0+255),w,b
  1354  00229C  11B5               	iorwf	(_flag_etapa2+1)& (0+255),w,b
  1355  00229E  11B6               	iorwf	(_flag_etapa2+2)& (0+255),w,b
  1356  0022A0  11B7               	iorwf	(_flag_etapa2+3)& (0+255),w,b
  1357  0022A2  A4D8               	btfss	status,2,c
  1358  0022A4  D05C               	goto	l4031
  1359                           
  1360                           ; BSR set to: 0
  1361                           ;main.c: 290: set_CURSOR(0x00);
  1362  0022A6  0E00               	movlw	0
  1363  0022A8  EC3C  F019         	call	_set_CURSOR
  1364                           
  1365                           ;main.c: 291: msg2LCD("Peso sensado:");
  1366  0022AC  0E75               	movlw	low STR_3
  1367  0022AE  6E03               	movwf	msg2LCD@datos,c
  1368  0022B0  0E21               	movlw	high STR_3
  1369  0022B2  6E04               	movwf	msg2LCD@datos+1,c
  1370  0022B4  ECA3  F018         	call	_msg2LCD	;wreg free
  1371                           
  1372                           ;main.c: 292: dec = readADC() / 10;
  1373  0022B8  EC2C  F018         	call	_readADC	;wreg free
  1374  0022BC  C01B  F02D         	movff	?_readADC,_principal$2717
  1375  0022C0  C01C  F02E         	movff	?_readADC+1,_principal$2717+1
  1376  0022C4  C01D  F02F         	movff	?_readADC+2,_principal$2717+2
  1377  0022C8  C01E  F030         	movff	?_readADC+3,_principal$2717+3
  1378                           
  1379                           ;main.c: 292: dec = readADC() / 10;
  1380  0022CC  C02D  F00D         	movff	_principal$2717,___aldiv@dividend
  1381  0022D0  C02E  F00E         	movff	_principal$2717+1,___aldiv@dividend+1
  1382  0022D4  C02F  F00F         	movff	_principal$2717+2,___aldiv@dividend+2
  1383  0022D8  C030  F010         	movff	_principal$2717+3,___aldiv@dividend+3
  1384  0022DC  0E0A               	movlw	10
  1385  0022DE  6E11               	movwf	___aldiv@divisor,c
  1386  0022E0  0E00               	movlw	0
  1387  0022E2  6E12               	movwf	___aldiv@divisor+1,c
  1388  0022E4  0E00               	movlw	0
  1389  0022E6  6E13               	movwf	___aldiv@divisor+2,c
  1390  0022E8  0E00               	movlw	0
  1391  0022EA  6E14               	movwf	___aldiv@divisor+3,c
  1392  0022EC  EC67  F016         	call	___aldiv	;wreg free
  1393  0022F0  C00D  F0AC         	movff	?___aldiv,_dec
  1394  0022F4  C00E  F0AD         	movff	?___aldiv+1,_dec+1
  1395  0022F8  C00F  F0AE         	movff	?___aldiv+2,_dec+2
  1396  0022FC  C010  F0AF         	movff	?___aldiv+3,_dec+3
  1397                           
  1398                           ;main.c: 293: uni = readADC() % 10;
  1399  002300  EC2C  F018         	call	_readADC	;wreg free
  1400  002304  C01B  F01F         	movff	?_readADC,___almod@dividend
  1401  002308  C01C  F020         	movff	?_readADC+1,___almod@dividend+1
  1402  00230C  C01D  F021         	movff	?_readADC+2,___almod@dividend+2
  1403  002310  C01E  F022         	movff	?_readADC+3,___almod@dividend+3
  1404  002314  0E0A               	movlw	10
  1405  002316  6E23               	movwf	___almod@divisor,c
  1406  002318  0E00               	movlw	0
  1407  00231A  6E24               	movwf	___almod@divisor+1,c
  1408  00231C  0E00               	movlw	0
  1409  00231E  6E25               	movwf	___almod@divisor+2,c
  1410  002320  0E00               	movlw	0
  1411  002322  6E26               	movwf	___almod@divisor+3,c
  1412  002324  ECD6  F017         	call	___almod	;wreg free
  1413  002328  C01F  F0A8         	movff	?___almod,_uni
  1414  00232C  C020  F0A9         	movff	?___almod+1,_uni+1
  1415  002330  C021  F0AA         	movff	?___almod+2,_uni+2
  1416  002334  C022  F0AB         	movff	?___almod+3,_uni+3
  1417                           
  1418                           ;main.c: 294: set_CURSOR(0x40);
  1419  002338  0E40               	movlw	64
  1420  00233A  EC3C  F019         	call	_set_CURSOR
  1421                           
  1422                           ;main.c: 295: char2LCD(dec + 48);
  1423  00233E  0100               	movlb	0	; () banked
  1424  002340  51AC               	movf	_dec& (0+255),w,b
  1425  002342  0F30               	addlw	48
  1426  002344  EC5A  F019         	call	_char2LCD
  1427                           
  1428                           ;main.c: 296: char2LCD(uni + 48);
  1429  002348  0100               	movlb	0	; () banked
  1430  00234A  51A8               	movf	_uni& (0+255),w,b
  1431  00234C  0F30               	addlw	48
  1432  00234E  EC5A  F019         	call	_char2LCD
  1433                           
  1434                           ;main.c: 297: msg2LCD("Kg");
  1435  002352  0EF8               	movlw	low STR_4
  1436  002354  6E03               	movwf	msg2LCD@datos,c
  1437  002356  0E21               	movlw	high STR_4
  1438  002358  6E04               	movwf	msg2LCD@datos+1,c
  1439  00235A  ECA3  F018         	call	_msg2LCD	;wreg free
  1440  00235E                     l4031:
  1441                           
  1442                           ;main.c: 298: };main.c: 313: if(kilos>=5 && kilos<10){
  1443  00235E  BE34               	btfsc	_kilos+3,7,c
  1444  002360  D01B               	goto	l4037
  1445  002362  5034               	movf	_kilos+3,w,c
  1446  002364  1033               	iorwf	_kilos+2,w,c
  1447  002366  1032               	iorwf	_kilos+1,w,c
  1448  002368  E104               	bnz	u3420
  1449  00236A  0E05               	movlw	5
  1450  00236C  5C31               	subwf	_kilos,w,c
  1451  00236E  A0D8               	btfss	status,0,c
  1452  002370  D013               	goto	l4037
  1453  002372                     u3420:
  1454  002372  BE34               	btfsc	_kilos+3,7,c
  1455  002374  D008               	goto	u3430
  1456  002376  5034               	movf	_kilos+3,w,c
  1457  002378  1033               	iorwf	_kilos+2,w,c
  1458  00237A  1032               	iorwf	_kilos+1,w,c
  1459  00237C  E10D               	bnz	l4037
  1460  00237E  0E0A               	movlw	10
  1461  002380  5C31               	subwf	_kilos,w,c
  1462  002382  B0D8               	btfsc	status,0,c
  1463  002384  D009               	goto	l4037
  1464  002386                     u3430:
  1465                           
  1466                           ;main.c: 314: multi=1;
  1467  002386  0E01               	movlw	1
  1468  002388  0100               	movlb	0	; () banked
  1469  00238A  6FA4               	movwf	_multi& (0+255),b
  1470  00238C  0E00               	movlw	0
  1471  00238E  6FA5               	movwf	(_multi+1)& (0+255),b
  1472  002390  0E00               	movlw	0
  1473  002392  6FA6               	movwf	(_multi+2)& (0+255),b
  1474  002394  0E00               	movlw	0
  1475  002396  6FA7               	movwf	(_multi+3)& (0+255),b
  1476  002398                     l4037:
  1477                           
  1478                           ;main.c: 315: };main.c: 316: if(kilos>=10 && kilos<15){
  1479  002398  BE34               	btfsc	_kilos+3,7,c
  1480  00239A  D01B               	goto	l4043
  1481  00239C  5034               	movf	_kilos+3,w,c
  1482  00239E  1033               	iorwf	_kilos+2,w,c
  1483  0023A0  1032               	iorwf	_kilos+1,w,c
  1484  0023A2  E104               	bnz	u3440
  1485  0023A4  0E0A               	movlw	10
  1486  0023A6  5C31               	subwf	_kilos,w,c
  1487  0023A8  A0D8               	btfss	status,0,c
  1488  0023AA  D013               	goto	l4043
  1489  0023AC                     u3440:
  1490  0023AC  BE34               	btfsc	_kilos+3,7,c
  1491  0023AE  D008               	goto	u3450
  1492  0023B0  5034               	movf	_kilos+3,w,c
  1493  0023B2  1033               	iorwf	_kilos+2,w,c
  1494  0023B4  1032               	iorwf	_kilos+1,w,c
  1495  0023B6  E10D               	bnz	l4043
  1496  0023B8  0E0F               	movlw	15
  1497  0023BA  5C31               	subwf	_kilos,w,c
  1498  0023BC  B0D8               	btfsc	status,0,c
  1499  0023BE  D009               	goto	l4043
  1500  0023C0                     u3450:
  1501                           
  1502                           ;main.c: 317: multi=1;
  1503  0023C0  0E01               	movlw	1
  1504  0023C2  0100               	movlb	0	; () banked
  1505  0023C4  6FA4               	movwf	_multi& (0+255),b
  1506  0023C6  0E00               	movlw	0
  1507  0023C8  6FA5               	movwf	(_multi+1)& (0+255),b
  1508  0023CA  0E00               	movlw	0
  1509  0023CC  6FA6               	movwf	(_multi+2)& (0+255),b
  1510  0023CE  0E00               	movlw	0
  1511  0023D0  6FA7               	movwf	(_multi+3)& (0+255),b
  1512  0023D2                     l4043:
  1513                           
  1514                           ;main.c: 318: };main.c: 319: if(kilos>=15 && kilos<20){
  1515  0023D2  BE34               	btfsc	_kilos+3,7,c
  1516  0023D4  0012               	return	
  1517  0023D6  5034               	movf	_kilos+3,w,c
  1518  0023D8  1033               	iorwf	_kilos+2,w,c
  1519  0023DA  1032               	iorwf	_kilos+1,w,c
  1520  0023DC  E104               	bnz	u3460
  1521  0023DE  0E0F               	movlw	15
  1522  0023E0  5C31               	subwf	_kilos,w,c
  1523  0023E2  A0D8               	btfss	status,0,c
  1524  0023E4  0012               	return	
  1525  0023E6                     u3460:
  1526  0023E6  BE34               	btfsc	_kilos+3,7,c
  1527  0023E8  D008               	goto	u3470
  1528  0023EA  5034               	movf	_kilos+3,w,c
  1529  0023EC  1033               	iorwf	_kilos+2,w,c
  1530  0023EE  1032               	iorwf	_kilos+1,w,c
  1531  0023F0  E103               	bnz	u3471
  1532  0023F2  0E14               	movlw	20
  1533  0023F4  5C31               	subwf	_kilos,w,c
  1534  0023F6  B0D8               	btfsc	status,0,c
  1535  0023F8                     u3471:
  1536  0023F8  0012               	return	
  1537  0023FA                     u3470:
  1538                           
  1539                           ;main.c: 320: multi=1;
  1540  0023FA  0E01               	movlw	1
  1541  0023FC  0100               	movlb	0	; () banked
  1542  0023FE  6FA4               	movwf	_multi& (0+255),b
  1543  002400  0E00               	movlw	0
  1544  002402  6FA5               	movwf	(_multi+1)& (0+255),b
  1545  002404  0E00               	movlw	0
  1546  002406  6FA6               	movwf	(_multi+2)& (0+255),b
  1547  002408  0E00               	movlw	0
  1548  00240A  6FA7               	movwf	(_multi+3)& (0+255),b
  1549  00240C  0012               	return	
  1550  00240E                     l4049:
  1551                           
  1552                           ;main.c: 327: {;main.c: 328: pesobajo();
  1553  00240E  EC26  F017         	call	_pesobajo	;wreg free
  1554                           
  1555                           ;main.c: 329: pesomedio();
  1556  002412  ECCD  F016         	call	_pesomedio	;wreg free
  1557                           
  1558                           ;main.c: 330: pesoalto();
  1559  002416  EC7F  F017         	call	_pesoalto	;wreg free
  1560                           
  1561                           ;main.c: 332: };main.c: 333: break;
  1562  00241A  0012               	return	
  1563  00241C                     l4051:
  1564                           
  1565                           ;main.c: 336: {;main.c: 337: set_CURSOR(0x00);
  1566  00241C  0E00               	movlw	0
  1567  00241E  EC3C  F019         	call	_set_CURSOR
  1568                           
  1569                           ;main.c: 338: msg2LCD(" AGUA Y JABON  ");
  1570  002422  0E29               	movlw	low STR_5
  1571  002424  6E03               	movwf	msg2LCD@datos,c
  1572  002426  0E21               	movlw	high STR_5
  1573  002428  6E04               	movwf	msg2LCD@datos+1,c
  1574  00242A  ECA3  F018         	call	_msg2LCD	;wreg free
  1575                           
  1576                           ;main.c: 339: set_CURSOR(0x40);
  1577  00242E  0E40               	movlw	64
  1578  002430  EC3C  F019         	call	_set_CURSOR
  1579                           
  1580                           ;main.c: 340: msg2LCD(" CARGADOS");
  1581  002434  0ECC               	movlw	low STR_6
  1582  002436  6E03               	movwf	msg2LCD@datos,c
  1583  002438  0E21               	movlw	high STR_6
  1584  00243A  6E04               	movwf	msg2LCD@datos+1,c
  1585  00243C  ECA3  F018         	call	_msg2LCD	;wreg free
  1586                           
  1587                           ;main.c: 341: multi=3;
  1588  002440  0E03               	movlw	3
  1589  002442  0100               	movlb	0	; () banked
  1590  002444  6FA4               	movwf	_multi& (0+255),b
  1591  002446  0E00               	movlw	0
  1592  002448  6FA5               	movwf	(_multi+1)& (0+255),b
  1593  00244A  0E00               	movlw	0
  1594  00244C  6FA6               	movwf	(_multi+2)& (0+255),b
  1595  00244E  0E00               	movlw	0
  1596  002450  6FA7               	movwf	(_multi+3)& (0+255),b
  1597                           
  1598                           ;main.c: 343: };main.c: 345: break;
  1599  002452  0012               	return	
  1600  002454                     l4059:
  1601                           
  1602                           ;main.c: 348: {;main.c: 349: casos();
  1603  002454  EC05  F014         	call	_casos	;wreg free
  1604                           
  1605                           ;main.c: 351: };main.c: 352: break;
  1606  002458  0012               	return	
  1607  00245A                     l4061:
  1608                           
  1609                           ;main.c: 355: {;main.c: 356: flagdes=1;
  1610  00245A  0E01               	movlw	1
  1611  00245C  0100               	movlb	0	; () banked
  1612  00245E  6F80               	movwf	_flagdes& (0+255),b
  1613  002460  0E00               	movlw	0
  1614  002462  6F81               	movwf	(_flagdes+1)& (0+255),b
  1615  002464  0E00               	movlw	0
  1616  002466  6F82               	movwf	(_flagdes+2)& (0+255),b
  1617  002468  0E00               	movlw	0
  1618  00246A  6F83               	movwf	(_flagdes+3)& (0+255),b
  1619                           
  1620                           ; BSR set to: 0
  1621                           ;main.c: 357: if(contdes_a!=0){
  1622  00246C  51E1               	movf	_contdes_a& (0+255),w,b
  1623  00246E  11E2               	iorwf	(_contdes_a+1)& (0+255),w,b
  1624  002470  11E3               	iorwf	(_contdes_a+2)& (0+255),w,b
  1625  002472  11E4               	iorwf	(_contdes_a+3)& (0+255),w,b
  1626  002474  B4D8               	btfsc	status,2,c
  1627  002476  D00A               	goto	l4071
  1628                           
  1629                           ; BSR set to: 0
  1630                           ;main.c: 358: LATAbits.LA2=1;
  1631  002478  8489               	bsf	3977,2,c	;volatile
  1632                           
  1633                           ; BSR set to: 0
  1634                           ;main.c: 359: set_CURSOR(0x00);
  1635  00247A  0E00               	movlw	0
  1636  00247C  EC3C  F019         	call	_set_CURSOR
  1637                           
  1638                           ;main.c: 360: msg2LCD("DESAGOTANDO...");
  1639  002480  0E66               	movlw	low STR_7
  1640  002482  6E03               	movwf	msg2LCD@datos,c
  1641  002484  0E21               	movlw	high STR_7
  1642  002486  6E04               	movwf	msg2LCD@datos+1,c
  1643  002488  ECA3  F018         	call	_msg2LCD	;wreg free
  1644  00248C                     l4071:
  1645                           
  1646                           ;main.c: 361: };main.c: 362: if(contdes_a==0){
  1647  00248C  0100               	movlb	0	; () banked
  1648  00248E  51E1               	movf	_contdes_a& (0+255),w,b
  1649  002490  11E2               	iorwf	(_contdes_a+1)& (0+255),w,b
  1650  002492  11E3               	iorwf	(_contdes_a+2)& (0+255),w,b
  1651  002494  11E4               	iorwf	(_contdes_a+3)& (0+255),w,b
  1652  002496  A4D8               	btfss	status,2,c
  1653  002498  0012               	return	
  1654                           
  1655                           ; BSR set to: 0
  1656                           ;main.c: 363: LATAbits.LA2=0;
  1657  00249A  9489               	bcf	3977,2,c	;volatile
  1658                           
  1659                           ; BSR set to: 0
  1660                           ;main.c: 364: clear_LCD();
  1661  00249C  EC77  F019         	call	_clear_LCD	;wreg free
  1662  0024A0                     l4077:
  1663                           
  1664                           ;main.c: 365: multi=6;
  1665  0024A0  0E06               	movlw	6
  1666  0024A2  0100               	movlb	0	; () banked
  1667  0024A4  6FA4               	movwf	_multi& (0+255),b
  1668  0024A6  0E00               	movlw	0
  1669  0024A8  6FA5               	movwf	(_multi+1)& (0+255),b
  1670  0024AA  0E00               	movlw	0
  1671  0024AC  6FA6               	movwf	(_multi+2)& (0+255),b
  1672  0024AE  0E00               	movlw	0
  1673  0024B0  6FA7               	movwf	(_multi+3)& (0+255),b
  1674  0024B2  0012               	return	
  1675  0024B4                     l4081:
  1676                           
  1677                           ;main.c: 399: {;main.c: 400: flag_siete=1;
  1678  0024B4  0E01               	movlw	1
  1679  0024B6  0100               	movlb	0	; () banked
  1680  0024B8  6F7C               	movwf	_flag_siete& (0+255),b
  1681  0024BA  0E00               	movlw	0
  1682  0024BC  6F7D               	movwf	(_flag_siete+1)& (0+255),b
  1683  0024BE  0E00               	movlw	0
  1684  0024C0  6F7E               	movwf	(_flag_siete+2)& (0+255),b
  1685  0024C2  0E00               	movlw	0
  1686  0024C4  6F7F               	movwf	(_flag_siete+3)& (0+255),b
  1687                           
  1688                           ; BSR set to: 0
  1689                           ;main.c: 401: if(cont_siete!=0){
  1690  0024C6  51DD               	movf	_cont_siete& (0+255),w,b
  1691  0024C8  11DE               	iorwf	(_cont_siete+1)& (0+255),w,b
  1692  0024CA  11DF               	iorwf	(_cont_siete+2)& (0+255),w,b
  1693  0024CC  11E0               	iorwf	(_cont_siete+3)& (0+255),w,b
  1694  0024CE  B4D8               	btfsc	status,2,c
  1695  0024D0  D00A               	goto	l4091
  1696                           
  1697                           ; BSR set to: 0
  1698                           ;main.c: 402: LATAbits.LA2=1;
  1699  0024D2  8489               	bsf	3977,2,c	;volatile
  1700                           
  1701                           ; BSR set to: 0
  1702                           ;main.c: 403: set_CURSOR(0x00);
  1703  0024D4  0E00               	movlw	0
  1704  0024D6  EC3C  F019         	call	_set_CURSOR
  1705                           
  1706                           ;main.c: 404: msg2LCD("DESAGOTANDO...");
  1707  0024DA  0E66               	movlw	low STR_7
  1708  0024DC  6E03               	movwf	msg2LCD@datos,c
  1709  0024DE  0E21               	movlw	high STR_7
  1710  0024E0  6E04               	movwf	msg2LCD@datos+1,c
  1711  0024E2  ECA3  F018         	call	_msg2LCD	;wreg free
  1712  0024E6                     l4091:
  1713                           
  1714                           ;main.c: 405: };main.c: 406: if(cont_siete==0){
  1715  0024E6  0100               	movlb	0	; () banked
  1716  0024E8  51DD               	movf	_cont_siete& (0+255),w,b
  1717  0024EA  11DE               	iorwf	(_cont_siete+1)& (0+255),w,b
  1718  0024EC  11DF               	iorwf	(_cont_siete+2)& (0+255),w,b
  1719  0024EE  11E0               	iorwf	(_cont_siete+3)& (0+255),w,b
  1720  0024F0  A4D8               	btfss	status,2,c
  1721  0024F2  0012               	return	
  1722                           
  1723                           ; BSR set to: 0
  1724                           ;main.c: 407: LATAbits.LA2=0;
  1725  0024F4  9489               	bcf	3977,2,c	;volatile
  1726                           
  1727                           ; BSR set to: 0
  1728                           ;main.c: 408: clear_LCD();
  1729  0024F6  EC77  F019         	call	_clear_LCD	;wreg free
  1730  0024FA  0012               	return	
  1731  0024FC                     l4097:
  1732  0024FC  C0A4  F029         	movff	_multi,??_principal
  1733  002500  C0A5  F02A         	movff	_multi+1,??_principal+1
  1734  002504  C0A6  F02B         	movff	_multi+2,??_principal+2
  1735  002508  C0A7  F02C         	movff	_multi+3,??_principal+3
  1736                           
  1737                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  1738                           ; Switch size 1, requested type "simple"
  1739                           ; Number of cases is 1, Range of values is 0 to 0
  1740                           ; switch strategies available:
  1741                           ; Name         Instructions Cycles
  1742                           ; simple_byte            4     3 (average)
  1743                           ;	Chosen strategy is simple_byte
  1744  00250C  502C               	movf	??_principal+3,w,c
  1745  00250E  0A00               	xorlw	0	; case 0
  1746  002510  A4D8               	btfss	status,2,c
  1747  002512  0012               	return	
  1748  002514  D01B               	goto	l4873
  1749  002516                     l4871:
  1750                           
  1751                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1752                           ; Switch size 1, requested type "simple"
  1753                           ; Number of cases is 1, Range of values is 0 to 0
  1754                           ; switch strategies available:
  1755                           ; Name         Instructions Cycles
  1756                           ; simple_byte            4     3 (average)
  1757                           ;	Chosen strategy is simple_byte
  1758  002516  502A               	movf	??_principal+1,w,c
  1759  002518  0A00               	xorlw	0	; case 0
  1760  00251A  A4D8               	btfss	status,2,c
  1761  00251C  0012               	return	
  1762                           
  1763                           ; Switch size 1, requested type "simple"
  1764                           ; Number of cases is 7, Range of values is 0 to 6
  1765                           ; switch strategies available:
  1766                           ; Name         Instructions Cycles
  1767                           ; simple_byte           22    12 (average)
  1768                           ;	Chosen strategy is simple_byte
  1769  00251E  5029               	movf	??_principal,w,c
  1770  002520  0A00               	xorlw	0	; case 0
  1771  002522  B4D8               	btfsc	status,2,c
  1772  002524  D66C               	goto	l3981
  1773  002526  0A01               	xorlw	1	; case 1
  1774  002528  B4D8               	btfsc	status,2,c
  1775  00252A  D771               	goto	l4049
  1776  00252C  0A03               	xorlw	3	; case 2
  1777  00252E  B4D8               	btfsc	status,2,c
  1778  002530  D775               	goto	l4051
  1779  002532  0A01               	xorlw	1	; case 3
  1780  002534  B4D8               	btfsc	status,2,c
  1781  002536  D78E               	goto	l4059
  1782  002538  0A07               	xorlw	7	; case 4
  1783  00253A  B4D8               	btfsc	status,2,c
  1784  00253C  D78E               	goto	l4061
  1785  00253E  0A01               	xorlw	1	; case 5
  1786  002540  B4D8               	btfsc	status,2,c
  1787  002542  D7AE               	goto	l4077
  1788  002544  0A03               	xorlw	3	; case 6
  1789  002546  A4D8               	btfss	status,2,c
  1790  002548  0012               	return	
  1791  00254A  D7B4               	goto	l4081
  1792  00254C                     l4873:
  1793                           
  1794                           ; Switch size 1, requested type "simple"
  1795                           ; Number of cases is 1, Range of values is 0 to 0
  1796                           ; switch strategies available:
  1797                           ; Name         Instructions Cycles
  1798                           ; simple_byte            4     3 (average)
  1799                           ;	Chosen strategy is simple_byte
  1800  00254C  502B               	movf	??_principal+2,w,c
  1801  00254E  0A00               	xorlw	0	; case 0
  1802  002550  A4D8               	btfss	status,2,c
  1803  002552  0012               	return	
  1804  002554  D7E0               	goto	l4871
  1805  002556                     __end_of_principal:
  1806                           	opt callstack 0
  1807                           
  1808 ;; *************** function _readADC *****************
  1809 ;; Defined at:
  1810 ;;		line 120 in file "main.c"
  1811 ;; Parameters:    Size  Location     Type
  1812 ;;		None
  1813 ;; Auto vars:     Size  Location     Type
  1814 ;;		None
  1815 ;; Return value:  Size  Location     Type
  1816 ;;                  4   26[COMRAM] long 
  1817 ;; Registers used:
  1818 ;;		wreg, status,2, status,0, cstack
  1819 ;; Tracked objects:
  1820 ;;		On entry : 0/0
  1821 ;;		On exit  : 0/0
  1822 ;;		Unchanged: 0/0
  1823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1824 ;;      Params:         4       0       0       0       0       0       0       0       0
  1825 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1826 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1827 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1828 ;;Total ram usage:        4 bytes
  1829 ;; Hardware stack levels used:    1
  1830 ;; Hardware stack levels required when called:    3
  1831 ;; This function calls:
  1832 ;;		___aldiv
  1833 ;;		___lmul
  1834 ;;		_obtener_ADC10
  1835 ;; This function is called by:
  1836 ;;		_principal
  1837 ;; This function uses a non-reentrant model
  1838 ;;
  1839                           
  1840                           	psect	text3
  1841  003058                     __ptext3:
  1842                           	opt callstack 0
  1843  003058                     _readADC:
  1844                           	opt callstack 26
  1845                           
  1846                           ;main.c: 121: guarda_ADC = obtener_ADC10();
  1847                           
  1848                           ;incstack = 0
  1849  003058  ECFA  F018         	call	_obtener_ADC10	;wreg free
  1850  00305C  C001  F0B0         	movff	?_obtener_ADC10,_guarda_ADC
  1851  003060  C002  F0B1         	movff	?_obtener_ADC10+1,_guarda_ADC+1
  1852  003064  0100               	movlb	0	; () banked
  1853  003066  6BB2               	clrf	(_guarda_ADC+2)& (0+255),b
  1854  003068  6BB3               	clrf	(_guarda_ADC+3)& (0+255),b
  1855                           
  1856                           ;main.c: 122: kilos = (guarda_ADC * 50) / 1023;
  1857  00306A  C0B0  F001         	movff	_guarda_ADC,___lmul@multiplier
  1858  00306E  C0B1  F002         	movff	_guarda_ADC+1,___lmul@multiplier+1
  1859  003072  C0B2  F003         	movff	_guarda_ADC+2,___lmul@multiplier+2
  1860  003076  C0B3  F004         	movff	_guarda_ADC+3,___lmul@multiplier+3
  1861  00307A  0E32               	movlw	50
  1862  00307C  6E05               	movwf	___lmul@multiplicand,c
  1863  00307E  0E00               	movlw	0
  1864  003080  6E06               	movwf	___lmul@multiplicand+1,c
  1865  003082  0E00               	movlw	0
  1866  003084  6E07               	movwf	___lmul@multiplicand+2,c
  1867  003086  0E00               	movlw	0
  1868  003088  6E08               	movwf	___lmul@multiplicand+3,c
  1869  00308A  ECCF  F018         	call	___lmul	;wreg free
  1870  00308E  C001  F00D         	movff	?___lmul,___aldiv@dividend
  1871  003092  C002  F00E         	movff	?___lmul+1,___aldiv@dividend+1
  1872  003096  C003  F00F         	movff	?___lmul+2,___aldiv@dividend+2
  1873  00309A  C004  F010         	movff	?___lmul+3,___aldiv@dividend+3
  1874  00309E  0EFF               	movlw	255
  1875  0030A0  6E11               	movwf	___aldiv@divisor,c
  1876  0030A2  0E03               	movlw	3
  1877  0030A4  6E12               	movwf	___aldiv@divisor+1,c
  1878  0030A6  0E00               	movlw	0
  1879  0030A8  6E13               	movwf	___aldiv@divisor+2,c
  1880  0030AA  0E00               	movlw	0
  1881  0030AC  6E14               	movwf	___aldiv@divisor+3,c
  1882  0030AE  EC67  F016         	call	___aldiv	;wreg free
  1883  0030B2  C00D  F031         	movff	?___aldiv,_kilos
  1884  0030B6  C00E  F032         	movff	?___aldiv+1,_kilos+1
  1885  0030BA  C00F  F033         	movff	?___aldiv+2,_kilos+2
  1886  0030BE  C010  F034         	movff	?___aldiv+3,_kilos+3
  1887                           
  1888                           ;main.c: 124: return kilos;
  1889  0030C2  C031  F01B         	movff	_kilos,?_readADC
  1890  0030C6  C032  F01C         	movff	_kilos+1,?_readADC+1
  1891  0030CA  C033  F01D         	movff	_kilos+2,?_readADC+2
  1892  0030CE  C034  F01E         	movff	_kilos+3,?_readADC+3
  1893  0030D2  0012               	return		;funcret
  1894  0030D4                     __end_of_readADC:
  1895                           	opt callstack 0
  1896                           
  1897 ;; *************** function _obtener_ADC10 *****************
  1898 ;; Defined at:
  1899 ;;		line 154 in file "Tecnica1.c"
  1900 ;; Parameters:    Size  Location     Type
  1901 ;;		None
  1902 ;; Auto vars:     Size  Location     Type
  1903 ;;  ad_res          2    4[COMRAM] unsigned int 
  1904 ;;  GuardoTrisa     1    3[COMRAM] unsigned char 
  1905 ;;  GuardoPorta     1    2[COMRAM] unsigned char 
  1906 ;; Return value:  Size  Location     Type
  1907 ;;                  2    0[COMRAM] unsigned int 
  1908 ;; Registers used:
  1909 ;;		wreg, status,2, status,0
  1910 ;; Tracked objects:
  1911 ;;		On entry : 0/0
  1912 ;;		On exit  : 0/0
  1913 ;;		Unchanged: 0/0
  1914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1915 ;;      Params:         2       0       0       0       0       0       0       0       0
  1916 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1917 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1918 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1919 ;;Total ram usage:        6 bytes
  1920 ;; Hardware stack levels used:    1
  1921 ;; Hardware stack levels required when called:    2
  1922 ;; This function calls:
  1923 ;;		Nothing
  1924 ;; This function is called by:
  1925 ;;		_readADC
  1926 ;; This function uses a non-reentrant model
  1927 ;;
  1928                           
  1929                           	psect	text4
  1930  0031F4                     __ptext4:
  1931                           	opt callstack 0
  1932  0031F4                     _obtener_ADC10:
  1933                           	opt callstack 26
  1934                           
  1935                           ;Tecnica1.c: 155: unsigned char GuardoPorta, GuardoTrisa;;Tecnica1.c: 156: unsigned int 
      +                          ad_res;;Tecnica1.c: 157: GuardoPorta = PORTA;
  1936                           
  1937                           ;incstack = 0
  1938  0031F4  CF80 F003          	movff	3968,obtener_ADC10@GuardoPorta	;volatile
  1939                           
  1940                           ;Tecnica1.c: 158: GuardoTrisa = TRISA;
  1941  0031F8  CF92 F004          	movff	3986,obtener_ADC10@GuardoTrisa	;volatile
  1942                           
  1943                           ;Tecnica1.c: 160: TRISAbits.RA0 = 1;
  1944  0031FC  8092               	bsf	3986,0,c	;volatile
  1945                           
  1946                           ;Tecnica1.c: 161: ADCON1 = 0x0E;
  1947  0031FE  0E0E               	movlw	14
  1948  003200  6EC1               	movwf	4033,c	;volatile
  1949                           
  1950                           ;Tecnica1.c: 163: ADCON2 = 0xAD;
  1951  003202  0EAD               	movlw	173
  1952  003204  6EC0               	movwf	4032,c	;volatile
  1953                           
  1954                           ;Tecnica1.c: 164: ADCON0bits.ADON = 1;
  1955  003206  80C2               	bsf	4034,0,c	;volatile
  1956                           
  1957                           ;Tecnica1.c: 165: ADCON0bits.GO = 1;
  1958  003208  82C2               	bsf	4034,1,c	;volatile
  1959  00320A                     l694:
  1960  00320A  B2C2               	btfsc	4034,1,c	;volatile
  1961  00320C  D7FE               	goto	l694
  1962                           
  1963                           ;Tecnica1.c: 169: ADCON0bits.ADON = 0;
  1964  00320E  90C2               	bcf	4034,0,c	;volatile
  1965                           
  1966                           ;Tecnica1.c: 170: ADCON1 = 0x0F;
  1967  003210  0E0F               	movlw	15
  1968  003212  6EC1               	movwf	4033,c	;volatile
  1969                           
  1970                           ;Tecnica1.c: 171: LATA = GuardoPorta;
  1971  003214  C003  FF89         	movff	obtener_ADC10@GuardoPorta,3977	;volatile
  1972                           
  1973                           ;Tecnica1.c: 172: TRISA = GuardoTrisa;
  1974  003218  C004  FF92         	movff	obtener_ADC10@GuardoTrisa,3986	;volatile
  1975                           
  1976                           ;Tecnica1.c: 177: ad_res = ADRESH;
  1977  00321C  CFC4 F005          	movff	4036,obtener_ADC10@ad_res	;volatile
  1978  003220  6A06               	clrf	obtener_ADC10@ad_res+1,c
  1979                           
  1980                           ;Tecnica1.c: 178: ad_res <<= 8;
  1981  003222  5005               	movf	obtener_ADC10@ad_res,w,c
  1982  003224  6E06               	movwf	obtener_ADC10@ad_res+1,c
  1983  003226  6A05               	clrf	obtener_ADC10@ad_res,c
  1984                           
  1985                           ;Tecnica1.c: 179: ad_res += ADRESL;
  1986  003228  50C3               	movf	4035,w,c	;volatile
  1987  00322A  2605               	addwf	obtener_ADC10@ad_res,f,c
  1988  00322C  0E00               	movlw	0
  1989  00322E  2206               	addwfc	obtener_ADC10@ad_res+1,f,c
  1990                           
  1991                           ;Tecnica1.c: 180: return ad_res;
  1992  003230  C005  F001         	movff	obtener_ADC10@ad_res,?_obtener_ADC10
  1993  003234  C006  F002         	movff	obtener_ADC10@ad_res+1,?_obtener_ADC10+1
  1994  003238  0012               	return		;funcret
  1995  00323A                     __end_of_obtener_ADC10:
  1996                           	opt callstack 0
  1997                           
  1998 ;; *************** function ___lmul *****************
  1999 ;; Defined at:
  2000 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\Umul32.c"
  2001 ;; Parameters:    Size  Location     Type
  2002 ;;  multiplier      4    0[COMRAM] unsigned long 
  2003 ;;  multiplicand    4    4[COMRAM] unsigned long 
  2004 ;; Auto vars:     Size  Location     Type
  2005 ;;  product         4    8[COMRAM] unsigned long 
  2006 ;; Return value:  Size  Location     Type
  2007 ;;                  4    0[COMRAM] unsigned long 
  2008 ;; Registers used:
  2009 ;;		wreg, status,2, status,0
  2010 ;; Tracked objects:
  2011 ;;		On entry : 0/0
  2012 ;;		On exit  : 0/0
  2013 ;;		Unchanged: 0/0
  2014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2015 ;;      Params:         8       0       0       0       0       0       0       0       0
  2016 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2017 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2018 ;;      Totals:        12       0       0       0       0       0       0       0       0
  2019 ;;Total ram usage:       12 bytes
  2020 ;; Hardware stack levels used:    1
  2021 ;; Hardware stack levels required when called:    2
  2022 ;; This function calls:
  2023 ;;		Nothing
  2024 ;; This function is called by:
  2025 ;;		_readADC
  2026 ;; This function uses a non-reentrant model
  2027 ;;
  2028                           
  2029                           	psect	text5
  2030  00319E                     __ptext5:
  2031                           	opt callstack 0
  2032  00319E                     ___lmul:
  2033                           	opt callstack 26
  2034                           
  2035                           ;incstack = 0
  2036  00319E  0E00               	movlw	0
  2037  0031A0  6E09               	movwf	___lmul@product,c
  2038  0031A2  0E00               	movlw	0
  2039  0031A4  6E0A               	movwf	___lmul@product+1,c
  2040  0031A6  0E00               	movlw	0
  2041  0031A8  6E0B               	movwf	___lmul@product+2,c
  2042  0031AA  0E00               	movlw	0
  2043  0031AC  6E0C               	movwf	___lmul@product+3,c
  2044  0031AE                     l3541:
  2045  0031AE  A001               	btfss	___lmul@multiplier,0,c
  2046  0031B0  D008               	goto	l3545
  2047  0031B2  5005               	movf	___lmul@multiplicand,w,c
  2048  0031B4  2609               	addwf	___lmul@product,f,c
  2049  0031B6  5006               	movf	___lmul@multiplicand+1,w,c
  2050  0031B8  220A               	addwfc	___lmul@product+1,f,c
  2051  0031BA  5007               	movf	___lmul@multiplicand+2,w,c
  2052  0031BC  220B               	addwfc	___lmul@product+2,f,c
  2053  0031BE  5008               	movf	___lmul@multiplicand+3,w,c
  2054  0031C0  220C               	addwfc	___lmul@product+3,f,c
  2055  0031C2                     l3545:
  2056  0031C2  90D8               	bcf	status,0,c
  2057  0031C4  3605               	rlcf	___lmul@multiplicand,f,c
  2058  0031C6  3606               	rlcf	___lmul@multiplicand+1,f,c
  2059  0031C8  3607               	rlcf	___lmul@multiplicand+2,f,c
  2060  0031CA  3608               	rlcf	___lmul@multiplicand+3,f,c
  2061  0031CC  90D8               	bcf	status,0,c
  2062  0031CE  3204               	rrcf	___lmul@multiplier+3,f,c
  2063  0031D0  3203               	rrcf	___lmul@multiplier+2,f,c
  2064  0031D2  3202               	rrcf	___lmul@multiplier+1,f,c
  2065  0031D4  3201               	rrcf	___lmul@multiplier,f,c
  2066  0031D6  5001               	movf	___lmul@multiplier,w,c
  2067  0031D8  1002               	iorwf	___lmul@multiplier+1,w,c
  2068  0031DA  1003               	iorwf	___lmul@multiplier+2,w,c
  2069  0031DC  1004               	iorwf	___lmul@multiplier+3,w,c
  2070  0031DE  A4D8               	btfss	status,2,c
  2071  0031E0  D7E6               	goto	l3541
  2072  0031E2  C009  F001         	movff	___lmul@product,?___lmul
  2073  0031E6  C00A  F002         	movff	___lmul@product+1,?___lmul+1
  2074  0031EA  C00B  F003         	movff	___lmul@product+2,?___lmul+2
  2075  0031EE  C00C  F004         	movff	___lmul@product+3,?___lmul+3
  2076  0031F2  0012               	return		;funcret
  2077  0031F4                     __end_of___lmul:
  2078                           	opt callstack 0
  2079                           
  2080 ;; *************** function ___aldiv *****************
  2081 ;; Defined at:
  2082 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\aldiv.c"
  2083 ;; Parameters:    Size  Location     Type
  2084 ;;  dividend        4   12[COMRAM] long 
  2085 ;;  divisor         4   16[COMRAM] long 
  2086 ;; Auto vars:     Size  Location     Type
  2087 ;;  quotient        4   22[COMRAM] long 
  2088 ;;  sign            1   21[COMRAM] unsigned char 
  2089 ;;  counter         1   20[COMRAM] unsigned char 
  2090 ;; Return value:  Size  Location     Type
  2091 ;;                  4   12[COMRAM] long 
  2092 ;; Registers used:
  2093 ;;		wreg, status,2, status,0
  2094 ;; Tracked objects:
  2095 ;;		On entry : 0/0
  2096 ;;		On exit  : 0/0
  2097 ;;		Unchanged: 0/0
  2098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2099 ;;      Params:         8       0       0       0       0       0       0       0       0
  2100 ;;      Locals:         6       0       0       0       0       0       0       0       0
  2101 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2102 ;;      Totals:        14       0       0       0       0       0       0       0       0
  2103 ;;Total ram usage:       14 bytes
  2104 ;; Hardware stack levels used:    1
  2105 ;; Hardware stack levels required when called:    2
  2106 ;; This function calls:
  2107 ;;		Nothing
  2108 ;; This function is called by:
  2109 ;;		_readADC
  2110 ;;		_principal
  2111 ;;		_CalculoDeFrecuencia
  2112 ;; This function uses a non-reentrant model
  2113 ;;
  2114                           
  2115                           	psect	text6
  2116  002CCE                     __ptext6:
  2117                           	opt callstack 0
  2118  002CCE                     ___aldiv:
  2119                           	opt callstack 26
  2120                           
  2121                           ;incstack = 0
  2122  002CCE  0E00               	movlw	0
  2123  002CD0  6E16               	movwf	___aldiv@sign,c
  2124  002CD2  AE14               	btfss	___aldiv@divisor+3,7,c
  2125  002CD4  D00A               	goto	l3557
  2126  002CD6  1E14               	comf	___aldiv@divisor+3,f,c
  2127  002CD8  1E13               	comf	___aldiv@divisor+2,f,c
  2128  002CDA  1E12               	comf	___aldiv@divisor+1,f,c
  2129  002CDC  6C11               	negf	___aldiv@divisor,c
  2130  002CDE  0E00               	movlw	0
  2131  002CE0  2212               	addwfc	___aldiv@divisor+1,f,c
  2132  002CE2  2213               	addwfc	___aldiv@divisor+2,f,c
  2133  002CE4  2214               	addwfc	___aldiv@divisor+3,f,c
  2134  002CE6  0E01               	movlw	1
  2135  002CE8  6E16               	movwf	___aldiv@sign,c
  2136  002CEA                     l3557:
  2137  002CEA  AE10               	btfss	___aldiv@dividend+3,7,c
  2138  002CEC  D00A               	goto	l3563
  2139  002CEE  1E10               	comf	___aldiv@dividend+3,f,c
  2140  002CF0  1E0F               	comf	___aldiv@dividend+2,f,c
  2141  002CF2  1E0E               	comf	___aldiv@dividend+1,f,c
  2142  002CF4  6C0D               	negf	___aldiv@dividend,c
  2143  002CF6  0E00               	movlw	0
  2144  002CF8  220E               	addwfc	___aldiv@dividend+1,f,c
  2145  002CFA  220F               	addwfc	___aldiv@dividend+2,f,c
  2146  002CFC  2210               	addwfc	___aldiv@dividend+3,f,c
  2147  002CFE  0E01               	movlw	1
  2148  002D00  1A16               	xorwf	___aldiv@sign,f,c
  2149  002D02                     l3563:
  2150  002D02  0E00               	movlw	0
  2151  002D04  6E17               	movwf	___aldiv@quotient,c
  2152  002D06  0E00               	movlw	0
  2153  002D08  6E18               	movwf	___aldiv@quotient+1,c
  2154  002D0A  0E00               	movlw	0
  2155  002D0C  6E19               	movwf	___aldiv@quotient+2,c
  2156  002D0E  0E00               	movlw	0
  2157  002D10  6E1A               	movwf	___aldiv@quotient+3,c
  2158  002D12  5011               	movf	___aldiv@divisor,w,c
  2159  002D14  1012               	iorwf	___aldiv@divisor+1,w,c
  2160  002D16  1013               	iorwf	___aldiv@divisor+2,w,c
  2161  002D18  1014               	iorwf	___aldiv@divisor+3,w,c
  2162  002D1A  B4D8               	btfsc	status,2,c
  2163  002D1C  D02A               	goto	l3585
  2164  002D1E  0E01               	movlw	1
  2165  002D20  6E15               	movwf	___aldiv@counter,c
  2166  002D22  D006               	goto	l3571
  2167  002D24                     l3569:
  2168  002D24  90D8               	bcf	status,0,c
  2169  002D26  3611               	rlcf	___aldiv@divisor,f,c
  2170  002D28  3612               	rlcf	___aldiv@divisor+1,f,c
  2171  002D2A  3613               	rlcf	___aldiv@divisor+2,f,c
  2172  002D2C  3614               	rlcf	___aldiv@divisor+3,f,c
  2173  002D2E  2A15               	incf	___aldiv@counter,f,c
  2174  002D30                     l3571:
  2175  002D30  AE14               	btfss	___aldiv@divisor+3,7,c
  2176  002D32  D7F8               	goto	l3569
  2177  002D34                     u2880:
  2178  002D34  90D8               	bcf	status,0,c
  2179  002D36  3617               	rlcf	___aldiv@quotient,f,c
  2180  002D38  3618               	rlcf	___aldiv@quotient+1,f,c
  2181  002D3A  3619               	rlcf	___aldiv@quotient+2,f,c
  2182  002D3C  361A               	rlcf	___aldiv@quotient+3,f,c
  2183  002D3E  5011               	movf	___aldiv@divisor,w,c
  2184  002D40  5C0D               	subwf	___aldiv@dividend,w,c
  2185  002D42  5012               	movf	___aldiv@divisor+1,w,c
  2186  002D44  580E               	subwfb	___aldiv@dividend+1,w,c
  2187  002D46  5013               	movf	___aldiv@divisor+2,w,c
  2188  002D48  580F               	subwfb	___aldiv@dividend+2,w,c
  2189  002D4A  5014               	movf	___aldiv@divisor+3,w,c
  2190  002D4C  5810               	subwfb	___aldiv@dividend+3,w,c
  2191  002D4E  A0D8               	btfss	status,0,c
  2192  002D50  D009               	goto	l3581
  2193  002D52  5011               	movf	___aldiv@divisor,w,c
  2194  002D54  5E0D               	subwf	___aldiv@dividend,f,c
  2195  002D56  5012               	movf	___aldiv@divisor+1,w,c
  2196  002D58  5A0E               	subwfb	___aldiv@dividend+1,f,c
  2197  002D5A  5013               	movf	___aldiv@divisor+2,w,c
  2198  002D5C  5A0F               	subwfb	___aldiv@dividend+2,f,c
  2199  002D5E  5014               	movf	___aldiv@divisor+3,w,c
  2200  002D60  5A10               	subwfb	___aldiv@dividend+3,f,c
  2201  002D62  8017               	bsf	___aldiv@quotient,0,c
  2202  002D64                     l3581:
  2203  002D64  90D8               	bcf	status,0,c
  2204  002D66  3214               	rrcf	___aldiv@divisor+3,f,c
  2205  002D68  3213               	rrcf	___aldiv@divisor+2,f,c
  2206  002D6A  3212               	rrcf	___aldiv@divisor+1,f,c
  2207  002D6C  3211               	rrcf	___aldiv@divisor,f,c
  2208  002D6E  2E15               	decfsz	___aldiv@counter,f,c
  2209  002D70  D7E1               	goto	u2880
  2210  002D72                     l3585:
  2211  002D72  5016               	movf	___aldiv@sign,w,c
  2212  002D74  B4D8               	btfsc	status,2,c
  2213  002D76  D008               	goto	l3589
  2214  002D78  1E1A               	comf	___aldiv@quotient+3,f,c
  2215  002D7A  1E19               	comf	___aldiv@quotient+2,f,c
  2216  002D7C  1E18               	comf	___aldiv@quotient+1,f,c
  2217  002D7E  6C17               	negf	___aldiv@quotient,c
  2218  002D80  0E00               	movlw	0
  2219  002D82  2218               	addwfc	___aldiv@quotient+1,f,c
  2220  002D84  2219               	addwfc	___aldiv@quotient+2,f,c
  2221  002D86  221A               	addwfc	___aldiv@quotient+3,f,c
  2222  002D88                     l3589:
  2223  002D88  C017  F00D         	movff	___aldiv@quotient,?___aldiv
  2224  002D8C  C018  F00E         	movff	___aldiv@quotient+1,?___aldiv+1
  2225  002D90  C019  F00F         	movff	___aldiv@quotient+2,?___aldiv+2
  2226  002D94  C01A  F010         	movff	___aldiv@quotient+3,?___aldiv+3
  2227  002D98  0012               	return		;funcret
  2228  002D9A                     __end_of___aldiv:
  2229                           	opt callstack 0
  2230                           
  2231 ;; *************** function _pesomedio *****************
  2232 ;; Defined at:
  2233 ;;		line 437 in file "main.c"
  2234 ;; Parameters:    Size  Location     Type
  2235 ;;		None
  2236 ;; Auto vars:     Size  Location     Type
  2237 ;;		None
  2238 ;; Return value:  Size  Location     Type
  2239 ;;                  1    wreg      void 
  2240 ;; Registers used:
  2241 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2242 ;; Tracked objects:
  2243 ;;		On entry : 0/0
  2244 ;;		On exit  : 0/0
  2245 ;;		Unchanged: 0/0
  2246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2247 ;;      Params:         0       0       0       0       0       0       0       0       0
  2248 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2249 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2250 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2251 ;;Total ram usage:        0 bytes
  2252 ;; Hardware stack levels used:    1
  2253 ;; Hardware stack levels required when called:    5
  2254 ;; This function calls:
  2255 ;;		_clear_LCD
  2256 ;;		_msg2LCD
  2257 ;;		_set_CURSOR
  2258 ;;		_tecla
  2259 ;; This function is called by:
  2260 ;;		_principal
  2261 ;; This function uses a non-reentrant model
  2262 ;;
  2263                           
  2264                           	psect	text7
  2265  002D9A                     __ptext7:
  2266                           	opt callstack 0
  2267  002D9A                     _pesomedio:
  2268                           	opt callstack 24
  2269                           
  2270                           ;main.c: 438: if (kilos >= 10 && kilos < 15 && flag3 == 0 && tecla()==5) {
  2271                           
  2272                           ;incstack = 0
  2273  002D9A  BE34               	btfsc	_kilos+3,7,c
  2274  002D9C  D03D               	goto	l3663
  2275  002D9E  5034               	movf	_kilos+3,w,c
  2276  002DA0  1033               	iorwf	_kilos+2,w,c
  2277  002DA2  1032               	iorwf	_kilos+1,w,c
  2278  002DA4  E104               	bnz	u2970
  2279  002DA6  0E0A               	movlw	10
  2280  002DA8  5C31               	subwf	_kilos,w,c
  2281  002DAA  A0D8               	btfss	status,0,c
  2282  002DAC  D035               	goto	l3663
  2283  002DAE                     u2970:
  2284  002DAE  BE34               	btfsc	_kilos+3,7,c
  2285  002DB0  D008               	goto	u2980
  2286  002DB2  5034               	movf	_kilos+3,w,c
  2287  002DB4  1033               	iorwf	_kilos+2,w,c
  2288  002DB6  1032               	iorwf	_kilos+1,w,c
  2289  002DB8  E12F               	bnz	l3663
  2290  002DBA  0E0F               	movlw	15
  2291  002DBC  5C31               	subwf	_kilos,w,c
  2292  002DBE  B0D8               	btfsc	status,0,c
  2293  002DC0  D02B               	goto	l3663
  2294  002DC2                     u2980:
  2295  002DC2  0100               	movlb	0	; () banked
  2296  002DC4  519C               	movf	_flag3& (0+255),w,b
  2297  002DC6  119D               	iorwf	(_flag3+1)& (0+255),w,b
  2298  002DC8  119E               	iorwf	(_flag3+2)& (0+255),w,b
  2299  002DCA  119F               	iorwf	(_flag3+3)& (0+255),w,b
  2300  002DCC  A4D8               	btfss	status,2,c
  2301  002DCE  D024               	goto	l3663
  2302                           
  2303                           ; BSR set to: 0
  2304  002DD0  ECC7  F015         	call	_tecla	;wreg free
  2305  002DD4  0A05               	xorlw	5
  2306  002DD6  A4D8               	btfss	status,2,c
  2307  002DD8  D01F               	goto	l3663
  2308                           
  2309                           ;main.c: 439: clear_LCD();
  2310  002DDA  EC77  F019         	call	_clear_LCD	;wreg free
  2311                           
  2312                           ;main.c: 440: flag3 = 1;
  2313  002DDE  0E01               	movlw	1
  2314  002DE0  0100               	movlb	0	; () banked
  2315  002DE2  6F9C               	movwf	_flag3& (0+255),b
  2316  002DE4  0E00               	movlw	0
  2317  002DE6  6F9D               	movwf	(_flag3+1)& (0+255),b
  2318  002DE8  0E00               	movlw	0
  2319  002DEA  6F9E               	movwf	(_flag3+2)& (0+255),b
  2320  002DEC  0E00               	movlw	0
  2321  002DEE  6F9F               	movwf	(_flag3+3)& (0+255),b
  2322                           
  2323                           ; BSR set to: 0
  2324                           ;main.c: 441: LATCbits.LC0 = 1;
  2325  002DF0  808B               	bsf	3979,0,c	;volatile
  2326                           
  2327                           ; BSR set to: 0
  2328                           ;main.c: 442: LATCbits.LC1 = 1;
  2329  002DF2  828B               	bsf	3979,1,c	;volatile
  2330                           
  2331                           ; BSR set to: 0
  2332                           ;main.c: 443: set_CURSOR(0x01);
  2333  002DF4  0E01               	movlw	1
  2334  002DF6  EC3C  F019         	call	_set_CURSOR
  2335                           
  2336                           ;main.c: 444: msg2LCD("## CARGANDO ##");
  2337  002DFA  0E39               	movlw	low STR_9
  2338  002DFC  6E03               	movwf	msg2LCD@datos,c
  2339  002DFE  0E21               	movlw	high STR_9
  2340  002E00  6E04               	movwf	msg2LCD@datos+1,c
  2341  002E02  ECA3  F018         	call	_msg2LCD	;wreg free
  2342                           
  2343                           ;main.c: 445: set_CURSOR(0x40);
  2344  002E06  0E40               	movlw	64
  2345  002E08  EC3C  F019         	call	_set_CURSOR
  2346                           
  2347                           ;main.c: 446: msg2LCD("       ");
  2348  002E0C  0ED6               	movlw	low STR_10
  2349  002E0E  6E03               	movwf	msg2LCD@datos,c
  2350  002E10  0E21               	movlw	high STR_10
  2351  002E12  6E04               	movwf	msg2LCD@datos+1,c
  2352  002E14  ECA3  F018         	call	_msg2LCD	;wreg free
  2353  002E18                     l3663:
  2354                           
  2355                           ;main.c: 447: };main.c: 448: if (medio == 0) {
  2356  002E18  0100               	movlb	0	; () banked
  2357  002E1A  51F1               	movf	_medio& (0+255),w,b
  2358  002E1C  11F2               	iorwf	(_medio+1)& (0+255),w,b
  2359  002E1E  11F3               	iorwf	(_medio+2)& (0+255),w,b
  2360  002E20  11F4               	iorwf	(_medio+3)& (0+255),w,b
  2361  002E22  A4D8               	btfss	status,2,c
  2362  002E24  0012               	return	
  2363                           
  2364                           ; BSR set to: 0
  2365                           ;main.c: 449: LATCbits.LC0 = 0;
  2366  002E26  908B               	bcf	3979,0,c	;volatile
  2367                           
  2368                           ;main.c: 450: LATCbits.LC1 = 0;
  2369  002E28  928B               	bcf	3979,1,c	;volatile
  2370                           
  2371                           ; BSR set to: 0
  2372                           ;main.c: 451: flag3 = 0;
  2373  002E2A  0E00               	movlw	0
  2374  002E2C  6F9C               	movwf	_flag3& (0+255),b
  2375  002E2E  0E00               	movlw	0
  2376  002E30  6F9D               	movwf	(_flag3+1)& (0+255),b
  2377  002E32  0E00               	movlw	0
  2378  002E34  6F9E               	movwf	(_flag3+2)& (0+255),b
  2379  002E36  0E00               	movlw	0
  2380  002E38  6F9F               	movwf	(_flag3+3)& (0+255),b
  2381                           
  2382                           ;main.c: 452: multi=2;
  2383  002E3A  0E02               	movlw	2
  2384  002E3C  6FA4               	movwf	_multi& (0+255),b
  2385  002E3E  0E00               	movlw	0
  2386  002E40  6FA5               	movwf	(_multi+1)& (0+255),b
  2387  002E42  0E00               	movlw	0
  2388  002E44  6FA6               	movwf	(_multi+2)& (0+255),b
  2389  002E46  0E00               	movlw	0
  2390  002E48  6FA7               	movwf	(_multi+3)& (0+255),b
  2391                           
  2392                           ; BSR set to: 0
  2393  002E4A  0012               	return		;funcret
  2394  002E4C                     __end_of_pesomedio:
  2395                           	opt callstack 0
  2396                           
  2397 ;; *************** function _pesobajo *****************
  2398 ;; Defined at:
  2399 ;;		line 418 in file "main.c"
  2400 ;; Parameters:    Size  Location     Type
  2401 ;;		None
  2402 ;; Auto vars:     Size  Location     Type
  2403 ;;		None
  2404 ;; Return value:  Size  Location     Type
  2405 ;;                  1    wreg      void 
  2406 ;; Registers used:
  2407 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2408 ;; Tracked objects:
  2409 ;;		On entry : 0/0
  2410 ;;		On exit  : 0/0
  2411 ;;		Unchanged: 0/0
  2412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2413 ;;      Params:         0       0       0       0       0       0       0       0       0
  2414 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2415 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2416 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2417 ;;Total ram usage:        0 bytes
  2418 ;; Hardware stack levels used:    1
  2419 ;; Hardware stack levels required when called:    5
  2420 ;; This function calls:
  2421 ;;		_clear_LCD
  2422 ;;		_msg2LCD
  2423 ;;		_set_CURSOR
  2424 ;;		_tecla
  2425 ;; This function is called by:
  2426 ;;		_principal
  2427 ;; This function uses a non-reentrant model
  2428 ;;
  2429                           
  2430                           	psect	text8
  2431  002E4C                     __ptext8:
  2432                           	opt callstack 0
  2433  002E4C                     _pesobajo:
  2434                           	opt callstack 24
  2435                           
  2436                           ;main.c: 419: if (kilos >= 5 && kilos < 10 && flag2 == 0 && tecla()==5) {
  2437                           
  2438                           ; BSR set to: 0
  2439                           ;incstack = 0
  2440  002E4C  BE34               	btfsc	_kilos+3,7,c
  2441  002E4E  D03D               	goto	l3633
  2442  002E50  5034               	movf	_kilos+3,w,c
  2443  002E52  1033               	iorwf	_kilos+2,w,c
  2444  002E54  1032               	iorwf	_kilos+1,w,c
  2445  002E56  E104               	bnz	u2920
  2446  002E58  0E05               	movlw	5
  2447  002E5A  5C31               	subwf	_kilos,w,c
  2448  002E5C  A0D8               	btfss	status,0,c
  2449  002E5E  D035               	goto	l3633
  2450  002E60                     u2920:
  2451  002E60  BE34               	btfsc	_kilos+3,7,c
  2452  002E62  D008               	goto	u2930
  2453  002E64  5034               	movf	_kilos+3,w,c
  2454  002E66  1033               	iorwf	_kilos+2,w,c
  2455  002E68  1032               	iorwf	_kilos+1,w,c
  2456  002E6A  E12F               	bnz	l3633
  2457  002E6C  0E0A               	movlw	10
  2458  002E6E  5C31               	subwf	_kilos,w,c
  2459  002E70  B0D8               	btfsc	status,0,c
  2460  002E72  D02B               	goto	l3633
  2461  002E74                     u2930:
  2462  002E74  0100               	movlb	0	; () banked
  2463  002E76  51A0               	movf	_flag2& (0+255),w,b
  2464  002E78  11A1               	iorwf	(_flag2+1)& (0+255),w,b
  2465  002E7A  11A2               	iorwf	(_flag2+2)& (0+255),w,b
  2466  002E7C  11A3               	iorwf	(_flag2+3)& (0+255),w,b
  2467  002E7E  A4D8               	btfss	status,2,c
  2468  002E80  D024               	goto	l3633
  2469                           
  2470                           ; BSR set to: 0
  2471  002E82  ECC7  F015         	call	_tecla	;wreg free
  2472  002E86  0A05               	xorlw	5
  2473  002E88  A4D8               	btfss	status,2,c
  2474  002E8A  D01F               	goto	l3633
  2475                           
  2476                           ;main.c: 420: clear_LCD();
  2477  002E8C  EC77  F019         	call	_clear_LCD	;wreg free
  2478                           
  2479                           ;main.c: 421: flag2 = 1;
  2480  002E90  0E01               	movlw	1
  2481  002E92  0100               	movlb	0	; () banked
  2482  002E94  6FA0               	movwf	_flag2& (0+255),b
  2483  002E96  0E00               	movlw	0
  2484  002E98  6FA1               	movwf	(_flag2+1)& (0+255),b
  2485  002E9A  0E00               	movlw	0
  2486  002E9C  6FA2               	movwf	(_flag2+2)& (0+255),b
  2487  002E9E  0E00               	movlw	0
  2488  002EA0  6FA3               	movwf	(_flag2+3)& (0+255),b
  2489                           
  2490                           ; BSR set to: 0
  2491                           ;main.c: 422: LATCbits.LC0 = 1;
  2492  002EA2  808B               	bsf	3979,0,c	;volatile
  2493                           
  2494                           ; BSR set to: 0
  2495                           ;main.c: 423: LATCbits.LC1 = 1;
  2496  002EA4  828B               	bsf	3979,1,c	;volatile
  2497                           
  2498                           ; BSR set to: 0
  2499                           ;main.c: 424: set_CURSOR(0x01);
  2500  002EA6  0E01               	movlw	1
  2501  002EA8  EC3C  F019         	call	_set_CURSOR
  2502                           
  2503                           ;main.c: 425: msg2LCD("## CARGANDO ##");
  2504  002EAC  0E39               	movlw	low STR_9
  2505  002EAE  6E03               	movwf	msg2LCD@datos,c
  2506  002EB0  0E21               	movlw	high STR_9
  2507  002EB2  6E04               	movwf	msg2LCD@datos+1,c
  2508  002EB4  ECA3  F018         	call	_msg2LCD	;wreg free
  2509                           
  2510                           ;main.c: 426: set_CURSOR(0x40);
  2511  002EB8  0E40               	movlw	64
  2512  002EBA  EC3C  F019         	call	_set_CURSOR
  2513                           
  2514                           ;main.c: 427: msg2LCD("       ");
  2515  002EBE  0ED6               	movlw	low STR_10
  2516  002EC0  6E03               	movwf	msg2LCD@datos,c
  2517  002EC2  0E21               	movlw	high STR_10
  2518  002EC4  6E04               	movwf	msg2LCD@datos+1,c
  2519  002EC6  ECA3  F018         	call	_msg2LCD	;wreg free
  2520  002ECA                     l3633:
  2521                           
  2522                           ;main.c: 428: };main.c: 429: if (bajo == 0) {
  2523  002ECA  0100               	movlb	0	; () banked
  2524  002ECC  51F5               	movf	_bajo& (0+255),w,b
  2525  002ECE  11F6               	iorwf	(_bajo+1)& (0+255),w,b
  2526  002ED0  11F7               	iorwf	(_bajo+2)& (0+255),w,b
  2527  002ED2  11F8               	iorwf	(_bajo+3)& (0+255),w,b
  2528  002ED4  A4D8               	btfss	status,2,c
  2529  002ED6  0012               	return	
  2530                           
  2531                           ; BSR set to: 0
  2532                           ;main.c: 430: LATCbits.LC0 = 0;
  2533  002ED8  908B               	bcf	3979,0,c	;volatile
  2534                           
  2535                           ;main.c: 431: LATCbits.LC1 = 0;
  2536  002EDA  928B               	bcf	3979,1,c	;volatile
  2537                           
  2538                           ; BSR set to: 0
  2539                           ;main.c: 432: flag2 = 0;
  2540  002EDC  0E00               	movlw	0
  2541  002EDE  6FA0               	movwf	_flag2& (0+255),b
  2542  002EE0  0E00               	movlw	0
  2543  002EE2  6FA1               	movwf	(_flag2+1)& (0+255),b
  2544  002EE4  0E00               	movlw	0
  2545  002EE6  6FA2               	movwf	(_flag2+2)& (0+255),b
  2546  002EE8  0E00               	movlw	0
  2547  002EEA  6FA3               	movwf	(_flag2+3)& (0+255),b
  2548                           
  2549                           ;main.c: 433: multi=2;
  2550  002EEC  0E02               	movlw	2
  2551  002EEE  6FA4               	movwf	_multi& (0+255),b
  2552  002EF0  0E00               	movlw	0
  2553  002EF2  6FA5               	movwf	(_multi+1)& (0+255),b
  2554  002EF4  0E00               	movlw	0
  2555  002EF6  6FA6               	movwf	(_multi+2)& (0+255),b
  2556  002EF8  0E00               	movlw	0
  2557  002EFA  6FA7               	movwf	(_multi+3)& (0+255),b
  2558                           
  2559                           ; BSR set to: 0
  2560  002EFC  0012               	return		;funcret
  2561  002EFE                     __end_of_pesobajo:
  2562                           	opt callstack 0
  2563                           
  2564 ;; *************** function _pesoalto *****************
  2565 ;; Defined at:
  2566 ;;		line 456 in file "main.c"
  2567 ;; Parameters:    Size  Location     Type
  2568 ;;		None
  2569 ;; Auto vars:     Size  Location     Type
  2570 ;;		None
  2571 ;; Return value:  Size  Location     Type
  2572 ;;                  1    wreg      void 
  2573 ;; Registers used:
  2574 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2575 ;; Tracked objects:
  2576 ;;		On entry : 0/0
  2577 ;;		On exit  : 0/0
  2578 ;;		Unchanged: 0/0
  2579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2580 ;;      Params:         0       0       0       0       0       0       0       0       0
  2581 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2582 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2583 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2584 ;;Total ram usage:        0 bytes
  2585 ;; Hardware stack levels used:    1
  2586 ;; Hardware stack levels required when called:    5
  2587 ;; This function calls:
  2588 ;;		_msg2LCD
  2589 ;;		_set_CURSOR
  2590 ;;		_tecla
  2591 ;; This function is called by:
  2592 ;;		_principal
  2593 ;; This function uses a non-reentrant model
  2594 ;;
  2595                           
  2596                           	psect	text9
  2597  002EFE                     __ptext9:
  2598                           	opt callstack 0
  2599  002EFE                     _pesoalto:
  2600                           	opt callstack 24
  2601                           
  2602                           ;main.c: 458: if (kilos >= 15 && kilos < 20 && flag4 == 0 && tecla()==5) {
  2603                           
  2604                           ; BSR set to: 0
  2605                           ;incstack = 0
  2606  002EFE  BE34               	btfsc	_kilos+3,7,c
  2607  002F00  D03B               	goto	l3691
  2608  002F02  5034               	movf	_kilos+3,w,c
  2609  002F04  1033               	iorwf	_kilos+2,w,c
  2610  002F06  1032               	iorwf	_kilos+1,w,c
  2611  002F08  E104               	bnz	u3020
  2612  002F0A  0E0F               	movlw	15
  2613  002F0C  5C31               	subwf	_kilos,w,c
  2614  002F0E  A0D8               	btfss	status,0,c
  2615  002F10  D033               	goto	l3691
  2616  002F12                     u3020:
  2617  002F12  BE34               	btfsc	_kilos+3,7,c
  2618  002F14  D008               	goto	u3030
  2619  002F16  5034               	movf	_kilos+3,w,c
  2620  002F18  1033               	iorwf	_kilos+2,w,c
  2621  002F1A  1032               	iorwf	_kilos+1,w,c
  2622  002F1C  E12D               	bnz	l3691
  2623  002F1E  0E14               	movlw	20
  2624  002F20  5C31               	subwf	_kilos,w,c
  2625  002F22  B0D8               	btfsc	status,0,c
  2626  002F24  D029               	goto	l3691
  2627  002F26                     u3030:
  2628  002F26  0100               	movlb	0	; () banked
  2629  002F28  5198               	movf	_flag4& (0+255),w,b
  2630  002F2A  1199               	iorwf	(_flag4+1)& (0+255),w,b
  2631  002F2C  119A               	iorwf	(_flag4+2)& (0+255),w,b
  2632  002F2E  119B               	iorwf	(_flag4+3)& (0+255),w,b
  2633  002F30  A4D8               	btfss	status,2,c
  2634  002F32  D022               	goto	l3691
  2635                           
  2636                           ; BSR set to: 0
  2637  002F34  ECC7  F015         	call	_tecla	;wreg free
  2638  002F38  0A05               	xorlw	5
  2639  002F3A  A4D8               	btfss	status,2,c
  2640  002F3C  D01D               	goto	l3691
  2641                           
  2642                           ;main.c: 460: flag4 = 1;
  2643  002F3E  0E01               	movlw	1
  2644  002F40  0100               	movlb	0	; () banked
  2645  002F42  6F98               	movwf	_flag4& (0+255),b
  2646  002F44  0E00               	movlw	0
  2647  002F46  6F99               	movwf	(_flag4+1)& (0+255),b
  2648  002F48  0E00               	movlw	0
  2649  002F4A  6F9A               	movwf	(_flag4+2)& (0+255),b
  2650  002F4C  0E00               	movlw	0
  2651  002F4E  6F9B               	movwf	(_flag4+3)& (0+255),b
  2652                           
  2653                           ; BSR set to: 0
  2654                           ;main.c: 461: LATCbits.LC0 = 1;
  2655  002F50  808B               	bsf	3979,0,c	;volatile
  2656                           
  2657                           ; BSR set to: 0
  2658                           ;main.c: 462: LATCbits.LC1 = 1;
  2659  002F52  828B               	bsf	3979,1,c	;volatile
  2660                           
  2661                           ; BSR set to: 0
  2662                           ;main.c: 463: set_CURSOR(0x01);
  2663  002F54  0E01               	movlw	1
  2664  002F56  EC3C  F019         	call	_set_CURSOR
  2665                           
  2666                           ;main.c: 464: msg2LCD("## CARGANDO ##");
  2667  002F5A  0E39               	movlw	low STR_9
  2668  002F5C  6E03               	movwf	msg2LCD@datos,c
  2669  002F5E  0E21               	movlw	high STR_9
  2670  002F60  6E04               	movwf	msg2LCD@datos+1,c
  2671  002F62  ECA3  F018         	call	_msg2LCD	;wreg free
  2672                           
  2673                           ;main.c: 465: set_CURSOR(0x40);
  2674  002F66  0E40               	movlw	64
  2675  002F68  EC3C  F019         	call	_set_CURSOR
  2676                           
  2677                           ;main.c: 466: msg2LCD("       ");
  2678  002F6C  0ED6               	movlw	low STR_10
  2679  002F6E  6E03               	movwf	msg2LCD@datos,c
  2680  002F70  0E21               	movlw	high STR_10
  2681  002F72  6E04               	movwf	msg2LCD@datos+1,c
  2682  002F74  ECA3  F018         	call	_msg2LCD	;wreg free
  2683  002F78                     l3691:
  2684                           
  2685                           ;main.c: 467: };main.c: 468: if (alto == 0) {
  2686  002F78  0100               	movlb	0	; () banked
  2687  002F7A  51ED               	movf	_alto& (0+255),w,b
  2688  002F7C  11EE               	iorwf	(_alto+1)& (0+255),w,b
  2689  002F7E  11EF               	iorwf	(_alto+2)& (0+255),w,b
  2690  002F80  11F0               	iorwf	(_alto+3)& (0+255),w,b
  2691  002F82  A4D8               	btfss	status,2,c
  2692  002F84  0012               	return	
  2693                           
  2694                           ; BSR set to: 0
  2695                           ;main.c: 469: LATCbits.LC0 = 0;
  2696  002F86  908B               	bcf	3979,0,c	;volatile
  2697                           
  2698                           ;main.c: 470: LATCbits.LC1 = 0;
  2699  002F88  928B               	bcf	3979,1,c	;volatile
  2700                           
  2701                           ; BSR set to: 0
  2702                           ;main.c: 471: flag4 = 0;
  2703  002F8A  0E00               	movlw	0
  2704  002F8C  6F98               	movwf	_flag4& (0+255),b
  2705  002F8E  0E00               	movlw	0
  2706  002F90  6F99               	movwf	(_flag4+1)& (0+255),b
  2707  002F92  0E00               	movlw	0
  2708  002F94  6F9A               	movwf	(_flag4+2)& (0+255),b
  2709  002F96  0E00               	movlw	0
  2710  002F98  6F9B               	movwf	(_flag4+3)& (0+255),b
  2711                           
  2712                           ;main.c: 472: multi=2;
  2713  002F9A  0E02               	movlw	2
  2714  002F9C  6FA4               	movwf	_multi& (0+255),b
  2715  002F9E  0E00               	movlw	0
  2716  002FA0  6FA5               	movwf	(_multi+1)& (0+255),b
  2717  002FA2  0E00               	movlw	0
  2718  002FA4  6FA6               	movwf	(_multi+2)& (0+255),b
  2719  002FA6  0E00               	movlw	0
  2720  002FA8  6FA7               	movwf	(_multi+3)& (0+255),b
  2721                           
  2722                           ; BSR set to: 0
  2723  002FAA  0012               	return		;funcret
  2724  002FAC                     __end_of_pesoalto:
  2725                           	opt callstack 0
  2726                           
  2727 ;; *************** function _tecla *****************
  2728 ;; Defined at:
  2729 ;;		line 53 in file "teclado.c"
  2730 ;; Parameters:    Size  Location     Type
  2731 ;;		None
  2732 ;; Auto vars:     Size  Location     Type
  2733 ;;  tecla_KB        1    2[COMRAM] unsigned char 
  2734 ;; Return value:  Size  Location     Type
  2735 ;;                  1    wreg      unsigned char 
  2736 ;; Registers used:
  2737 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  2738 ;; Tracked objects:
  2739 ;;		On entry : 0/0
  2740 ;;		On exit  : 0/0
  2741 ;;		Unchanged: 0/0
  2742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2743 ;;      Params:         0       0       0       0       0       0       0       0       0
  2744 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2745 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2746 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2747 ;;Total ram usage:        3 bytes
  2748 ;; Hardware stack levels used:    1
  2749 ;; Hardware stack levels required when called:    2
  2750 ;; This function calls:
  2751 ;;		Nothing
  2752 ;; This function is called by:
  2753 ;;		_principal
  2754 ;;		_pesobajo
  2755 ;;		_pesomedio
  2756 ;;		_pesoalto
  2757 ;; This function uses a non-reentrant model
  2758 ;;
  2759                           
  2760                           	psect	text10
  2761  002B8E                     __ptext10:
  2762                           	opt callstack 0
  2763  002B8E                     _tecla:
  2764                           	opt callstack 27
  2765                           
  2766                           ;teclado.c: 54: static unsigned char status_KB = KB_LIBRE;;teclado.c: 55: unsigned char 
      +                          tecla_KB = 0xFF;
  2767                           
  2768                           ; BSR set to: 0
  2769                           ;incstack = 0
  2770  002B8E  6803               	setf	tecla@tecla_KB,c
  2771                           
  2772                           ;teclado.c: 62: switch (status_KB) {
  2773  002B90  D08E               	goto	l3495
  2774  002B92                     l3417:
  2775                           
  2776                           ;teclado.c: 65: if (flag_kb) {
  2777  002B92  503B               	movf	_flag_kb,w,c	;volatile
  2778  002B94  B4D8               	btfsc	status,2,c
  2779  002B96  D099               	goto	l3497
  2780                           
  2781                           ;teclado.c: 66: flag_kb = 0;
  2782  002B98  0E00               	movlw	0
  2783  002B9A  6E3B               	movwf	_flag_kb,c	;volatile
  2784                           
  2785                           ;teclado.c: 67: fila = 0xFF;
  2786  002B9C  6857               	setf	_fila,c
  2787                           
  2788                           ;teclado.c: 68: col = 0xFF;
  2789  002B9E  6856               	setf	_col,c
  2790                           
  2791                           ;teclado.c: 69: tecla_KB = 0xFF;
  2792  002BA0  6803               	setf	tecla@tecla_KB,c
  2793                           
  2794                           ;teclado.c: 70: delay_kb = 30;
  2795  002BA2  0E1E               	movlw	30
  2796  002BA4  6E3A               	movwf	_delay_kb,c	;volatile
  2797                           
  2798                           ;teclado.c: 71: status_KB = KB_ESPERA;
  2799  002BA6  0E01               	movlw	1
  2800  002BA8  D019               	goto	L2
  2801  002BAA                     l3427:
  2802                           
  2803                           ;teclado.c: 79: if (!delay_kb) {
  2804  002BAA  503A               	movf	_delay_kb,w,c	;volatile
  2805  002BAC  A4D8               	btfss	status,2,c
  2806  002BAE  D08D               	goto	l3497
  2807                           
  2808                           ;teclado.c: 80: status_KB = KB_DETECTA;
  2809  002BB0  0E02               	movlw	2
  2810  002BB2  D014               	goto	L2
  2811  002BB4                     l920:
  2812                           
  2813                           ;teclado.c: 90: if (!PORTBbits.RB4) {
  2814  002BB4  B881               	btfsc	3969,4,c	;volatile
  2815  002BB6  D002               	goto	l921
  2816                           
  2817                           ;teclado.c: 91: fila = 0;
  2818  002BB8  0E00               	movlw	0
  2819  002BBA  D00B               	goto	L6
  2820  002BBC                     l921:
  2821  002BBC  BA81               	btfsc	3969,5,c	;volatile
  2822  002BBE  D002               	goto	l923
  2823                           
  2824                           ;teclado.c: 94: fila = 1;
  2825  002BC0  0E01               	movlw	1
  2826  002BC2  D007               	goto	L6
  2827  002BC4                     l923:
  2828  002BC4  BC81               	btfsc	3969,6,c	;volatile
  2829  002BC6  D002               	goto	l925
  2830                           
  2831                           ;teclado.c: 97: fila = 2;
  2832  002BC8  0E02               	movlw	2
  2833  002BCA  D003               	goto	L6
  2834  002BCC                     l925:
  2835  002BCC  BE81               	btfsc	3969,7,c	;volatile
  2836  002BCE  D002               	goto	l924
  2837                           
  2838                           ;teclado.c: 100: fila = 3;
  2839  002BD0  0E03               	movlw	3
  2840  002BD2                     L6:
  2841  002BD2  6E57               	movwf	_fila,c
  2842  002BD4                     l924:
  2843                           
  2844                           ;teclado.c: 102: };teclado.c: 107: if (fila == 0xFF) {
  2845  002BD4  2857               	incf	_fila,w,c
  2846  002BD6  A4D8               	btfss	status,2,c
  2847  002BD8  D003               	goto	l928
  2848  002BDA                     u2600:
  2849                           
  2850                           ;teclado.c: 108: status_KB = KB_LIBRE;
  2851  002BDA  0E00               	movlw	0
  2852  002BDC                     L2:
  2853  002BDC  6E39               	movwf	tecla@status_KB,c
  2854                           
  2855                           ;teclado.c: 109: }
  2856  002BDE  D075               	goto	l3497
  2857  002BE0                     l928:
  2858                           
  2859                           ;teclado.c: 113: else {;teclado.c: 114: TRISBbits.RB0 = 1;
  2860  002BE0  8093               	bsf	3987,0,c	;volatile
  2861  002BE2  F000               	nop		;# 
  2862  002BE4  F000               	nop		;# 
  2863  002BE6  F000               	nop		;# 
  2864  002BE8  F000               	nop		;# 
  2865  002BEA  F000               	nop		;# 
  2866  002BEC  F000               	nop		;# 
  2867  002BEE  F000               	nop		;# 
  2868  002BF0  F000               	nop		;# 
  2869  002BF2  F000               	nop		;# 
  2870  002BF4  F000               	nop		;# 
  2871                           
  2872                           ;teclado.c: 126: if (PORTBbits.RB4 && PORTBbits.RB5 && PORTBbits.RB6 && PORTBbits.RB7) {
  2873  002BF6  B881               	btfsc	3969,4,c	;volatile
  2874  002BF8  AA81               	btfss	3969,5,c	;volatile
  2875  002BFA  D005               	goto	l930
  2876  002BFC  BC81               	btfsc	3969,6,c	;volatile
  2877  002BFE  AE81               	btfss	3969,7,c	;volatile
  2878  002C00  D002               	goto	l930
  2879                           
  2880                           ;teclado.c: 127: col = 0;
  2881  002C02  0E00               	movlw	0
  2882  002C04  D025               	goto	L3
  2883  002C06                     l930:
  2884                           
  2885                           ;teclado.c: 132: TRISBbits.RB1 = 1;
  2886  002C06  8293               	bsf	3987,1,c	;volatile
  2887  002C08  F000               	nop		;# 
  2888  002C0A  F000               	nop		;# 
  2889  002C0C  F000               	nop		;# 
  2890  002C0E  F000               	nop		;# 
  2891  002C10  F000               	nop		;# 
  2892  002C12  F000               	nop		;# 
  2893  002C14  F000               	nop		;# 
  2894  002C16  F000               	nop		;# 
  2895  002C18  F000               	nop		;# 
  2896  002C1A  F000               	nop		;# 
  2897                           
  2898                           ;teclado.c: 143: if (PORTBbits.RB4 && PORTBbits.RB5 && PORTBbits.RB6 && PORTBbits.RB7) {
  2899  002C1C  B881               	btfsc	3969,4,c	;volatile
  2900  002C1E  AA81               	btfss	3969,5,c	;volatile
  2901  002C20  D005               	goto	l932
  2902  002C22  BC81               	btfsc	3969,6,c	;volatile
  2903  002C24  AE81               	btfss	3969,7,c	;volatile
  2904  002C26  D002               	goto	l932
  2905                           
  2906                           ;teclado.c: 144: col = 1;
  2907  002C28  0E01               	movlw	1
  2908  002C2A  D012               	goto	L3
  2909  002C2C                     l932:
  2910                           
  2911                           ;teclado.c: 147: TRISBbits.RB2 = 1;
  2912  002C2C  8493               	bsf	3987,2,c	;volatile
  2913  002C2E  F000               	nop		;# 
  2914  002C30  F000               	nop		;# 
  2915  002C32  F000               	nop		;# 
  2916  002C34  F000               	nop		;# 
  2917  002C36  F000               	nop		;# 
  2918  002C38  F000               	nop		;# 
  2919  002C3A  F000               	nop		;# 
  2920  002C3C  F000               	nop		;# 
  2921  002C3E  F000               	nop		;# 
  2922  002C40  F000               	nop		;# 
  2923                           
  2924                           ;teclado.c: 158: if (PORTBbits.RB4 && PORTBbits.RB5 && PORTBbits.RB6 && PORTBbits.RB7) {
  2925  002C42  B881               	btfsc	3969,4,c	;volatile
  2926  002C44  AA81               	btfss	3969,5,c	;volatile
  2927  002C46  D005               	goto	l3467
  2928  002C48  BC81               	btfsc	3969,6,c	;volatile
  2929  002C4A  AE81               	btfss	3969,7,c	;volatile
  2930  002C4C  D002               	goto	l3467
  2931                           
  2932                           ;teclado.c: 159: col = 2;
  2933  002C4E  0E02               	movlw	2
  2934  002C50                     L3:
  2935  002C50  6E56               	movwf	_col,c
  2936  002C52                     l3467:
  2937                           
  2938                           ;teclado.c: 161: };teclado.c: 162: };teclado.c: 163: };teclado.c: 165: TRISBbits.RB0 = 0
      +                          ;
  2939  002C52  9093               	bcf	3987,0,c	;volatile
  2940                           
  2941                           ;teclado.c: 166: TRISBbits.RB1 = 0;
  2942  002C54  9293               	bcf	3987,1,c	;volatile
  2943                           
  2944                           ;teclado.c: 167: TRISBbits.RB2 = 0;
  2945  002C56  9493               	bcf	3987,2,c	;volatile
  2946                           
  2947                           ;teclado.c: 169: if (col == 0xFF) {
  2948  002C58  2856               	incf	_col,w,c
  2949  002C5A  B4D8               	btfsc	status,2,c
  2950  002C5C  D7BE               	goto	u2600
  2951                           
  2952                           ;teclado.c: 177: else {;teclado.c: 178: delay_kb = 50;
  2953  002C5E  0E32               	movlw	50
  2954  002C60  6E3A               	movwf	_delay_kb,c	;volatile
  2955                           
  2956                           ;teclado.c: 179: status_KB = KB_LIBERA;
  2957  002C62  0E03               	movlw	3
  2958  002C64  6E39               	movwf	tecla@status_KB,c
  2959                           
  2960                           ;teclado.c: 180: tecla_KB = teclas[fila][col];
  2961  002C66  5057               	movf	_fila,w,c
  2962  002C68  0D03               	mullw	3
  2963  002C6A  0E01               	movlw	low _teclas
  2964  002C6C  6E01               	movwf	??_tecla& (0+255),c
  2965  002C6E  0E21               	movlw	high _teclas
  2966  002C70  6E02               	movwf	(??_tecla+1)& (0+255),c
  2967  002C72  50F3               	movf	prodl,w,c
  2968  002C74  2601               	addwf	??_tecla,f,c
  2969  002C76  50F4               	movf	prodh,w,c
  2970  002C78  2202               	addwfc	??_tecla+1,f,c
  2971  002C7A  5056               	movf	_col,w,c
  2972  002C7C  2601               	addwf	??_tecla,f,c
  2973  002C7E  0E00               	movlw	0
  2974  002C80  2202               	addwfc	??_tecla+1,f,c
  2975  002C82  C001  FFF6         	movff	??_tecla,tblptrl
  2976  002C86  C002  FFF7         	movff	??_tecla+1,tblptrh
  2977  002C8A                     	if	0	;tblptru may be non-zero
  2978  002C8A                     	endif
  2979  002C8A                     	if	0	;tblptru may be non-zero
  2980  002C8A                     	endif
  2981  002C8A  0008               	tblrd		*
  2982  002C8C  CFF5 F003          	movff	tablat,tecla@tecla_KB
  2983  002C90  D01C               	goto	l3497
  2984  002C92                     l937:
  2985                           
  2986                           ;teclado.c: 188: if ((PORTBbits.RB4 && PORTBbits.RB5 && PORTBbits.RB6 && PORTBbits.RB7)&
      +                          &(!delay_kb)) status_KB = KB_LIBRE;
  2987  002C92  B881               	btfsc	3969,4,c	;volatile
  2988  002C94  AA81               	btfss	3969,5,c	;volatile
  2989  002C96  D019               	goto	l3497
  2990  002C98  BC81               	btfsc	3969,6,c	;volatile
  2991  002C9A  AE81               	btfss	3969,7,c	;volatile
  2992  002C9C  D016               	goto	l3497
  2993  002C9E  503A               	movf	_delay_kb,w,c	;volatile
  2994  002CA0  B4D8               	btfsc	status,2,c
  2995  002CA2  D79B               	goto	u2600
  2996  002CA4  D012               	goto	l3497
  2997  002CA6                     l939:
  2998                           
  2999                           ;teclado.c: 196: fila = 0xFF;
  3000  002CA6  6857               	setf	_fila,c
  3001                           
  3002                           ;teclado.c: 197: col = 0xFF;
  3003  002CA8  6856               	setf	_col,c
  3004                           
  3005                           ;teclado.c: 198: tecla_KB = 0xFF;
  3006  002CAA  6803               	setf	tecla@tecla_KB,c
  3007  002CAC  D796               	goto	u2600
  3008  002CAE                     l3495:
  3009  002CAE  5039               	movf	tecla@status_KB,w,c
  3010                           
  3011                           ; Switch size 1, requested type "simple"
  3012                           ; Number of cases is 4, Range of values is 0 to 3
  3013                           ; switch strategies available:
  3014                           ; Name         Instructions Cycles
  3015                           ; simple_byte           13     7 (average)
  3016                           ;	Chosen strategy is simple_byte
  3017  002CB0  0A00               	xorlw	0	; case 0
  3018  002CB2  B4D8               	btfsc	status,2,c
  3019  002CB4  D76E               	goto	l3417
  3020  002CB6  0A01               	xorlw	1	; case 1
  3021  002CB8  B4D8               	btfsc	status,2,c
  3022  002CBA  D777               	goto	l3427
  3023  002CBC  0A03               	xorlw	3	; case 2
  3024  002CBE  B4D8               	btfsc	status,2,c
  3025  002CC0  D779               	goto	l920
  3026  002CC2  0A01               	xorlw	1	; case 3
  3027  002CC4  B4D8               	btfsc	status,2,c
  3028  002CC6  D7E5               	goto	l937
  3029  002CC8  D7EE               	goto	l939
  3030  002CCA                     l3497:
  3031                           
  3032                           ;teclado.c: 203: return tecla_KB;
  3033  002CCA  5003               	movf	tecla@tecla_KB,w,c
  3034  002CCC  0012               	return		;funcret
  3035  002CCE                     __end_of_tecla:
  3036                           	opt callstack 0
  3037                           
  3038 ;; *************** function _char2LCD *****************
  3039 ;; Defined at:
  3040 ;;		line 39 in file "lcd.c"
  3041 ;; Parameters:    Size  Location     Type
  3042 ;;  dato            1    wreg     unsigned char 
  3043 ;; Auto vars:     Size  Location     Type
  3044 ;;  dato            1    2[COMRAM] unsigned char 
  3045 ;;  i               4    3[COMRAM] unsigned long 
  3046 ;; Return value:  Size  Location     Type
  3047 ;;                  1    wreg      void 
  3048 ;; Registers used:
  3049 ;;		wreg, status,2, status,0, cstack
  3050 ;; Tracked objects:
  3051 ;;		On entry : 0/0
  3052 ;;		On exit  : 0/0
  3053 ;;		Unchanged: 0/0
  3054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3055 ;;      Params:         0       0       0       0       0       0       0       0       0
  3056 ;;      Locals:         5       0       0       0       0       0       0       0       0
  3057 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3058 ;;      Totals:         5       0       0       0       0       0       0       0       0
  3059 ;;Total ram usage:        5 bytes
  3060 ;; Hardware stack levels used:    1
  3061 ;; Hardware stack levels required when called:    4
  3062 ;; This function calls:
  3063 ;;		_write_DATA
  3064 ;; This function is called by:
  3065 ;;		_principal
  3066 ;;		_demo_shield2_1
  3067 ;; This function uses a non-reentrant model
  3068 ;;
  3069                           
  3070                           	psect	text11
  3071  0032B4                     __ptext11:
  3072                           	opt callstack 0
  3073  0032B4                     _char2LCD:
  3074                           	opt callstack 25
  3075                           
  3076                           ;incstack = 0
  3077                           ;char2LCD@dato stored from wreg
  3078  0032B4  6E03               	movwf	char2LCD@dato,c
  3079                           
  3080                           ;lcd.c: 41: write_DATA(dato);
  3081  0032B6  5003               	movf	char2LCD@dato,w,c
  3082  0032B8  EC04  F010         	call	_write_DATA
  3083                           
  3084                           ;lcd.c: 43: for (unsigned long i = 0; i < 1000; i++);
  3085  0032BC  0E00               	movlw	0
  3086  0032BE  6E04               	movwf	char2LCD@i,c
  3087  0032C0  0E00               	movlw	0
  3088  0032C2  6E05               	movwf	char2LCD@i+1,c
  3089  0032C4  0E00               	movlw	0
  3090  0032C6  6E06               	movwf	char2LCD@i+2,c
  3091  0032C8  0E00               	movlw	0
  3092  0032CA  6E07               	movwf	char2LCD@i+3,c
  3093  0032CC                     l3607:
  3094  0032CC  0E01               	movlw	1
  3095  0032CE  2604               	addwf	char2LCD@i,f,c
  3096  0032D0  0E00               	movlw	0
  3097  0032D2  2205               	addwfc	char2LCD@i+1,f,c
  3098  0032D4  2206               	addwfc	char2LCD@i+2,f,c
  3099  0032D6  2207               	addwfc	char2LCD@i+3,f,c
  3100  0032D8  5007               	movf	char2LCD@i+3,w,c
  3101  0032DA  1006               	iorwf	char2LCD@i+2,w,c
  3102  0032DC  E107               	bnz	u2910
  3103  0032DE  0EE8               	movlw	232
  3104  0032E0  5C04               	subwf	char2LCD@i,w,c
  3105  0032E2  0E03               	movlw	3
  3106  0032E4  5805               	subwfb	char2LCD@i+1,w,c
  3107  0032E6  B0D8               	btfsc	status,0,c
  3108  0032E8  0012               	return	
  3109  0032EA  D7F0               	goto	l3607
  3110  0032EC                     u2910:
  3111  0032EC  0012               	return		;funcret
  3112  0032EE                     __end_of_char2LCD:
  3113                           	opt callstack 0
  3114                           
  3115 ;; *************** function _casos *****************
  3116 ;; Defined at:
  3117 ;;		line 699 in file "main.c"
  3118 ;; Parameters:    Size  Location     Type
  3119 ;;		None
  3120 ;; Auto vars:     Size  Location     Type
  3121 ;;		None
  3122 ;; Return value:  Size  Location     Type
  3123 ;;                  1    wreg      void 
  3124 ;; Registers used:
  3125 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3126 ;; Tracked objects:
  3127 ;;		On entry : 0/0
  3128 ;;		On exit  : 0/0
  3129 ;;		Unchanged: 0/0
  3130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3131 ;;      Params:         0       0       0       0       0       0       0       0       0
  3132 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3133 ;;      Temps:          4       0       0       0       0       0       0       0       0
  3134 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3135 ;;Total ram usage:        4 bytes
  3136 ;; Hardware stack levels used:    1
  3137 ;; Hardware stack levels required when called:    5
  3138 ;; This function calls:
  3139 ;;		_clear_LCD
  3140 ;;		_msg2LCD
  3141 ;;		_set_CURSOR
  3142 ;; This function is called by:
  3143 ;;		_principal
  3144 ;; This function uses a non-reentrant model
  3145 ;;
  3146                           
  3147                           	psect	text12
  3148  00280A                     __ptext12:
  3149                           	opt callstack 0
  3150  00280A                     _casos:
  3151                           	opt callstack 24
  3152                           
  3153                           ;main.c: 701: if (c != 0) {
  3154                           
  3155                           ;incstack = 0
  3156  00280A  0100               	movlb	0	; () banked
  3157  00280C  51E5               	movf	_c& (0+255),w,b
  3158  00280E  11E6               	iorwf	(_c+1)& (0+255),w,b
  3159  002810  11E7               	iorwf	(_c+2)& (0+255),w,b
  3160  002812  11E8               	iorwf	(_c+3)& (0+255),w,b
  3161  002814  B4D8               	btfsc	status,2,c
  3162  002816  D0CA               	goto	l3765
  3163                           
  3164                           ; BSR set to: 0
  3165                           ;main.c: 702: flag = 1;
  3166  002818  0E01               	movlw	1
  3167  00281A  6F90               	movwf	_flag& (0+255),b
  3168  00281C  0E00               	movlw	0
  3169  00281E  6F91               	movwf	(_flag+1)& (0+255),b
  3170  002820  0E00               	movlw	0
  3171  002822  6F92               	movwf	(_flag+2)& (0+255),b
  3172  002824  0E00               	movlw	0
  3173  002826  6F93               	movwf	(_flag+3)& (0+255),b
  3174                           
  3175                           ;main.c: 703: switch (cuatro) {
  3176  002828  D09E               	goto	l3763
  3177  00282A                     l3701:
  3178                           
  3179                           ; BSR set to: 0
  3180                           ;main.c: 705: {;main.c: 706: if (a != 0) {
  3181  00282A  5052               	movf	_a,w,c
  3182  00282C  1053               	iorwf	_a+1,w,c
  3183  00282E  1054               	iorwf	_a+2,w,c
  3184  002830  1055               	iorwf	_a+3,w,c
  3185  002832  B4D8               	btfsc	status,2,c
  3186  002834  D01B               	goto	l3715
  3187                           
  3188                           ; BSR set to: 0
  3189                           ;main.c: 708: fa = 1;
  3190  002836  0E01               	movlw	1
  3191  002838  6F88               	movwf	_fa& (0+255),b
  3192  00283A  0E00               	movlw	0
  3193  00283C  6F89               	movwf	(_fa+1)& (0+255),b
  3194  00283E  0E00               	movlw	0
  3195  002840  6F8A               	movwf	(_fa+2)& (0+255),b
  3196  002842  0E00               	movlw	0
  3197  002844  6F8B               	movwf	(_fa+3)& (0+255),b
  3198                           
  3199                           ; BSR set to: 0
  3200                           ;main.c: 709: LATDbits.LD0 = 1;
  3201  002846  808C               	bsf	3980,0,c	;volatile
  3202                           
  3203                           ; BSR set to: 0
  3204                           ;main.c: 710: set_CURSOR(0x01);
  3205  002848  0E01               	movlw	1
  3206  00284A  EC3C  F019         	call	_set_CURSOR
  3207                           
  3208                           ;main.c: 711: msg2LCD("MOTOR HORARIO");
  3209  00284E  0E83               	movlw	low STR_15
  3210  002850  6E03               	movwf	msg2LCD@datos,c
  3211  002852  0E21               	movlw	high STR_15
  3212  002854  6E04               	movwf	msg2LCD@datos+1,c
  3213  002856  ECA3  F018         	call	_msg2LCD	;wreg free
  3214                           
  3215                           ;main.c: 712: set_CURSOR(0x41);
  3216  00285A  0E41               	movlw	65
  3217  00285C  EC3C  F019         	call	_set_CURSOR
  3218                           
  3219                           ;main.c: 713: msg2LCD("LAVANDO...");
  3220  002860  0EAB               	movlw	low STR_16
  3221  002862  6E03               	movwf	msg2LCD@datos,c
  3222  002864  0E21               	movlw	high STR_16
  3223  002866  6E04               	movwf	msg2LCD@datos+1,c
  3224  002868  ECA3  F018         	call	_msg2LCD	;wreg free
  3225  00286C                     l3715:
  3226                           
  3227                           ;main.c: 714: };main.c: 715: if (a == 0) {
  3228  00286C  5052               	movf	_a,w,c
  3229  00286E  1053               	iorwf	_a+1,w,c
  3230  002870  1054               	iorwf	_a+2,w,c
  3231  002872  1055               	iorwf	_a+3,w,c
  3232  002874  A4D8               	btfss	status,2,c
  3233  002876  D09A               	goto	l3765
  3234                           
  3235                           ;main.c: 716: fa = 0;
  3236  002878  0E00               	movlw	0
  3237  00287A  0100               	movlb	0	; () banked
  3238  00287C  6F88               	movwf	_fa& (0+255),b
  3239  00287E  0E00               	movlw	0
  3240  002880  6F89               	movwf	(_fa+1)& (0+255),b
  3241  002882  0E00               	movlw	0
  3242  002884  6F8A               	movwf	(_fa+2)& (0+255),b
  3243  002886  0E00               	movlw	0
  3244  002888  6F8B               	movwf	(_fa+3)& (0+255),b
  3245                           
  3246                           ; BSR set to: 0
  3247                           ;main.c: 717: clear_LCD();
  3248  00288A  EC77  F019         	call	_clear_LCD	;wreg free
  3249                           
  3250                           ;main.c: 718: cuatro = 1;
  3251  00288E  0E01               	movlw	1
  3252  002890  D012               	goto	L7
  3253  002892                     l3723:
  3254                           
  3255                           ; BSR set to: 0
  3256                           ;main.c: 726: {;main.c: 727: if (a == 0) {
  3257  002892  5052               	movf	_a,w,c
  3258  002894  1053               	iorwf	_a+1,w,c
  3259  002896  1054               	iorwf	_a+2,w,c
  3260  002898  1055               	iorwf	_a+3,w,c
  3261  00289A  A4D8               	btfss	status,2,c
  3262  00289C  D087               	goto	l3765
  3263                           
  3264                           ; BSR set to: 0
  3265                           ;main.c: 728: LATDbits.LD0 = 0;
  3266  00289E  908C               	bcf	3980,0,c	;volatile
  3267                           
  3268                           ; BSR set to: 0
  3269                           ;main.c: 729: clear_LCD();
  3270  0028A0  EC77  F019         	call	_clear_LCD	;wreg free
  3271                           
  3272                           ;main.c: 730: a = 5;
  3273  0028A4  0E05               	movlw	5
  3274  0028A6  6E52               	movwf	_a,c
  3275  0028A8  0E00               	movlw	0
  3276  0028AA  6E53               	movwf	_a+1,c
  3277  0028AC  0E00               	movlw	0
  3278  0028AE  6E54               	movwf	_a+2,c
  3279  0028B0  0E00               	movlw	0
  3280  0028B2  6E55               	movwf	_a+3,c
  3281                           
  3282                           ;main.c: 731: cuatro=2;
  3283  0028B4  0E02               	movlw	2
  3284  0028B6                     L7:
  3285  0028B6  0100               	movlb	0	; () banked
  3286  0028B8  D04E               	goto	L8
  3287  0028BA                     l3733:
  3288                           
  3289                           ; BSR set to: 0
  3290                           ;main.c: 738: {;main.c: 739: if(b!=0){
  3291  0028BA  51E9               	movf	_b& (0+255),w,b
  3292  0028BC  11EA               	iorwf	(_b+1)& (0+255),w,b
  3293  0028BE  11EB               	iorwf	(_b+2)& (0+255),w,b
  3294  0028C0  11EC               	iorwf	(_b+3)& (0+255),w,b
  3295  0028C2  B4D8               	btfsc	status,2,c
  3296  0028C4  D01B               	goto	l3747
  3297                           
  3298                           ; BSR set to: 0
  3299                           ;main.c: 740: fb=1;
  3300  0028C6  0E01               	movlw	1
  3301  0028C8  6F8C               	movwf	_fb& (0+255),b
  3302  0028CA  0E00               	movlw	0
  3303  0028CC  6F8D               	movwf	(_fb+1)& (0+255),b
  3304  0028CE  0E00               	movlw	0
  3305  0028D0  6F8E               	movwf	(_fb+2)& (0+255),b
  3306  0028D2  0E00               	movlw	0
  3307  0028D4  6F8F               	movwf	(_fb+3)& (0+255),b
  3308                           
  3309                           ; BSR set to: 0
  3310                           ;main.c: 741: LATDbits.LD1=1;
  3311  0028D6  828C               	bsf	3980,1,c	;volatile
  3312                           
  3313                           ; BSR set to: 0
  3314                           ;main.c: 742: set_CURSOR(0x01);
  3315  0028D8  0E01               	movlw	1
  3316  0028DA  EC3C  F019         	call	_set_CURSOR
  3317                           
  3318                           ;main.c: 743: msg2LCD("MOTOR ANTI");
  3319  0028DE  0EB6               	movlw	low STR_17
  3320  0028E0  6E03               	movwf	msg2LCD@datos,c
  3321  0028E2  0E21               	movlw	high STR_17
  3322  0028E4  6E04               	movwf	msg2LCD@datos+1,c
  3323  0028E6  ECA3  F018         	call	_msg2LCD	;wreg free
  3324                           
  3325                           ;main.c: 744: set_CURSOR(0x41);
  3326  0028EA  0E41               	movlw	65
  3327  0028EC  EC3C  F019         	call	_set_CURSOR
  3328                           
  3329                           ;main.c: 745: msg2LCD("LAVANDO...");
  3330  0028F0  0EAB               	movlw	low STR_16
  3331  0028F2  6E03               	movwf	msg2LCD@datos,c
  3332  0028F4  0E21               	movlw	high STR_16
  3333  0028F6  6E04               	movwf	msg2LCD@datos+1,c
  3334  0028F8  ECA3  F018         	call	_msg2LCD	;wreg free
  3335  0028FC                     l3747:
  3336                           
  3337                           ;main.c: 746: };main.c: 747: if(b==0){
  3338  0028FC  0100               	movlb	0	; () banked
  3339  0028FE  51E9               	movf	_b& (0+255),w,b
  3340  002900  11EA               	iorwf	(_b+1)& (0+255),w,b
  3341  002902  11EB               	iorwf	(_b+2)& (0+255),w,b
  3342  002904  11EC               	iorwf	(_b+3)& (0+255),w,b
  3343  002906  A4D8               	btfss	status,2,c
  3344  002908  D051               	goto	l3765
  3345                           
  3346                           ; BSR set to: 0
  3347                           ;main.c: 748: fb=0;
  3348  00290A  0E00               	movlw	0
  3349  00290C  6F8C               	movwf	_fb& (0+255),b
  3350  00290E  0E00               	movlw	0
  3351  002910  6F8D               	movwf	(_fb+1)& (0+255),b
  3352  002912  0E00               	movlw	0
  3353  002914  6F8E               	movwf	(_fb+2)& (0+255),b
  3354  002916  0E00               	movlw	0
  3355  002918  6F8F               	movwf	(_fb+3)& (0+255),b
  3356                           
  3357                           ;main.c: 749: cuatro=3;
  3358  00291A  0E03               	movlw	3
  3359  00291C  6F84               	movwf	_cuatro& (0+255),b
  3360  00291E  0E00               	movlw	0
  3361  002920  6F85               	movwf	(_cuatro+1)& (0+255),b
  3362  002922  0E00               	movlw	0
  3363  002924  6F86               	movwf	(_cuatro+2)& (0+255),b
  3364  002926  0E00               	movlw	0
  3365  002928  6F87               	movwf	(_cuatro+3)& (0+255),b
  3366                           
  3367                           ; BSR set to: 0
  3368                           ;main.c: 750: clear_LCD();
  3369  00292A  EC77  F019         	call	_clear_LCD	;wreg free
  3370  00292E  D03E               	goto	l3765
  3371  002930                     l3753:
  3372                           
  3373                           ; BSR set to: 0
  3374                           ;main.c: 756: {;main.c: 757: if (b == 0) {
  3375  002930  51E9               	movf	_b& (0+255),w,b
  3376  002932  11EA               	iorwf	(_b+1)& (0+255),w,b
  3377  002934  11EB               	iorwf	(_b+2)& (0+255),w,b
  3378  002936  11EC               	iorwf	(_b+3)& (0+255),w,b
  3379  002938  A4D8               	btfss	status,2,c
  3380  00293A  D038               	goto	l3765
  3381                           
  3382                           ; BSR set to: 0
  3383                           ;main.c: 758: LATDbits.LD1 = 0;
  3384  00293C  928C               	bcf	3980,1,c	;volatile
  3385                           
  3386                           ; BSR set to: 0
  3387                           ;main.c: 759: clear_LCD();
  3388  00293E  EC77  F019         	call	_clear_LCD	;wreg free
  3389                           
  3390                           ;main.c: 760: b = 5;
  3391  002942  0E05               	movlw	5
  3392  002944  0100               	movlb	0	; () banked
  3393  002946  6FE9               	movwf	_b& (0+255),b
  3394  002948  0E00               	movlw	0
  3395  00294A  6FEA               	movwf	(_b+1)& (0+255),b
  3396  00294C  0E00               	movlw	0
  3397  00294E  6FEB               	movwf	(_b+2)& (0+255),b
  3398  002950  0E00               	movlw	0
  3399  002952  6FEC               	movwf	(_b+3)& (0+255),b
  3400                           
  3401                           ; BSR set to: 0
  3402                           ;main.c: 761: cuatro=0;
  3403  002954  0E00               	movlw	0
  3404  002956                     L8:
  3405  002956  6F84               	movwf	_cuatro& (0+255),b
  3406  002958  0E00               	movlw	0
  3407  00295A  6F85               	movwf	(_cuatro+1)& (0+255),b
  3408  00295C  0E00               	movlw	0
  3409  00295E  6F86               	movwf	(_cuatro+2)& (0+255),b
  3410  002960  0E00               	movlw	0
  3411  002962  6F87               	movwf	(_cuatro+3)& (0+255),b
  3412  002964  D023               	goto	l3765
  3413  002966                     l3763:
  3414                           
  3415                           ; BSR set to: 0
  3416  002966  C084  F009         	movff	_cuatro,??_casos
  3417  00296A  C085  F00A         	movff	_cuatro+1,??_casos+1
  3418  00296E  C086  F00B         	movff	_cuatro+2,??_casos+2
  3419  002972  C087  F00C         	movff	_cuatro+3,??_casos+3
  3420                           
  3421                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  3422                           ; Switch size 1, requested type "simple"
  3423                           ; Number of cases is 1, Range of values is 0 to 0
  3424                           ; switch strategies available:
  3425                           ; Name         Instructions Cycles
  3426                           ; simple_byte            4     3 (average)
  3427                           ;	Chosen strategy is simple_byte
  3428  002976  500C               	movf	??_casos+3,w,c
  3429  002978  0A00               	xorlw	0	; case 0
  3430  00297A  B4D8               	btfsc	status,2,c
  3431  00297C  D013               	goto	l4879
  3432  00297E  D016               	goto	l3765
  3433  002980                     l4877:
  3434                           
  3435                           ; BSR set to: 0
  3436                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3437                           ; Switch size 1, requested type "simple"
  3438                           ; Number of cases is 1, Range of values is 0 to 0
  3439                           ; switch strategies available:
  3440                           ; Name         Instructions Cycles
  3441                           ; simple_byte            4     3 (average)
  3442                           ;	Chosen strategy is simple_byte
  3443  002980  500A               	movf	??_casos+1,w,c
  3444  002982  0A00               	xorlw	0	; case 0
  3445  002984  A4D8               	btfss	status,2,c
  3446  002986  D012               	goto	l3765
  3447                           
  3448                           ; BSR set to: 0
  3449                           ; Switch size 1, requested type "simple"
  3450                           ; Number of cases is 4, Range of values is 0 to 3
  3451                           ; switch strategies available:
  3452                           ; Name         Instructions Cycles
  3453                           ; simple_byte           13     7 (average)
  3454                           ;	Chosen strategy is simple_byte
  3455  002988  5009               	movf	??_casos,w,c
  3456  00298A  0A00               	xorlw	0	; case 0
  3457  00298C  B4D8               	btfsc	status,2,c
  3458  00298E  D74D               	goto	l3701
  3459  002990  0A01               	xorlw	1	; case 1
  3460  002992  B4D8               	btfsc	status,2,c
  3461  002994  D77E               	goto	l3723
  3462  002996  0A03               	xorlw	3	; case 2
  3463  002998  B4D8               	btfsc	status,2,c
  3464  00299A  D78F               	goto	l3733
  3465  00299C  0A01               	xorlw	1	; case 3
  3466  00299E  B4D8               	btfsc	status,2,c
  3467  0029A0  D7C7               	goto	l3753
  3468  0029A2  D004               	goto	l3765
  3469  0029A4                     l4879:
  3470                           
  3471                           ; BSR set to: 0
  3472                           ; Switch size 1, requested type "simple"
  3473                           ; Number of cases is 1, Range of values is 0 to 0
  3474                           ; switch strategies available:
  3475                           ; Name         Instructions Cycles
  3476                           ; simple_byte            4     3 (average)
  3477                           ;	Chosen strategy is simple_byte
  3478  0029A4  500B               	movf	??_casos+2,w,c
  3479  0029A6  0A00               	xorlw	0	; case 0
  3480  0029A8  B4D8               	btfsc	status,2,c
  3481  0029AA  D7EA               	goto	l4877
  3482  0029AC                     l3765:
  3483                           
  3484                           ;main.c: 766: };main.c: 767: if(c==0){
  3485  0029AC  0100               	movlb	0	; () banked
  3486  0029AE  51E5               	movf	_c& (0+255),w,b
  3487  0029B0  11E6               	iorwf	(_c+1)& (0+255),w,b
  3488  0029B2  11E7               	iorwf	(_c+2)& (0+255),w,b
  3489  0029B4  11E8               	iorwf	(_c+3)& (0+255),w,b
  3490  0029B6  A4D8               	btfss	status,2,c
  3491  0029B8  0012               	return	
  3492                           
  3493                           ; BSR set to: 0
  3494                           ;main.c: 768: flag=0;
  3495  0029BA  0E00               	movlw	0
  3496  0029BC  6F90               	movwf	_flag& (0+255),b
  3497  0029BE  0E00               	movlw	0
  3498  0029C0  6F91               	movwf	(_flag+1)& (0+255),b
  3499  0029C2  0E00               	movlw	0
  3500  0029C4  6F92               	movwf	(_flag+2)& (0+255),b
  3501  0029C6  0E00               	movlw	0
  3502  0029C8  6F93               	movwf	(_flag+3)& (0+255),b
  3503                           
  3504                           ; BSR set to: 0
  3505                           ;main.c: 769: LATDbits.LD0=0;
  3506  0029CA  908C               	bcf	3980,0,c	;volatile
  3507                           
  3508                           ; BSR set to: 0
  3509                           ;main.c: 770: LATDbits.LD1=0;
  3510  0029CC  928C               	bcf	3980,1,c	;volatile
  3511                           
  3512                           ; BSR set to: 0
  3513                           ;main.c: 771: set_CURSOR(0x01);
  3514  0029CE  0E01               	movlw	1
  3515  0029D0  EC3C  F019         	call	_set_CURSOR
  3516                           
  3517                           ;main.c: 772: msg2LCD("## LAVADO ##");
  3518  0029D4  0E9E               	movlw	low STR_19
  3519  0029D6  6E03               	movwf	msg2LCD@datos,c
  3520  0029D8  0E21               	movlw	high STR_19
  3521  0029DA  6E04               	movwf	msg2LCD@datos+1,c
  3522  0029DC  ECA3  F018         	call	_msg2LCD	;wreg free
  3523                           
  3524                           ;main.c: 773: set_CURSOR(0x42);
  3525  0029E0  0E42               	movlw	66
  3526  0029E2  EC3C  F019         	call	_set_CURSOR
  3527                           
  3528                           ;main.c: 774: msg2LCD("FINALIZADO");
  3529  0029E6  0EC1               	movlw	low STR_20
  3530  0029E8  6E03               	movwf	msg2LCD@datos,c
  3531  0029EA  0E21               	movlw	high STR_20
  3532  0029EC  6E04               	movwf	msg2LCD@datos+1,c
  3533  0029EE  ECA3  F018         	call	_msg2LCD	;wreg free
  3534                           
  3535                           ;main.c: 775: multi=4;
  3536  0029F2  0E04               	movlw	4
  3537  0029F4  0100               	movlb	0	; () banked
  3538  0029F6  6FA4               	movwf	_multi& (0+255),b
  3539  0029F8  0E00               	movlw	0
  3540  0029FA  6FA5               	movwf	(_multi+1)& (0+255),b
  3541  0029FC  0E00               	movlw	0
  3542  0029FE  6FA6               	movwf	(_multi+2)& (0+255),b
  3543  002A00  0E00               	movlw	0
  3544  002A02  6FA7               	movwf	(_multi+3)& (0+255),b
  3545                           
  3546                           ; BSR set to: 0
  3547  002A04  0012               	return		;funcret
  3548  002A06                     __end_of_casos:
  3549                           	opt callstack 0
  3550                           
  3551 ;; *************** function _set_CURSOR *****************
  3552 ;; Defined at:
  3553 ;;		line 64 in file "lcd.c"
  3554 ;; Parameters:    Size  Location     Type
  3555 ;;  posi            1    wreg     unsigned char 
  3556 ;; Auto vars:     Size  Location     Type
  3557 ;;  posi            1    2[COMRAM] unsigned char 
  3558 ;;  i               4    3[COMRAM] unsigned long 
  3559 ;; Return value:  Size  Location     Type
  3560 ;;                  1    wreg      void 
  3561 ;; Registers used:
  3562 ;;		wreg, status,2, status,0, cstack
  3563 ;; Tracked objects:
  3564 ;;		On entry : 0/0
  3565 ;;		On exit  : 0/0
  3566 ;;		Unchanged: 0/0
  3567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3568 ;;      Params:         0       0       0       0       0       0       0       0       0
  3569 ;;      Locals:         5       0       0       0       0       0       0       0       0
  3570 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3571 ;;      Totals:         5       0       0       0       0       0       0       0       0
  3572 ;;Total ram usage:        5 bytes
  3573 ;; Hardware stack levels used:    1
  3574 ;; Hardware stack levels required when called:    4
  3575 ;; This function calls:
  3576 ;;		_write_CMD
  3577 ;; This function is called by:
  3578 ;;		_principal
  3579 ;;		_pesobajo
  3580 ;;		_pesomedio
  3581 ;;		_pesoalto
  3582 ;;		_casos
  3583 ;;		_demo_shield2_1
  3584 ;; This function uses a non-reentrant model
  3585 ;;
  3586                           
  3587                           	psect	text13
  3588  003278                     __ptext13:
  3589                           	opt callstack 0
  3590  003278                     _set_CURSOR:
  3591                           	opt callstack 25
  3592                           
  3593                           ; BSR set to: 0
  3594                           ;incstack = 0
  3595                           ;set_CURSOR@posi stored from wreg
  3596  003278  6E03               	movwf	set_CURSOR@posi,c
  3597                           
  3598                           ;lcd.c: 65: posi |= 0x80;
  3599  00327A  8E03               	bsf	set_CURSOR@posi,7,c
  3600                           
  3601                           ;lcd.c: 66: write_CMD(posi);
  3602  00327C  5003               	movf	set_CURSOR@posi,w,c
  3603  00327E  EC01  F01A         	call	_write_CMD
  3604                           
  3605                           ;lcd.c: 68: for (unsigned long i = 0; i < 10000; i++);
  3606  003282  0E00               	movlw	0
  3607  003284  6E04               	movwf	set_CURSOR@i,c
  3608  003286  0E00               	movlw	0
  3609  003288  6E05               	movwf	set_CURSOR@i+1,c
  3610  00328A  0E00               	movlw	0
  3611  00328C  6E06               	movwf	set_CURSOR@i+2,c
  3612  00328E  0E00               	movlw	0
  3613  003290  6E07               	movwf	set_CURSOR@i+3,c
  3614  003292                     l3511:
  3615  003292  0E01               	movlw	1
  3616  003294  2604               	addwf	set_CURSOR@i,f,c
  3617  003296  0E00               	movlw	0
  3618  003298  2205               	addwfc	set_CURSOR@i+1,f,c
  3619  00329A  2206               	addwfc	set_CURSOR@i+2,f,c
  3620  00329C  2207               	addwfc	set_CURSOR@i+3,f,c
  3621  00329E  5007               	movf	set_CURSOR@i+3,w,c
  3622  0032A0  1006               	iorwf	set_CURSOR@i+2,w,c
  3623  0032A2  E107               	bnz	u2790
  3624  0032A4  0E10               	movlw	16
  3625  0032A6  5C04               	subwf	set_CURSOR@i,w,c
  3626  0032A8  0E27               	movlw	39
  3627  0032AA  5805               	subwfb	set_CURSOR@i+1,w,c
  3628  0032AC  B0D8               	btfsc	status,0,c
  3629  0032AE  0012               	return	
  3630  0032B0  D7F0               	goto	l3511
  3631  0032B2                     u2790:
  3632  0032B2  0012               	return		;funcret
  3633  0032B4                     __end_of_set_CURSOR:
  3634                           	opt callstack 0
  3635                           
  3636 ;; *************** function _msg2LCD *****************
  3637 ;; Defined at:
  3638 ;;		line 27 in file "lcd.c"
  3639 ;; Parameters:    Size  Location     Type
  3640 ;;  datos           2    2[COMRAM] PTR const unsigned char 
  3641 ;;		 -> STR_28(28), STR_27(5), STR_26(5), STR_25(5), 
  3642 ;;		 -> STR_22(5), STR_21(13), STR_20(11), STR_19(13), 
  3643 ;;		 -> STR_18(11), STR_17(11), STR_16(11), STR_15(14), 
  3644 ;;		 -> STR_14(8), STR_13(15), STR_12(8), STR_11(15), 
  3645 ;;		 -> STR_10(8), STR_9(15), STR_8(15), STR_7(15), 
  3646 ;;		 -> STR_6(10), STR_5(16), STR_4(3), STR_3(14), 
  3647 ;;		 -> STR_2(15), STR_1(15), 
  3648 ;; Auto vars:     Size  Location     Type
  3649 ;;  i               4    4[COMRAM] unsigned long 
  3650 ;; Return value:  Size  Location     Type
  3651 ;;                  1    wreg      void 
  3652 ;; Registers used:
  3653 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3654 ;; Tracked objects:
  3655 ;;		On entry : 0/0
  3656 ;;		On exit  : 0/0
  3657 ;;		Unchanged: 0/0
  3658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3659 ;;      Params:         2       0       0       0       0       0       0       0       0
  3660 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3661 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3662 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3663 ;;Total ram usage:        6 bytes
  3664 ;; Hardware stack levels used:    1
  3665 ;; Hardware stack levels required when called:    4
  3666 ;; This function calls:
  3667 ;;		_write_DATA
  3668 ;; This function is called by:
  3669 ;;		_principal
  3670 ;;		_pesobajo
  3671 ;;		_pesomedio
  3672 ;;		_pesoalto
  3673 ;;		_casos
  3674 ;;		_demo_shield2_1_INI
  3675 ;;		_demo_shield2_1
  3676 ;; This function uses a non-reentrant model
  3677 ;;
  3678                           
  3679                           	psect	text14
  3680  003146                     __ptext14:
  3681                           	opt callstack 0
  3682  003146                     _msg2LCD:
  3683                           	opt callstack 24
  3684                           
  3685                           ;lcd.c: 29: while (*datos != 0) {
  3686                           
  3687                           ;incstack = 0
  3688  003146  D021               	goto	l3527
  3689  003148                     l3515:
  3690                           
  3691                           ;lcd.c: 30: write_DATA(*datos);
  3692  003148  C003  FFF6         	movff	msg2LCD@datos,tblptrl
  3693  00314C  C004  FFF7         	movff	msg2LCD@datos+1,tblptrh
  3694  003150                     	if	0	;tblptru may be non-zero
  3695  003150                     	endif
  3696  003150                     	if	0	;tblptru may be non-zero
  3697  003150                     	endif
  3698  003150  0008               	tblrd		*
  3699  003152  50F5               	movf	tablat,w,c
  3700  003154  EC04  F010         	call	_write_DATA
  3701                           
  3702                           ;lcd.c: 32: for (unsigned long i = 0; i < 1000; i++);
  3703  003158  0E00               	movlw	0
  3704  00315A  6E05               	movwf	msg2LCD@i,c
  3705  00315C  0E00               	movlw	0
  3706  00315E  6E06               	movwf	msg2LCD@i+1,c
  3707  003160  0E00               	movlw	0
  3708  003162  6E07               	movwf	msg2LCD@i+2,c
  3709  003164  0E00               	movlw	0
  3710  003166  6E08               	movwf	msg2LCD@i+3,c
  3711  003168                     l3523:
  3712  003168  0E01               	movlw	1
  3713  00316A  2605               	addwf	msg2LCD@i,f,c
  3714  00316C  0E00               	movlw	0
  3715  00316E  2206               	addwfc	msg2LCD@i+1,f,c
  3716  003170  2207               	addwfc	msg2LCD@i+2,f,c
  3717  003172  2208               	addwfc	msg2LCD@i+3,f,c
  3718  003174  5008               	movf	msg2LCD@i+3,w,c
  3719  003176  1007               	iorwf	msg2LCD@i+2,w,c
  3720  003178  E106               	bnz	u2800
  3721  00317A  0EE8               	movlw	232
  3722  00317C  5C05               	subwf	msg2LCD@i,w,c
  3723  00317E  0E03               	movlw	3
  3724  003180  5806               	subwfb	msg2LCD@i+1,w,c
  3725  003182  A0D8               	btfss	status,0,c
  3726  003184  D7F1               	goto	l3523
  3727  003186                     u2800:
  3728                           
  3729                           ;lcd.c: 33: datos++;
  3730  003186  4A03               	infsnz	msg2LCD@datos,f,c
  3731  003188  2A04               	incf	msg2LCD@datos+1,f,c
  3732  00318A                     l3527:
  3733  00318A  C003  FFF6         	movff	msg2LCD@datos,tblptrl
  3734  00318E  C004  FFF7         	movff	msg2LCD@datos+1,tblptrh
  3735  003192                     	if	0	;tblptru may be non-zero
  3736  003192                     	endif
  3737  003192                     	if	0	;tblptru may be non-zero
  3738  003192                     	endif
  3739  003192  0008               	tblrd		*
  3740  003194  50F5               	movf	tablat,w,c
  3741  003196  0900               	iorlw	0
  3742  003198  B4D8               	btfsc	status,2,c
  3743  00319A  0012               	return	
  3744  00319C  D7D5               	goto	l3515
  3745  00319E                     __end_of_msg2LCD:
  3746                           	opt callstack 0
  3747                           
  3748 ;; *************** function _write_DATA *****************
  3749 ;; Defined at:
  3750 ;;		line 120 in file "lcd.c"
  3751 ;; Parameters:    Size  Location     Type
  3752 ;;  dato            1    wreg     unsigned char 
  3753 ;; Auto vars:     Size  Location     Type
  3754 ;;  dato            1    1[COMRAM] unsigned char 
  3755 ;; Return value:  Size  Location     Type
  3756 ;;                  1    wreg      void 
  3757 ;; Registers used:
  3758 ;;		wreg, status,2, status,0, cstack
  3759 ;; Tracked objects:
  3760 ;;		On entry : 0/0
  3761 ;;		On exit  : 0/0
  3762 ;;		Unchanged: 0/0
  3763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3764 ;;      Params:         0       0       0       0       0       0       0       0       0
  3765 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3766 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3767 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3768 ;;Total ram usage:        1 bytes
  3769 ;; Hardware stack levels used:    1
  3770 ;; Hardware stack levels required when called:    3
  3771 ;; This function calls:
  3772 ;;		_write_LCD
  3773 ;; This function is called by:
  3774 ;;		_msg2LCD
  3775 ;;		_char2LCD
  3776 ;; This function uses a non-reentrant model
  3777 ;;
  3778                           
  3779                           	psect	text15
  3780  002008                     __ptext15:
  3781                           	opt callstack 0
  3782  002008                     _write_DATA:
  3783                           	opt callstack 24
  3784                           
  3785                           ;incstack = 0
  3786                           ;write_DATA@dato stored from wreg
  3787  002008  6E02               	movwf	write_DATA@dato,c
  3788                           
  3789                           ;lcd.c: 122: PORTEbits.RE1 = 0x1;
  3790  00200A  8284               	bsf	3972,1,c	;volatile
  3791                           
  3792                           ;lcd.c: 123: PORTEbits.RE0 = 0x0;
  3793  00200C  9084               	bcf	3972,0,c	;volatile
  3794                           
  3795                           ;lcd.c: 124: write_LCD(dato);
  3796  00200E  5002               	movf	write_DATA@dato,w,c
  3797  002010  ECD0  F019         	call	_write_LCD
  3798  002014  0012               	return		;funcret
  3799  002016                     __end_of_write_DATA:
  3800                           	opt callstack 0
  3801                           
  3802 ;; *************** function _clear_LCD *****************
  3803 ;; Defined at:
  3804 ;;		line 48 in file "lcd.c"
  3805 ;; Parameters:    Size  Location     Type
  3806 ;;		None
  3807 ;; Auto vars:     Size  Location     Type
  3808 ;;  i               4    2[COMRAM] unsigned long 
  3809 ;; Return value:  Size  Location     Type
  3810 ;;                  1    wreg      void 
  3811 ;; Registers used:
  3812 ;;		wreg, status,2, status,0, cstack
  3813 ;; Tracked objects:
  3814 ;;		On entry : 0/0
  3815 ;;		On exit  : 0/0
  3816 ;;		Unchanged: 0/0
  3817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3818 ;;      Params:         0       0       0       0       0       0       0       0       0
  3819 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3820 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3821 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3822 ;;Total ram usage:        4 bytes
  3823 ;; Hardware stack levels used:    1
  3824 ;; Hardware stack levels required when called:    4
  3825 ;; This function calls:
  3826 ;;		_write_CMD
  3827 ;; This function is called by:
  3828 ;;		_principal
  3829 ;;		_pesobajo
  3830 ;;		_pesomedio
  3831 ;;		_casos
  3832 ;;		_pesobajoetapa6
  3833 ;;		_pesomedioetapa6
  3834 ;;		_pesoaltoetapa6
  3835 ;;		_demo_shield2_1_INI
  3836 ;;		_demo_shield2_1
  3837 ;; This function uses a non-reentrant model
  3838 ;;
  3839                           
  3840                           	psect	text16
  3841  0032EE                     __ptext16:
  3842                           	opt callstack 0
  3843  0032EE                     _clear_LCD:
  3844                           	opt callstack 24
  3845                           
  3846                           ;lcd.c: 49: write_CMD(0x01);
  3847                           
  3848                           ;incstack = 0
  3849  0032EE  0E01               	movlw	1
  3850  0032F0  EC01  F01A         	call	_write_CMD
  3851                           
  3852                           ;lcd.c: 51: for (unsigned long i = 0; i < 1000; i++);
  3853  0032F4  0E00               	movlw	0
  3854  0032F6  6E03               	movwf	clear_LCD@i,c
  3855  0032F8  0E00               	movlw	0
  3856  0032FA  6E04               	movwf	clear_LCD@i+1,c
  3857  0032FC  0E00               	movlw	0
  3858  0032FE  6E05               	movwf	clear_LCD@i+2,c
  3859  003300  0E00               	movlw	0
  3860  003302  6E06               	movwf	clear_LCD@i+3,c
  3861  003304                     l3537:
  3862  003304  0E01               	movlw	1
  3863  003306  2603               	addwf	clear_LCD@i,f,c
  3864  003308  0E00               	movlw	0
  3865  00330A  2204               	addwfc	clear_LCD@i+1,f,c
  3866  00330C  2205               	addwfc	clear_LCD@i+2,f,c
  3867  00330E  2206               	addwfc	clear_LCD@i+3,f,c
  3868  003310  5006               	movf	clear_LCD@i+3,w,c
  3869  003312  1005               	iorwf	clear_LCD@i+2,w,c
  3870  003314  E107               	bnz	u2820
  3871  003316  0EE8               	movlw	232
  3872  003318  5C03               	subwf	clear_LCD@i,w,c
  3873  00331A  0E03               	movlw	3
  3874  00331C  5804               	subwfb	clear_LCD@i+1,w,c
  3875  00331E  B0D8               	btfsc	status,0,c
  3876  003320  0012               	return	
  3877  003322  D7F0               	goto	l3537
  3878  003324                     u2820:
  3879  003324  0012               	return		;funcret
  3880  003326                     __end_of_clear_LCD:
  3881                           	opt callstack 0
  3882                           
  3883 ;; *************** function ___almod *****************
  3884 ;; Defined at:
  3885 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\almod.c"
  3886 ;; Parameters:    Size  Location     Type
  3887 ;;  dividend        4   30[COMRAM] long 
  3888 ;;  divisor         4   34[COMRAM] long 
  3889 ;; Auto vars:     Size  Location     Type
  3890 ;;  sign            1   39[COMRAM] unsigned char 
  3891 ;;  counter         1   38[COMRAM] unsigned char 
  3892 ;; Return value:  Size  Location     Type
  3893 ;;                  4   30[COMRAM] long 
  3894 ;; Registers used:
  3895 ;;		wreg, status,2, status,0
  3896 ;; Tracked objects:
  3897 ;;		On entry : 0/0
  3898 ;;		On exit  : 0/0
  3899 ;;		Unchanged: 0/0
  3900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3901 ;;      Params:         8       0       0       0       0       0       0       0       0
  3902 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3903 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3904 ;;      Totals:        10       0       0       0       0       0       0       0       0
  3905 ;;Total ram usage:       10 bytes
  3906 ;; Hardware stack levels used:    1
  3907 ;; Hardware stack levels required when called:    2
  3908 ;; This function calls:
  3909 ;;		Nothing
  3910 ;; This function is called by:
  3911 ;;		_principal
  3912 ;; This function uses a non-reentrant model
  3913 ;;
  3914                           
  3915                           	psect	text17
  3916  002FAC                     __ptext17:
  3917                           	opt callstack 0
  3918  002FAC                     ___almod:
  3919                           	opt callstack 27
  3920                           
  3921                           ;incstack = 0
  3922  002FAC  0E00               	movlw	0
  3923  002FAE  6E28               	movwf	___almod@sign,c
  3924  002FB0  AE22               	btfss	___almod@dividend+3,7,c
  3925  002FB2  D00A               	goto	l3875
  3926  002FB4  1E22               	comf	___almod@dividend+3,f,c
  3927  002FB6  1E21               	comf	___almod@dividend+2,f,c
  3928  002FB8  1E20               	comf	___almod@dividend+1,f,c
  3929  002FBA  6C1F               	negf	___almod@dividend,c
  3930  002FBC  0E00               	movlw	0
  3931  002FBE  2220               	addwfc	___almod@dividend+1,f,c
  3932  002FC0  2221               	addwfc	___almod@dividend+2,f,c
  3933  002FC2  2222               	addwfc	___almod@dividend+3,f,c
  3934  002FC4  0E01               	movlw	1
  3935  002FC6  6E28               	movwf	___almod@sign,c
  3936  002FC8                     l3875:
  3937  002FC8  AE26               	btfss	___almod@divisor+3,7,c
  3938  002FCA  D008               	goto	l3879
  3939  002FCC  1E26               	comf	___almod@divisor+3,f,c
  3940  002FCE  1E25               	comf	___almod@divisor+2,f,c
  3941  002FD0  1E24               	comf	___almod@divisor+1,f,c
  3942  002FD2  6C23               	negf	___almod@divisor,c
  3943  002FD4  0E00               	movlw	0
  3944  002FD6  2224               	addwfc	___almod@divisor+1,f,c
  3945  002FD8  2225               	addwfc	___almod@divisor+2,f,c
  3946  002FDA  2226               	addwfc	___almod@divisor+3,f,c
  3947  002FDC                     l3879:
  3948  002FDC  5023               	movf	___almod@divisor,w,c
  3949  002FDE  1024               	iorwf	___almod@divisor+1,w,c
  3950  002FE0  1025               	iorwf	___almod@divisor+2,w,c
  3951  002FE2  1026               	iorwf	___almod@divisor+3,w,c
  3952  002FE4  B4D8               	btfsc	status,2,c
  3953  002FE6  D024               	goto	l3895
  3954  002FE8  0E01               	movlw	1
  3955  002FEA  6E27               	movwf	___almod@counter,c
  3956  002FEC  D006               	goto	l3885
  3957  002FEE                     l3883:
  3958  002FEE  90D8               	bcf	status,0,c
  3959  002FF0  3623               	rlcf	___almod@divisor,f,c
  3960  002FF2  3624               	rlcf	___almod@divisor+1,f,c
  3961  002FF4  3625               	rlcf	___almod@divisor+2,f,c
  3962  002FF6  3626               	rlcf	___almod@divisor+3,f,c
  3963  002FF8  2A27               	incf	___almod@counter,f,c
  3964  002FFA                     l3885:
  3965  002FFA  AE26               	btfss	___almod@divisor+3,7,c
  3966  002FFC  D7F8               	goto	l3883
  3967  002FFE                     u3270:
  3968  002FFE  5023               	movf	___almod@divisor,w,c
  3969  003000  5C1F               	subwf	___almod@dividend,w,c
  3970  003002  5024               	movf	___almod@divisor+1,w,c
  3971  003004  5820               	subwfb	___almod@dividend+1,w,c
  3972  003006  5025               	movf	___almod@divisor+2,w,c
  3973  003008  5821               	subwfb	___almod@dividend+2,w,c
  3974  00300A  5026               	movf	___almod@divisor+3,w,c
  3975  00300C  5822               	subwfb	___almod@dividend+3,w,c
  3976  00300E  A0D8               	btfss	status,0,c
  3977  003010  D008               	goto	l3891
  3978  003012  5023               	movf	___almod@divisor,w,c
  3979  003014  5E1F               	subwf	___almod@dividend,f,c
  3980  003016  5024               	movf	___almod@divisor+1,w,c
  3981  003018  5A20               	subwfb	___almod@dividend+1,f,c
  3982  00301A  5025               	movf	___almod@divisor+2,w,c
  3983  00301C  5A21               	subwfb	___almod@dividend+2,f,c
  3984  00301E  5026               	movf	___almod@divisor+3,w,c
  3985  003020  5A22               	subwfb	___almod@dividend+3,f,c
  3986  003022                     l3891:
  3987  003022  90D8               	bcf	status,0,c
  3988  003024  3226               	rrcf	___almod@divisor+3,f,c
  3989  003026  3225               	rrcf	___almod@divisor+2,f,c
  3990  003028  3224               	rrcf	___almod@divisor+1,f,c
  3991  00302A  3223               	rrcf	___almod@divisor,f,c
  3992  00302C  2E27               	decfsz	___almod@counter,f,c
  3993  00302E  D7E7               	goto	u3270
  3994  003030                     l3895:
  3995  003030  5028               	movf	___almod@sign,w,c
  3996  003032  B4D8               	btfsc	status,2,c
  3997  003034  D008               	goto	l3899
  3998  003036  1E22               	comf	___almod@dividend+3,f,c
  3999  003038  1E21               	comf	___almod@dividend+2,f,c
  4000  00303A  1E20               	comf	___almod@dividend+1,f,c
  4001  00303C  6C1F               	negf	___almod@dividend,c
  4002  00303E  0E00               	movlw	0
  4003  003040  2220               	addwfc	___almod@dividend+1,f,c
  4004  003042  2221               	addwfc	___almod@dividend+2,f,c
  4005  003044  2222               	addwfc	___almod@dividend+3,f,c
  4006  003046                     l3899:
  4007  003046  C01F  F01F         	movff	___almod@dividend,?___almod
  4008  00304A  C020  F020         	movff	___almod@dividend+1,?___almod+1
  4009  00304E  C021  F021         	movff	___almod@dividend+2,?___almod+2
  4010  003052  C022  F022         	movff	___almod@dividend+3,?___almod+3
  4011  003056  0012               	return		;funcret
  4012  003058                     __end_of___almod:
  4013                           	opt callstack 0
  4014                           
  4015 ;; *************** function _TIMER1_INI *****************
  4016 ;; Defined at:
  4017 ;;		line 26 in file "Tecnica1.c"
  4018 ;; Parameters:    Size  Location     Type
  4019 ;;		None
  4020 ;; Auto vars:     Size  Location     Type
  4021 ;;		None
  4022 ;; Return value:  Size  Location     Type
  4023 ;;                  1    wreg      void 
  4024 ;; Registers used:
  4025 ;;		wreg, status,2
  4026 ;; Tracked objects:
  4027 ;;		On entry : 0/0
  4028 ;;		On exit  : 0/0
  4029 ;;		Unchanged: 0/0
  4030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4031 ;;      Params:         0       0       0       0       0       0       0       0       0
  4032 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4033 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4034 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4035 ;;Total ram usage:        0 bytes
  4036 ;; Hardware stack levels used:    1
  4037 ;; Hardware stack levels required when called:    2
  4038 ;; This function calls:
  4039 ;;		Nothing
  4040 ;; This function is called by:
  4041 ;;		_main
  4042 ;;		_demo_shield2_1_INI
  4043 ;; This function uses a non-reentrant model
  4044 ;;
  4045                           
  4046                           	psect	text18
  4047  003380                     __ptext18:
  4048                           	opt callstack 0
  4049  003380                     _TIMER1_INI:
  4050                           	opt callstack 28
  4051                           
  4052                           ;Tecnica1.c: 27: T1CONbits.TMR1ON = 0;
  4053                           
  4054                           ;incstack = 0
  4055  003380  90CD               	bcf	4045,0,c	;volatile
  4056                           
  4057                           ;Tecnica1.c: 28: T1CONbits.TMR1CS = 0;
  4058  003382  92CD               	bcf	4045,1,c	;volatile
  4059                           
  4060                           ;Tecnica1.c: 29: T1CONbits.nT1SYNC = 1;
  4061  003384  84CD               	bsf	4045,2,c	;volatile
  4062                           
  4063                           ;Tecnica1.c: 30: T1CONbits.T1OSCEN = 0;
  4064  003386  96CD               	bcf	4045,3,c	;volatile
  4065                           
  4066                           ;Tecnica1.c: 31: T1CONbits.T1CKPS = 0;
  4067  003388  0ECF               	movlw	-49
  4068  00338A  16CD               	andwf	4045,f,c	;volatile
  4069                           
  4070                           ;Tecnica1.c: 32: T1CONbits.RD16 = 0;
  4071  00338C  9ECD               	bcf	4045,7,c	;volatile
  4072                           
  4073                           ;Tecnica1.c: 33: T1CONbits.T1RUN = 0;
  4074  00338E  9CCD               	bcf	4045,6,c	;volatile
  4075                           
  4076                           ;Tecnica1.c: 34: TMR1L = 0x1B;
  4077  003390  0E1B               	movlw	27
  4078  003392  6ECE               	movwf	4046,c	;volatile
  4079                           
  4080                           ;Tecnica1.c: 35: TMR1H = 0xD1;
  4081  003394  0ED1               	movlw	209
  4082  003396  6ECF               	movwf	4047,c	;volatile
  4083                           
  4084                           ;Tecnica1.c: 36: PIR1bits.TMR1IF = 0;
  4085  003398  909E               	bcf	3998,0,c	;volatile
  4086                           
  4087                           ;Tecnica1.c: 37: PIE1bits.TMR1IE = 1;
  4088  00339A  809D               	bsf	3997,0,c	;volatile
  4089                           
  4090                           ;Tecnica1.c: 38: INTCONbits.PEIE = 1;
  4091  00339C  8CF2               	bsf	4082,6,c	;volatile
  4092  00339E  0012               	return		;funcret
  4093  0033A0                     __end_of_TIMER1_INI:
  4094                           	opt callstack 0
  4095                           
  4096 ;; *************** function _TIMER0_INI *****************
  4097 ;; Defined at:
  4098 ;;		line 13 in file "Tecnica1.c"
  4099 ;; Parameters:    Size  Location     Type
  4100 ;;		None
  4101 ;; Auto vars:     Size  Location     Type
  4102 ;;		None
  4103 ;; Return value:  Size  Location     Type
  4104 ;;                  1    wreg      void 
  4105 ;; Registers used:
  4106 ;;		wreg, status,2
  4107 ;; Tracked objects:
  4108 ;;		On entry : 0/0
  4109 ;;		On exit  : 0/0
  4110 ;;		Unchanged: 0/0
  4111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4112 ;;      Params:         0       0       0       0       0       0       0       0       0
  4113 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4114 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4115 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4116 ;;Total ram usage:        0 bytes
  4117 ;; Hardware stack levels used:    1
  4118 ;; Hardware stack levels required when called:    2
  4119 ;; This function calls:
  4120 ;;		Nothing
  4121 ;; This function is called by:
  4122 ;;		_main
  4123 ;;		_demo_shield2_1_INI
  4124 ;; This function uses a non-reentrant model
  4125 ;;
  4126                           
  4127                           	psect	text19
  4128  0033C0                     __ptext19:
  4129                           	opt callstack 0
  4130  0033C0                     _TIMER0_INI:
  4131                           	opt callstack 28
  4132                           
  4133                           ;Tecnica1.c: 14: T0CONbits.TMR0ON = 0;
  4134                           
  4135                           ;incstack = 0
  4136  0033C0  9ED5               	bcf	4053,7,c	;volatile
  4137                           
  4138                           ;Tecnica1.c: 15: T0CONbits.T08BIT = 0;
  4139  0033C2  9CD5               	bcf	4053,6,c	;volatile
  4140                           
  4141                           ;Tecnica1.c: 16: T0CONbits.T0CS = 0;
  4142  0033C4  9AD5               	bcf	4053,5,c	;volatile
  4143                           
  4144                           ;Tecnica1.c: 17: T0CONbits.PSA = 0;
  4145  0033C6  96D5               	bcf	4053,3,c	;volatile
  4146                           
  4147                           ;Tecnica1.c: 18: T0CONbits.T0PS0 = 1;
  4148  0033C8  80D5               	bsf	4053,0,c	;volatile
  4149                           
  4150                           ;Tecnica1.c: 19: T0CONbits.T0PS1 = 1;
  4151  0033CA  82D5               	bsf	4053,1,c	;volatile
  4152                           
  4153                           ;Tecnica1.c: 20: T0CONbits.T0PS2 = 1;
  4154  0033CC  84D5               	bsf	4053,2,c	;volatile
  4155                           
  4156                           ;Tecnica1.c: 21: TMR0L = 0xD2;
  4157  0033CE  0ED2               	movlw	210
  4158  0033D0  6ED6               	movwf	4054,c	;volatile
  4159                           
  4160                           ;Tecnica1.c: 22: TMR0H = 0x48;
  4161  0033D2  0E48               	movlw	72
  4162  0033D4  6ED7               	movwf	4055,c	;volatile
  4163                           
  4164                           ;Tecnica1.c: 23: INTCONbits.TMR0IE = 1;
  4165  0033D6  8AF2               	bsf	4082,5,c	;volatile
  4166  0033D8  0012               	return		;funcret
  4167  0033DA                     __end_of_TIMER0_INI:
  4168                           	opt callstack 0
  4169                           
  4170 ;; *************** function _PicIni21 *****************
  4171 ;; Defined at:
  4172 ;;		line 3 in file "ConfShield2_1.c"
  4173 ;; Parameters:    Size  Location     Type
  4174 ;;		None
  4175 ;; Auto vars:     Size  Location     Type
  4176 ;;		None
  4177 ;; Return value:  Size  Location     Type
  4178 ;;                  1    wreg      void 
  4179 ;; Registers used:
  4180 ;;		wreg, status,2
  4181 ;; Tracked objects:
  4182 ;;		On entry : 0/0
  4183 ;;		On exit  : 0/0
  4184 ;;		Unchanged: 0/0
  4185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4186 ;;      Params:         0       0       0       0       0       0       0       0       0
  4187 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4188 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4189 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4190 ;;Total ram usage:        0 bytes
  4191 ;; Hardware stack levels used:    1
  4192 ;; Hardware stack levels required when called:    2
  4193 ;; This function calls:
  4194 ;;		Nothing
  4195 ;; This function is called by:
  4196 ;;		_main
  4197 ;;		_demo_shield2_1_INI
  4198 ;; This function uses a non-reentrant model
  4199 ;;
  4200                           
  4201                           	psect	text20
  4202  003354                     __ptext20:
  4203                           	opt callstack 0
  4204  003354                     _PicIni21:
  4205                           	opt callstack 28
  4206                           
  4207                           ;ConfShield2_1.c: 7: LATA = 0x00;
  4208                           
  4209                           ;incstack = 0
  4210  003354  0E00               	movlw	0
  4211  003356  6E89               	movwf	3977,c	;volatile
  4212                           
  4213                           ;ConfShield2_1.c: 8: LATB = 0x00;
  4214  003358  0E00               	movlw	0
  4215  00335A  6E8A               	movwf	3978,c	;volatile
  4216                           
  4217                           ;ConfShield2_1.c: 9: LATC = 0x00;
  4218  00335C  0E00               	movlw	0
  4219  00335E  6E8B               	movwf	3979,c	;volatile
  4220                           
  4221                           ;ConfShield2_1.c: 10: LATD = 0x00;
  4222  003360  0E00               	movlw	0
  4223  003362  6E8C               	movwf	3980,c	;volatile
  4224                           
  4225                           ;ConfShield2_1.c: 11: LATE = 0x00;
  4226  003364  0E00               	movlw	0
  4227  003366  6E8D               	movwf	3981,c	;volatile
  4228                           
  4229                           ;ConfShield2_1.c: 15: TRISA = 0xFF;
  4230  003368  6892               	setf	3986,c	;volatile
  4231                           
  4232                           ;ConfShield2_1.c: 17: TRISB = 0xFF;
  4233  00336A  6893               	setf	3987,c	;volatile
  4234                           
  4235                           ;ConfShield2_1.c: 18: TRISC = 0xFF;
  4236  00336C  6894               	setf	3988,c	;volatile
  4237                           
  4238                           ;ConfShield2_1.c: 22: TRISD = 0x0C;
  4239  00336E  0E0C               	movlw	12
  4240  003370  6E95               	movwf	3989,c	;volatile
  4241                           
  4242                           ;ConfShield2_1.c: 24: TRISE = 0x00;
  4243  003372  0E00               	movlw	0
  4244  003374  6E96               	movwf	3990,c	;volatile
  4245                           
  4246                           ;ConfShield2_1.c: 27: CMCON = 0x07;
  4247  003376  0E07               	movlw	7
  4248  003378  6EB4               	movwf	4020,c	;volatile
  4249                           
  4250                           ;ConfShield2_1.c: 28: ADCON1 = 0x0F;
  4251  00337A  0E0F               	movlw	15
  4252  00337C  6EC1               	movwf	4033,c	;volatile
  4253  00337E  0012               	return		;funcret
  4254  003380                     __end_of_PicIni21:
  4255                           	opt callstack 0
  4256                           
  4257 ;; *************** function _LCD_init *****************
  4258 ;; Defined at:
  4259 ;;		line 79 in file "lcd.c"
  4260 ;; Parameters:    Size  Location     Type
  4261 ;;		None
  4262 ;; Auto vars:     Size  Location     Type
  4263 ;;  i               4   22[COMRAM] unsigned long 
  4264 ;;  i               4   18[COMRAM] unsigned long 
  4265 ;;  i               4   14[COMRAM] unsigned long 
  4266 ;;  i               4   10[COMRAM] unsigned long 
  4267 ;;  i               4    6[COMRAM] unsigned long 
  4268 ;;  i               4    2[COMRAM] unsigned long 
  4269 ;; Return value:  Size  Location     Type
  4270 ;;                  1    wreg      void 
  4271 ;; Registers used:
  4272 ;;		wreg, status,2, status,0, cstack
  4273 ;; Tracked objects:
  4274 ;;		On entry : 0/0
  4275 ;;		On exit  : 0/0
  4276 ;;		Unchanged: 0/0
  4277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4278 ;;      Params:         0       0       0       0       0       0       0       0       0
  4279 ;;      Locals:        24       0       0       0       0       0       0       0       0
  4280 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4281 ;;      Totals:        24       0       0       0       0       0       0       0       0
  4282 ;;Total ram usage:       24 bytes
  4283 ;; Hardware stack levels used:    1
  4284 ;; Hardware stack levels required when called:    4
  4285 ;; This function calls:
  4286 ;;		_write_CMD
  4287 ;; This function is called by:
  4288 ;;		_main
  4289 ;;		_demo_shield2_1_INI
  4290 ;; This function uses a non-reentrant model
  4291 ;;
  4292                           
  4293                           	psect	text21
  4294  002A06                     __ptext21:
  4295                           	opt callstack 0
  4296  002A06                     _LCD_init:
  4297                           	opt callstack 26
  4298                           
  4299                           ;lcd.c: 80: TRISD &= 0x0F;
  4300                           
  4301                           ;incstack = 0
  4302  002A06  0E0F               	movlw	15
  4303  002A08  1695               	andwf	3989,f,c	;volatile
  4304                           
  4305                           ;lcd.c: 81: TRISEbits.RE1 = 0;
  4306  002A0A  9296               	bcf	3990,1,c	;volatile
  4307                           
  4308                           ;lcd.c: 82: TRISEbits.RE0 = 0;
  4309  002A0C  9096               	bcf	3990,0,c	;volatile
  4310                           
  4311                           ;lcd.c: 83: TRISEbits.RE2 = 0;
  4312  002A0E  9496               	bcf	3990,2,c	;volatile
  4313                           
  4314                           ;lcd.c: 86: LCD_tout = 30;
  4315  002A10  0E00               	movlw	0
  4316  002A12  0100               	movlb	0	; () banked
  4317  002A14  6FFF               	movwf	(_LCD_tout+1)& (0+255),b
  4318  002A16  0E1E               	movlw	30
  4319  002A18  6FFE               	movwf	_LCD_tout& (0+255),b
  4320                           
  4321                           ; BSR set to: 0
  4322                           ;lcd.c: 88: for (unsigned long i = 0; i < 100000; i++);
  4323  002A1A  0E00               	movlw	0
  4324  002A1C  6E03               	movwf	LCD_init@i,c
  4325  002A1E  0E00               	movlw	0
  4326  002A20  6E04               	movwf	LCD_init@i+1,c
  4327  002A22  0E00               	movlw	0
  4328  002A24  6E05               	movwf	LCD_init@i+2,c
  4329  002A26  0E00               	movlw	0
  4330  002A28  6E06               	movwf	LCD_init@i+3,c
  4331  002A2A                     l3917:
  4332  002A2A  0E01               	movlw	1
  4333  002A2C  2603               	addwf	LCD_init@i,f,c
  4334  002A2E  0E00               	movlw	0
  4335  002A30  2204               	addwfc	LCD_init@i+1,f,c
  4336  002A32  2205               	addwfc	LCD_init@i+2,f,c
  4337  002A34  2206               	addwfc	LCD_init@i+3,f,c
  4338  002A36  5006               	movf	LCD_init@i+3,w,c
  4339  002A38  E108               	bnz	u3300
  4340  002A3A  0EA0               	movlw	160
  4341  002A3C  5C03               	subwf	LCD_init@i,w,c
  4342  002A3E  0E86               	movlw	134
  4343  002A40  5804               	subwfb	LCD_init@i+1,w,c
  4344  002A42  0E01               	movlw	1
  4345  002A44  5805               	subwfb	LCD_init@i+2,w,c
  4346  002A46  A0D8               	btfss	status,0,c
  4347  002A48  D7F0               	goto	l3917
  4348  002A4A                     u3300:
  4349                           
  4350                           ;lcd.c: 90: write_CMD(0x02);
  4351  002A4A  0E02               	movlw	2
  4352  002A4C  EC01  F01A         	call	_write_CMD
  4353                           
  4354                           ;lcd.c: 91: LCD_tout = 1;
  4355  002A50  0E00               	movlw	0
  4356  002A52  0100               	movlb	0	; () banked
  4357  002A54  6FFF               	movwf	(_LCD_tout+1)& (0+255),b
  4358  002A56  0E01               	movlw	1
  4359  002A58  6FFE               	movwf	_LCD_tout& (0+255),b
  4360                           
  4361                           ; BSR set to: 0
  4362                           ;lcd.c: 93: for (unsigned long i = 0; i < 100000; i++);
  4363  002A5A  0E00               	movlw	0
  4364  002A5C  6E07               	movwf	LCD_init@i_690,c
  4365  002A5E  0E00               	movlw	0
  4366  002A60  6E08               	movwf	LCD_init@i_690+1,c
  4367  002A62  0E00               	movlw	0
  4368  002A64  6E09               	movwf	LCD_init@i_690+2,c
  4369  002A66  0E00               	movlw	0
  4370  002A68  6E0A               	movwf	LCD_init@i_690+3,c
  4371  002A6A                     l3929:
  4372  002A6A  0E01               	movlw	1
  4373  002A6C  2607               	addwf	LCD_init@i_690,f,c
  4374  002A6E  0E00               	movlw	0
  4375  002A70  2208               	addwfc	LCD_init@i_690+1,f,c
  4376  002A72  2209               	addwfc	LCD_init@i_690+2,f,c
  4377  002A74  220A               	addwfc	LCD_init@i_690+3,f,c
  4378  002A76  500A               	movf	LCD_init@i_690+3,w,c
  4379  002A78  E108               	bnz	u3310
  4380  002A7A  0EA0               	movlw	160
  4381  002A7C  5C07               	subwf	LCD_init@i_690,w,c
  4382  002A7E  0E86               	movlw	134
  4383  002A80  5808               	subwfb	LCD_init@i_690+1,w,c
  4384  002A82  0E01               	movlw	1
  4385  002A84  5809               	subwfb	LCD_init@i_690+2,w,c
  4386  002A86  A0D8               	btfss	status,0,c
  4387  002A88  D7F0               	goto	l3929
  4388  002A8A                     u3310:
  4389                           
  4390                           ;lcd.c: 95: write_CMD(0x28);
  4391  002A8A  0E28               	movlw	40
  4392  002A8C  EC01  F01A         	call	_write_CMD
  4393                           
  4394                           ;lcd.c: 96: LCD_tout = 1;
  4395  002A90  0E00               	movlw	0
  4396  002A92  0100               	movlb	0	; () banked
  4397  002A94  6FFF               	movwf	(_LCD_tout+1)& (0+255),b
  4398  002A96  0E01               	movlw	1
  4399  002A98  6FFE               	movwf	_LCD_tout& (0+255),b
  4400                           
  4401                           ; BSR set to: 0
  4402                           ;lcd.c: 98: for (unsigned long i = 0; i < 100000; i++);
  4403  002A9A  0E00               	movlw	0
  4404  002A9C  6E0B               	movwf	LCD_init@i_691,c
  4405  002A9E  0E00               	movlw	0
  4406  002AA0  6E0C               	movwf	LCD_init@i_691+1,c
  4407  002AA2  0E00               	movlw	0
  4408  002AA4  6E0D               	movwf	LCD_init@i_691+2,c
  4409  002AA6  0E00               	movlw	0
  4410  002AA8  6E0E               	movwf	LCD_init@i_691+3,c
  4411  002AAA                     l3941:
  4412  002AAA  0E01               	movlw	1
  4413  002AAC  260B               	addwf	LCD_init@i_691,f,c
  4414  002AAE  0E00               	movlw	0
  4415  002AB0  220C               	addwfc	LCD_init@i_691+1,f,c
  4416  002AB2  220D               	addwfc	LCD_init@i_691+2,f,c
  4417  002AB4  220E               	addwfc	LCD_init@i_691+3,f,c
  4418  002AB6  500E               	movf	LCD_init@i_691+3,w,c
  4419  002AB8  E108               	bnz	u3320
  4420  002ABA  0EA0               	movlw	160
  4421  002ABC  5C0B               	subwf	LCD_init@i_691,w,c
  4422  002ABE  0E86               	movlw	134
  4423  002AC0  580C               	subwfb	LCD_init@i_691+1,w,c
  4424  002AC2  0E01               	movlw	1
  4425  002AC4  580D               	subwfb	LCD_init@i_691+2,w,c
  4426  002AC6  A0D8               	btfss	status,0,c
  4427  002AC8  D7F0               	goto	l3941
  4428  002ACA                     u3320:
  4429                           
  4430                           ;lcd.c: 100: write_CMD(0x0C);
  4431  002ACA  0E0C               	movlw	12
  4432  002ACC  EC01  F01A         	call	_write_CMD
  4433                           
  4434                           ;lcd.c: 101: LCD_tout = 1;
  4435  002AD0  0E00               	movlw	0
  4436  002AD2  0100               	movlb	0	; () banked
  4437  002AD4  6FFF               	movwf	(_LCD_tout+1)& (0+255),b
  4438  002AD6  0E01               	movlw	1
  4439  002AD8  6FFE               	movwf	_LCD_tout& (0+255),b
  4440                           
  4441                           ; BSR set to: 0
  4442                           ;lcd.c: 103: for (unsigned long i = 0; i < 100000; i++);
  4443  002ADA  0E00               	movlw	0
  4444  002ADC  6E0F               	movwf	LCD_init@i_692,c
  4445  002ADE  0E00               	movlw	0
  4446  002AE0  6E10               	movwf	LCD_init@i_692+1,c
  4447  002AE2  0E00               	movlw	0
  4448  002AE4  6E11               	movwf	LCD_init@i_692+2,c
  4449  002AE6  0E00               	movlw	0
  4450  002AE8  6E12               	movwf	LCD_init@i_692+3,c
  4451  002AEA                     l3953:
  4452  002AEA  0E01               	movlw	1
  4453  002AEC  260F               	addwf	LCD_init@i_692,f,c
  4454  002AEE  0E00               	movlw	0
  4455  002AF0  2210               	addwfc	LCD_init@i_692+1,f,c
  4456  002AF2  2211               	addwfc	LCD_init@i_692+2,f,c
  4457  002AF4  2212               	addwfc	LCD_init@i_692+3,f,c
  4458  002AF6  5012               	movf	LCD_init@i_692+3,w,c
  4459  002AF8  E108               	bnz	u3330
  4460  002AFA  0EA0               	movlw	160
  4461  002AFC  5C0F               	subwf	LCD_init@i_692,w,c
  4462  002AFE  0E86               	movlw	134
  4463  002B00  5810               	subwfb	LCD_init@i_692+1,w,c
  4464  002B02  0E01               	movlw	1
  4465  002B04  5811               	subwfb	LCD_init@i_692+2,w,c
  4466  002B06  A0D8               	btfss	status,0,c
  4467  002B08  D7F0               	goto	l3953
  4468  002B0A                     u3330:
  4469                           
  4470                           ;lcd.c: 105: write_CMD(0x01);
  4471  002B0A  0E01               	movlw	1
  4472  002B0C  EC01  F01A         	call	_write_CMD
  4473                           
  4474                           ;lcd.c: 106: LCD_tout = 1;
  4475  002B10  0E00               	movlw	0
  4476  002B12  0100               	movlb	0	; () banked
  4477  002B14  6FFF               	movwf	(_LCD_tout+1)& (0+255),b
  4478  002B16  0E01               	movlw	1
  4479  002B18  6FFE               	movwf	_LCD_tout& (0+255),b
  4480                           
  4481                           ; BSR set to: 0
  4482                           ;lcd.c: 108: for (unsigned long i = 0; i < 100000; i++);
  4483  002B1A  0E00               	movlw	0
  4484  002B1C  6E13               	movwf	LCD_init@i_693,c
  4485  002B1E  0E00               	movlw	0
  4486  002B20  6E14               	movwf	LCD_init@i_693+1,c
  4487  002B22  0E00               	movlw	0
  4488  002B24  6E15               	movwf	LCD_init@i_693+2,c
  4489  002B26  0E00               	movlw	0
  4490  002B28  6E16               	movwf	LCD_init@i_693+3,c
  4491  002B2A                     l3965:
  4492  002B2A  0E01               	movlw	1
  4493  002B2C  2613               	addwf	LCD_init@i_693,f,c
  4494  002B2E  0E00               	movlw	0
  4495  002B30  2214               	addwfc	LCD_init@i_693+1,f,c
  4496  002B32  2215               	addwfc	LCD_init@i_693+2,f,c
  4497  002B34  2216               	addwfc	LCD_init@i_693+3,f,c
  4498  002B36  5016               	movf	LCD_init@i_693+3,w,c
  4499  002B38  E108               	bnz	u3340
  4500  002B3A  0EA0               	movlw	160
  4501  002B3C  5C13               	subwf	LCD_init@i_693,w,c
  4502  002B3E  0E86               	movlw	134
  4503  002B40  5814               	subwfb	LCD_init@i_693+1,w,c
  4504  002B42  0E01               	movlw	1
  4505  002B44  5815               	subwfb	LCD_init@i_693+2,w,c
  4506  002B46  A0D8               	btfss	status,0,c
  4507  002B48  D7F0               	goto	l3965
  4508  002B4A                     u3340:
  4509                           
  4510                           ;lcd.c: 110: write_CMD(0x06);
  4511  002B4A  0E06               	movlw	6
  4512  002B4C  EC01  F01A         	call	_write_CMD
  4513                           
  4514                           ;lcd.c: 111: LCD_tout = 1;
  4515  002B50  0E00               	movlw	0
  4516  002B52  0100               	movlb	0	; () banked
  4517  002B54  6FFF               	movwf	(_LCD_tout+1)& (0+255),b
  4518  002B56  0E01               	movlw	1
  4519  002B58  6FFE               	movwf	_LCD_tout& (0+255),b
  4520                           
  4521                           ; BSR set to: 0
  4522                           ;lcd.c: 113: for (unsigned long i = 0; i < 100000; i++);
  4523  002B5A  0E00               	movlw	0
  4524  002B5C  6E17               	movwf	LCD_init@i_694,c
  4525  002B5E  0E00               	movlw	0
  4526  002B60  6E18               	movwf	LCD_init@i_694+1,c
  4527  002B62  0E00               	movlw	0
  4528  002B64  6E19               	movwf	LCD_init@i_694+2,c
  4529  002B66  0E00               	movlw	0
  4530  002B68  6E1A               	movwf	LCD_init@i_694+3,c
  4531  002B6A                     l3977:
  4532  002B6A  0E01               	movlw	1
  4533  002B6C  2617               	addwf	LCD_init@i_694,f,c
  4534  002B6E  0E00               	movlw	0
  4535  002B70  2218               	addwfc	LCD_init@i_694+1,f,c
  4536  002B72  2219               	addwfc	LCD_init@i_694+2,f,c
  4537  002B74  221A               	addwfc	LCD_init@i_694+3,f,c
  4538  002B76  501A               	movf	LCD_init@i_694+3,w,c
  4539  002B78  E109               	bnz	u3350
  4540  002B7A  0EA0               	movlw	160
  4541  002B7C  5C17               	subwf	LCD_init@i_694,w,c
  4542  002B7E  0E86               	movlw	134
  4543  002B80  5818               	subwfb	LCD_init@i_694+1,w,c
  4544  002B82  0E01               	movlw	1
  4545  002B84  5819               	subwfb	LCD_init@i_694+2,w,c
  4546  002B86  B0D8               	btfsc	status,0,c
  4547  002B88  0012               	return	
  4548  002B8A  D7EF               	goto	l3977
  4549  002B8C                     u3350:
  4550  002B8C  0012               	return		;funcret
  4551  002B8E                     __end_of_LCD_init:
  4552                           	opt callstack 0
  4553                           
  4554 ;; *************** function _write_CMD *****************
  4555 ;; Defined at:
  4556 ;;		line 130 in file "lcd.c"
  4557 ;; Parameters:    Size  Location     Type
  4558 ;;  dato            1    wreg     unsigned char 
  4559 ;; Auto vars:     Size  Location     Type
  4560 ;;  dato            1    1[COMRAM] unsigned char 
  4561 ;; Return value:  Size  Location     Type
  4562 ;;                  1    wreg      void 
  4563 ;; Registers used:
  4564 ;;		wreg, status,2, status,0, cstack
  4565 ;; Tracked objects:
  4566 ;;		On entry : 0/0
  4567 ;;		On exit  : 0/0
  4568 ;;		Unchanged: 0/0
  4569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4570 ;;      Params:         0       0       0       0       0       0       0       0       0
  4571 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4572 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4573 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4574 ;;Total ram usage:        1 bytes
  4575 ;; Hardware stack levels used:    1
  4576 ;; Hardware stack levels required when called:    3
  4577 ;; This function calls:
  4578 ;;		_write_LCD
  4579 ;; This function is called by:
  4580 ;;		_clear_LCD
  4581 ;;		_set_CURSOR
  4582 ;;		_LCD_init
  4583 ;;		_ret_HOME
  4584 ;;		_DesplazarIzquierda
  4585 ;; This function uses a non-reentrant model
  4586 ;;
  4587                           
  4588                           	psect	text22
  4589  003402                     __ptext22:
  4590                           	opt callstack 0
  4591  003402                     _write_CMD:
  4592                           	opt callstack 25
  4593                           
  4594                           ;incstack = 0
  4595                           ;write_CMD@dato stored from wreg
  4596  003402  6E02               	movwf	write_CMD@dato,c
  4597                           
  4598                           ;lcd.c: 132: PORTEbits.RE1 = 0x0;
  4599  003404  9284               	bcf	3972,1,c	;volatile
  4600                           
  4601                           ;lcd.c: 133: PORTEbits.RE0 = 0x0;
  4602  003406  9084               	bcf	3972,0,c	;volatile
  4603                           
  4604                           ;lcd.c: 134: write_LCD(dato);
  4605  003408  5002               	movf	write_CMD@dato,w,c
  4606  00340A  ECD0  F019         	call	_write_LCD
  4607  00340E  0012               	return		;funcret
  4608  003410                     __end_of_write_CMD:
  4609                           	opt callstack 0
  4610                           
  4611 ;; *************** function _write_LCD *****************
  4612 ;; Defined at:
  4613 ;;		line 140 in file "lcd.c"
  4614 ;; Parameters:    Size  Location     Type
  4615 ;;  dato            1    wreg     unsigned char 
  4616 ;; Auto vars:     Size  Location     Type
  4617 ;;  dato            1    0[COMRAM] unsigned char 
  4618 ;; Return value:  Size  Location     Type
  4619 ;;                  1    wreg      void 
  4620 ;; Registers used:
  4621 ;;		wreg, status,2, status,0
  4622 ;; Tracked objects:
  4623 ;;		On entry : 0/0
  4624 ;;		On exit  : 0/0
  4625 ;;		Unchanged: 0/0
  4626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4627 ;;      Params:         0       0       0       0       0       0       0       0       0
  4628 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4629 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4630 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4631 ;;Total ram usage:        1 bytes
  4632 ;; Hardware stack levels used:    1
  4633 ;; Hardware stack levels required when called:    2
  4634 ;; This function calls:
  4635 ;;		Nothing
  4636 ;; This function is called by:
  4637 ;;		_write_DATA
  4638 ;;		_write_CMD
  4639 ;; This function uses a non-reentrant model
  4640 ;;
  4641                           
  4642                           	psect	text23
  4643  0033A0                     __ptext23:
  4644                           	opt callstack 0
  4645  0033A0                     _write_LCD:
  4646                           	opt callstack 25
  4647                           
  4648                           ;incstack = 0
  4649                           ;write_LCD@dato stored from wreg
  4650  0033A0  6E01               	movwf	write_LCD@dato,c
  4651                           
  4652                           ;lcd.c: 142: LATD &= 0x0F;
  4653  0033A2  0E0F               	movlw	15
  4654  0033A4  168C               	andwf	3980,f,c	;volatile
  4655                           
  4656                           ;lcd.c: 143: PORTEbits.RE2 = 0x1;
  4657  0033A6  8484               	bsf	3972,2,c	;volatile
  4658                           
  4659                           ;lcd.c: 146: LATD |= (dato & 0xF0);
  4660  0033A8  5001               	movf	write_LCD@dato,w,c
  4661  0033AA  0BF0               	andlw	240
  4662  0033AC  128C               	iorwf	3980,f,c	;volatile
  4663                           
  4664                           ;lcd.c: 148: PORTEbits.RE2 = 0x0;
  4665  0033AE  9484               	bcf	3972,2,c	;volatile
  4666                           
  4667                           ;lcd.c: 150: LATD &= 0x0F;
  4668  0033B0  0E0F               	movlw	15
  4669  0033B2  168C               	andwf	3980,f,c	;volatile
  4670                           
  4671                           ;lcd.c: 151: PORTEbits.RE2 = 0x1;
  4672  0033B4  8484               	bsf	3972,2,c	;volatile
  4673                           
  4674                           ;lcd.c: 154: LATD |= (dato << 4);
  4675  0033B6  3801               	swapf	write_LCD@dato,w,c
  4676  0033B8  0BF0               	andlw	240
  4677  0033BA  128C               	iorwf	3980,f,c	;volatile
  4678                           
  4679                           ;lcd.c: 156: PORTEbits.RE2 = 0x0;
  4680  0033BC  9484               	bcf	3972,2,c	;volatile
  4681  0033BE  0012               	return		;funcret
  4682  0033C0                     __end_of_write_LCD:
  4683                           	opt callstack 0
  4684                           
  4685 ;; *************** function _myISR *****************
  4686 ;; Defined at:
  4687 ;;		line 128 in file "main.c"
  4688 ;; Parameters:    Size  Location     Type
  4689 ;;		None
  4690 ;; Auto vars:     Size  Location     Type
  4691 ;;		None
  4692 ;; Return value:  Size  Location     Type
  4693 ;;                  1    wreg      void 
  4694 ;; Registers used:
  4695 ;;		wreg, status,2, status,0, cstack
  4696 ;; Tracked objects:
  4697 ;;		On entry : 0/0
  4698 ;;		On exit  : 0/0
  4699 ;;		Unchanged: 0/0
  4700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4701 ;;      Params:         0       0       0       0       0       0       0       0       0
  4702 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4703 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4704 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4705 ;;Total ram usage:        0 bytes
  4706 ;; Hardware stack levels used:    1
  4707 ;; Hardware stack levels required when called:    1
  4708 ;; This function calls:
  4709 ;;		_marca_tecla
  4710 ;;		_tic_LCD
  4711 ;;		_tic_teclado
  4712 ;; This function is called by:
  4713 ;;		Interrupt level 2
  4714 ;; This function uses a non-reentrant model
  4715 ;;
  4716                           
  4717                           	psect	intcode
  4718  000008                     __pintcode:
  4719                           	opt callstack 0
  4720  000008                     _myISR:
  4721                           	opt callstack 24
  4722                           
  4723                           ;incstack = 0
  4724  000008  825F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4725  00000A  EDAB  F012         	call	int_func,f	;refresh shadow registers
  4726                           
  4727                           	psect	intcode_body
  4728  002556                     __pintcode_body:
  4729                           	opt callstack 24
  4730  002556                     int_func:
  4731                           	opt callstack 24
  4732  002556  0006               	pop		; remove dummy address from shadow register refresh
  4733                           
  4734                           ;main.c: 131: if (TMR0IF == 1) {
  4735  002558  A4F2               	btfss	4082,2,c	;volatile
  4736  00255A  D146               	goto	i2l4287
  4737                           
  4738                           ;main.c: 132: TMR0IF = 0;
  4739  00255C  94F2               	bcf	4082,2,c	;volatile
  4740                           
  4741                           ;main.c: 133: TMR0L = 0xD2;
  4742  00255E  0ED2               	movlw	210
  4743  002560  6ED6               	movwf	4054,c	;volatile
  4744                           
  4745                           ;main.c: 134: TMR0H = 0x48;
  4746  002562  0E48               	movlw	72
  4747  002564  6ED7               	movwf	4055,c	;volatile
  4748                           
  4749                           ;main.c: 137: if (flag_inicio == 1) {
  4750  002566  0100               	movlb	0	; () banked
  4751  002568  05B8               	decf	_flag_inicio& (0+255),w,b
  4752  00256A  11B9               	iorwf	(_flag_inicio+1)& (0+255),w,b
  4753  00256C  11BA               	iorwf	(_flag_inicio+2)& (0+255),w,b
  4754  00256E  11BB               	iorwf	(_flag_inicio+3)& (0+255),w,b
  4755  002570  A4D8               	btfss	status,2,c
  4756  002572  D00E               	goto	i2l179
  4757                           
  4758                           ; BSR set to: 0
  4759                           ;main.c: 138: if (cont_inicio != 0) {
  4760  002574  51F9               	movf	_cont_inicio& (0+255),w,b
  4761  002576  11FA               	iorwf	(_cont_inicio+1)& (0+255),w,b
  4762  002578  11FB               	iorwf	(_cont_inicio+2)& (0+255),w,b
  4763  00257A  11FC               	iorwf	(_cont_inicio+3)& (0+255),w,b
  4764  00257C  B4D8               	btfsc	status,2,c
  4765  00257E  D008               	goto	i2l179
  4766                           
  4767                           ; BSR set to: 0
  4768                           ;main.c: 139: cont_inicio--;
  4769  002580  0EFF               	movlw	255
  4770  002582  27F9               	addwf	_cont_inicio& (0+255),f,b
  4771  002584  0EFF               	movlw	255
  4772  002586  23FA               	addwfc	(_cont_inicio+1)& (0+255),f,b
  4773  002588  0EFF               	movlw	255
  4774  00258A  23FB               	addwfc	(_cont_inicio+2)& (0+255),f,b
  4775  00258C  0EFF               	movlw	255
  4776  00258E  23FC               	addwfc	(_cont_inicio+3)& (0+255),f,b
  4777  002590                     i2l179:
  4778                           
  4779                           ; BSR set to: 0
  4780                           ;main.c: 140: };main.c: 141: };main.c: 143: if(flag2==1){
  4781  002590  05A0               	decf	_flag2& (0+255),w,b
  4782  002592  11A1               	iorwf	(_flag2+1)& (0+255),w,b
  4783  002594  11A2               	iorwf	(_flag2+2)& (0+255),w,b
  4784  002596  11A3               	iorwf	(_flag2+3)& (0+255),w,b
  4785  002598  A4D8               	btfss	status,2,c
  4786  00259A  D00E               	goto	i2l181
  4787                           
  4788                           ; BSR set to: 0
  4789                           ;main.c: 144: if(bajo!=0){
  4790  00259C  51F5               	movf	_bajo& (0+255),w,b
  4791  00259E  11F6               	iorwf	(_bajo+1)& (0+255),w,b
  4792  0025A0  11F7               	iorwf	(_bajo+2)& (0+255),w,b
  4793  0025A2  11F8               	iorwf	(_bajo+3)& (0+255),w,b
  4794  0025A4  B4D8               	btfsc	status,2,c
  4795  0025A6  D008               	goto	i2l181
  4796                           
  4797                           ; BSR set to: 0
  4798                           ;main.c: 145: bajo--;
  4799  0025A8  0EFF               	movlw	255
  4800  0025AA  27F5               	addwf	_bajo& (0+255),f,b
  4801  0025AC  0EFF               	movlw	255
  4802  0025AE  23F6               	addwfc	(_bajo+1)& (0+255),f,b
  4803  0025B0  0EFF               	movlw	255
  4804  0025B2  23F7               	addwfc	(_bajo+2)& (0+255),f,b
  4805  0025B4  0EFF               	movlw	255
  4806  0025B6  23F8               	addwfc	(_bajo+3)& (0+255),f,b
  4807  0025B8                     i2l181:
  4808                           
  4809                           ; BSR set to: 0
  4810                           ;main.c: 146: };main.c: 147: };main.c: 149: if(flag3==1){
  4811  0025B8  059C               	decf	_flag3& (0+255),w,b
  4812  0025BA  119D               	iorwf	(_flag3+1)& (0+255),w,b
  4813  0025BC  119E               	iorwf	(_flag3+2)& (0+255),w,b
  4814  0025BE  119F               	iorwf	(_flag3+3)& (0+255),w,b
  4815  0025C0  A4D8               	btfss	status,2,c
  4816  0025C2  D00E               	goto	i2l183
  4817                           
  4818                           ; BSR set to: 0
  4819                           ;main.c: 150: if(medio !=0){
  4820  0025C4  51F1               	movf	_medio& (0+255),w,b
  4821  0025C6  11F2               	iorwf	(_medio+1)& (0+255),w,b
  4822  0025C8  11F3               	iorwf	(_medio+2)& (0+255),w,b
  4823  0025CA  11F4               	iorwf	(_medio+3)& (0+255),w,b
  4824  0025CC  B4D8               	btfsc	status,2,c
  4825  0025CE  D008               	goto	i2l183
  4826                           
  4827                           ; BSR set to: 0
  4828                           ;main.c: 151: medio--;
  4829  0025D0  0EFF               	movlw	255
  4830  0025D2  27F1               	addwf	_medio& (0+255),f,b
  4831  0025D4  0EFF               	movlw	255
  4832  0025D6  23F2               	addwfc	(_medio+1)& (0+255),f,b
  4833  0025D8  0EFF               	movlw	255
  4834  0025DA  23F3               	addwfc	(_medio+2)& (0+255),f,b
  4835  0025DC  0EFF               	movlw	255
  4836  0025DE  23F4               	addwfc	(_medio+3)& (0+255),f,b
  4837  0025E0                     i2l183:
  4838                           
  4839                           ; BSR set to: 0
  4840                           ;main.c: 152: };main.c: 153: };main.c: 155: if(flag4==1){
  4841  0025E0  0598               	decf	_flag4& (0+255),w,b
  4842  0025E2  1199               	iorwf	(_flag4+1)& (0+255),w,b
  4843  0025E4  119A               	iorwf	(_flag4+2)& (0+255),w,b
  4844  0025E6  119B               	iorwf	(_flag4+3)& (0+255),w,b
  4845  0025E8  A4D8               	btfss	status,2,c
  4846  0025EA  D00E               	goto	i2l185
  4847                           
  4848                           ; BSR set to: 0
  4849                           ;main.c: 156: if(alto !=0){
  4850  0025EC  51ED               	movf	_alto& (0+255),w,b
  4851  0025EE  11EE               	iorwf	(_alto+1)& (0+255),w,b
  4852  0025F0  11EF               	iorwf	(_alto+2)& (0+255),w,b
  4853  0025F2  11F0               	iorwf	(_alto+3)& (0+255),w,b
  4854  0025F4  B4D8               	btfsc	status,2,c
  4855  0025F6  D008               	goto	i2l185
  4856                           
  4857                           ; BSR set to: 0
  4858                           ;main.c: 157: alto--;
  4859  0025F8  0EFF               	movlw	255
  4860  0025FA  27ED               	addwf	_alto& (0+255),f,b
  4861  0025FC  0EFF               	movlw	255
  4862  0025FE  23EE               	addwfc	(_alto+1)& (0+255),f,b
  4863  002600  0EFF               	movlw	255
  4864  002602  23EF               	addwfc	(_alto+2)& (0+255),f,b
  4865  002604  0EFF               	movlw	255
  4866  002606  23F0               	addwfc	(_alto+3)& (0+255),f,b
  4867  002608                     i2l185:
  4868                           
  4869                           ; BSR set to: 0
  4870                           ;main.c: 158: };main.c: 159: };main.c: 162: if(flag==1){
  4871  002608  0590               	decf	_flag& (0+255),w,b
  4872  00260A  1191               	iorwf	(_flag+1)& (0+255),w,b
  4873  00260C  1192               	iorwf	(_flag+2)& (0+255),w,b
  4874  00260E  1193               	iorwf	(_flag+3)& (0+255),w,b
  4875  002610  A4D8               	btfss	status,2,c
  4876  002612  D00E               	goto	i2l187
  4877                           
  4878                           ; BSR set to: 0
  4879                           ;main.c: 163: if(c!=0){
  4880  002614  51E5               	movf	_c& (0+255),w,b
  4881  002616  11E6               	iorwf	(_c+1)& (0+255),w,b
  4882  002618  11E7               	iorwf	(_c+2)& (0+255),w,b
  4883  00261A  11E8               	iorwf	(_c+3)& (0+255),w,b
  4884  00261C  B4D8               	btfsc	status,2,c
  4885  00261E  D008               	goto	i2l187
  4886                           
  4887                           ; BSR set to: 0
  4888                           ;main.c: 164: c--;
  4889  002620  0EFF               	movlw	255
  4890  002622  27E5               	addwf	_c& (0+255),f,b
  4891  002624  0EFF               	movlw	255
  4892  002626  23E6               	addwfc	(_c+1)& (0+255),f,b
  4893  002628  0EFF               	movlw	255
  4894  00262A  23E7               	addwfc	(_c+2)& (0+255),f,b
  4895  00262C  0EFF               	movlw	255
  4896  00262E  23E8               	addwfc	(_c+3)& (0+255),f,b
  4897  002630                     i2l187:
  4898                           
  4899                           ; BSR set to: 0
  4900                           ;main.c: 165: };main.c: 166: };main.c: 168: if(fa==1){
  4901  002630  0588               	decf	_fa& (0+255),w,b
  4902  002632  1189               	iorwf	(_fa+1)& (0+255),w,b
  4903  002634  118A               	iorwf	(_fa+2)& (0+255),w,b
  4904  002636  118B               	iorwf	(_fa+3)& (0+255),w,b
  4905  002638  A4D8               	btfss	status,2,c
  4906  00263A  D00E               	goto	i2l189
  4907                           
  4908                           ; BSR set to: 0
  4909                           ;main.c: 169: if(a!=0){
  4910  00263C  5052               	movf	_a,w,c
  4911  00263E  1053               	iorwf	_a+1,w,c
  4912  002640  1054               	iorwf	_a+2,w,c
  4913  002642  1055               	iorwf	_a+3,w,c
  4914  002644  B4D8               	btfsc	status,2,c
  4915  002646  D008               	goto	i2l189
  4916                           
  4917                           ; BSR set to: 0
  4918                           ;main.c: 170: a--;
  4919  002648  0EFF               	movlw	255
  4920  00264A  2652               	addwf	_a,f,c
  4921  00264C  0EFF               	movlw	255
  4922  00264E  2253               	addwfc	_a+1,f,c
  4923  002650  0EFF               	movlw	255
  4924  002652  2254               	addwfc	_a+2,f,c
  4925  002654  0EFF               	movlw	255
  4926  002656  2255               	addwfc	_a+3,f,c
  4927  002658                     i2l189:
  4928                           
  4929                           ; BSR set to: 0
  4930                           ;main.c: 171: };main.c: 172: };main.c: 174: if(fb==1){
  4931  002658  058C               	decf	_fb& (0+255),w,b
  4932  00265A  118D               	iorwf	(_fb+1)& (0+255),w,b
  4933  00265C  118E               	iorwf	(_fb+2)& (0+255),w,b
  4934  00265E  118F               	iorwf	(_fb+3)& (0+255),w,b
  4935  002660  A4D8               	btfss	status,2,c
  4936  002662  D00E               	goto	i2l191
  4937                           
  4938                           ; BSR set to: 0
  4939                           ;main.c: 175: if(b!=0){
  4940  002664  51E9               	movf	_b& (0+255),w,b
  4941  002666  11EA               	iorwf	(_b+1)& (0+255),w,b
  4942  002668  11EB               	iorwf	(_b+2)& (0+255),w,b
  4943  00266A  11EC               	iorwf	(_b+3)& (0+255),w,b
  4944  00266C  B4D8               	btfsc	status,2,c
  4945  00266E  D008               	goto	i2l191
  4946                           
  4947                           ; BSR set to: 0
  4948                           ;main.c: 176: b--;
  4949  002670  0EFF               	movlw	255
  4950  002672  27E9               	addwf	_b& (0+255),f,b
  4951  002674  0EFF               	movlw	255
  4952  002676  23EA               	addwfc	(_b+1)& (0+255),f,b
  4953  002678  0EFF               	movlw	255
  4954  00267A  23EB               	addwfc	(_b+2)& (0+255),f,b
  4955  00267C  0EFF               	movlw	255
  4956  00267E  23EC               	addwfc	(_b+3)& (0+255),f,b
  4957  002680                     i2l191:
  4958                           
  4959                           ; BSR set to: 0
  4960                           ;main.c: 177: };main.c: 178: };main.c: 185: if(flagdes==1){
  4961  002680  0580               	decf	_flagdes& (0+255),w,b
  4962  002682  1181               	iorwf	(_flagdes+1)& (0+255),w,b
  4963  002684  1182               	iorwf	(_flagdes+2)& (0+255),w,b
  4964  002686  1183               	iorwf	(_flagdes+3)& (0+255),w,b
  4965  002688  A4D8               	btfss	status,2,c
  4966  00268A  D00E               	goto	i2l193
  4967                           
  4968                           ; BSR set to: 0
  4969                           ;main.c: 186: if(contdes_a!=0){
  4970  00268C  51E1               	movf	_contdes_a& (0+255),w,b
  4971  00268E  11E2               	iorwf	(_contdes_a+1)& (0+255),w,b
  4972  002690  11E3               	iorwf	(_contdes_a+2)& (0+255),w,b
  4973  002692  11E4               	iorwf	(_contdes_a+3)& (0+255),w,b
  4974  002694  B4D8               	btfsc	status,2,c
  4975  002696  D008               	goto	i2l193
  4976                           
  4977                           ; BSR set to: 0
  4978                           ;main.c: 187: contdes_a--;
  4979  002698  0EFF               	movlw	255
  4980  00269A  27E1               	addwf	_contdes_a& (0+255),f,b
  4981  00269C  0EFF               	movlw	255
  4982  00269E  23E2               	addwfc	(_contdes_a+1)& (0+255),f,b
  4983  0026A0  0EFF               	movlw	255
  4984  0026A2  23E3               	addwfc	(_contdes_a+2)& (0+255),f,b
  4985  0026A4  0EFF               	movlw	255
  4986  0026A6  23E4               	addwfc	(_contdes_a+3)& (0+255),f,b
  4987  0026A8                     i2l193:
  4988                           
  4989                           ; BSR set to: 0
  4990                           ;main.c: 188: };main.c: 189: };main.c: 195: if(flagbajo==1){
  4991  0026A8  0568               	decf	_flagbajo& (0+255),w,b
  4992  0026AA  1169               	iorwf	(_flagbajo+1)& (0+255),w,b
  4993  0026AC  116A               	iorwf	(_flagbajo+2)& (0+255),w,b
  4994  0026AE  116B               	iorwf	(_flagbajo+3)& (0+255),w,b
  4995  0026B0  A4D8               	btfss	status,2,c
  4996  0026B2  D00E               	goto	i2l195
  4997                           
  4998                           ; BSR set to: 0
  4999                           ;main.c: 196: if(seisbajo!=0){
  5000  0026B4  51C9               	movf	_seisbajo& (0+255),w,b
  5001  0026B6  11CA               	iorwf	(_seisbajo+1)& (0+255),w,b
  5002  0026B8  11CB               	iorwf	(_seisbajo+2)& (0+255),w,b
  5003  0026BA  11CC               	iorwf	(_seisbajo+3)& (0+255),w,b
  5004  0026BC  B4D8               	btfsc	status,2,c
  5005  0026BE  D008               	goto	i2l195
  5006                           
  5007                           ; BSR set to: 0
  5008                           ;main.c: 197: seisbajo--;
  5009  0026C0  0EFF               	movlw	255
  5010  0026C2  27C9               	addwf	_seisbajo& (0+255),f,b
  5011  0026C4  0EFF               	movlw	255
  5012  0026C6  23CA               	addwfc	(_seisbajo+1)& (0+255),f,b
  5013  0026C8  0EFF               	movlw	255
  5014  0026CA  23CB               	addwfc	(_seisbajo+2)& (0+255),f,b
  5015  0026CC  0EFF               	movlw	255
  5016  0026CE  23CC               	addwfc	(_seisbajo+3)& (0+255),f,b
  5017  0026D0                     i2l195:
  5018                           
  5019                           ; BSR set to: 0
  5020                           ;main.c: 198: };main.c: 200: };main.c: 201: if(flagmedio==1){
  5021  0026D0  0564               	decf	_flagmedio& (0+255),w,b
  5022  0026D2  1165               	iorwf	(_flagmedio+1)& (0+255),w,b
  5023  0026D4  1166               	iorwf	(_flagmedio+2)& (0+255),w,b
  5024  0026D6  1167               	iorwf	(_flagmedio+3)& (0+255),w,b
  5025  0026D8  A4D8               	btfss	status,2,c
  5026  0026DA  D00E               	goto	i2l197
  5027                           
  5028                           ; BSR set to: 0
  5029                           ;main.c: 202: if(seismedio!=0){
  5030  0026DC  51C5               	movf	_seismedio& (0+255),w,b
  5031  0026DE  11C6               	iorwf	(_seismedio+1)& (0+255),w,b
  5032  0026E0  11C7               	iorwf	(_seismedio+2)& (0+255),w,b
  5033  0026E2  11C8               	iorwf	(_seismedio+3)& (0+255),w,b
  5034  0026E4  B4D8               	btfsc	status,2,c
  5035  0026E6  D008               	goto	i2l197
  5036                           
  5037                           ; BSR set to: 0
  5038                           ;main.c: 203: seismedio--;
  5039  0026E8  0EFF               	movlw	255
  5040  0026EA  27C5               	addwf	_seismedio& (0+255),f,b
  5041  0026EC  0EFF               	movlw	255
  5042  0026EE  23C6               	addwfc	(_seismedio+1)& (0+255),f,b
  5043  0026F0  0EFF               	movlw	255
  5044  0026F2  23C7               	addwfc	(_seismedio+2)& (0+255),f,b
  5045  0026F4  0EFF               	movlw	255
  5046  0026F6  23C8               	addwfc	(_seismedio+3)& (0+255),f,b
  5047  0026F8                     i2l197:
  5048                           
  5049                           ; BSR set to: 0
  5050                           ;main.c: 204: };main.c: 206: };main.c: 207: if(flagalto==1){
  5051  0026F8  0560               	decf	_flagalto& (0+255),w,b
  5052  0026FA  1161               	iorwf	(_flagalto+1)& (0+255),w,b
  5053  0026FC  1162               	iorwf	(_flagalto+2)& (0+255),w,b
  5054  0026FE  1163               	iorwf	(_flagalto+3)& (0+255),w,b
  5055  002700  A4D8               	btfss	status,2,c
  5056  002702  D00E               	goto	i2l199
  5057                           
  5058                           ; BSR set to: 0
  5059                           ;main.c: 208: if(seisalto!=0){
  5060  002704  51C1               	movf	_seisalto& (0+255),w,b
  5061  002706  11C2               	iorwf	(_seisalto+1)& (0+255),w,b
  5062  002708  11C3               	iorwf	(_seisalto+2)& (0+255),w,b
  5063  00270A  11C4               	iorwf	(_seisalto+3)& (0+255),w,b
  5064  00270C  B4D8               	btfsc	status,2,c
  5065  00270E  D008               	goto	i2l199
  5066                           
  5067                           ; BSR set to: 0
  5068                           ;main.c: 209: seisalto--;
  5069  002710  0EFF               	movlw	255
  5070  002712  27C1               	addwf	_seisalto& (0+255),f,b
  5071  002714  0EFF               	movlw	255
  5072  002716  23C2               	addwfc	(_seisalto+1)& (0+255),f,b
  5073  002718  0EFF               	movlw	255
  5074  00271A  23C3               	addwfc	(_seisalto+2)& (0+255),f,b
  5075  00271C  0EFF               	movlw	255
  5076  00271E  23C4               	addwfc	(_seisalto+3)& (0+255),f,b
  5077  002720                     i2l199:
  5078                           
  5079                           ; BSR set to: 0
  5080                           ;main.c: 210: };main.c: 212: };main.c: 216: if(flag_siete==1){
  5081  002720  057C               	decf	_flag_siete& (0+255),w,b
  5082  002722  117D               	iorwf	(_flag_siete+1)& (0+255),w,b
  5083  002724  117E               	iorwf	(_flag_siete+2)& (0+255),w,b
  5084  002726  117F               	iorwf	(_flag_siete+3)& (0+255),w,b
  5085  002728  A4D8               	btfss	status,2,c
  5086  00272A  D00E               	goto	i2l201
  5087                           
  5088                           ; BSR set to: 0
  5089                           ;main.c: 217: if(cont_siete !=0){
  5090  00272C  51DD               	movf	_cont_siete& (0+255),w,b
  5091  00272E  11DE               	iorwf	(_cont_siete+1)& (0+255),w,b
  5092  002730  11DF               	iorwf	(_cont_siete+2)& (0+255),w,b
  5093  002732  11E0               	iorwf	(_cont_siete+3)& (0+255),w,b
  5094  002734  B4D8               	btfsc	status,2,c
  5095  002736  D008               	goto	i2l201
  5096                           
  5097                           ; BSR set to: 0
  5098                           ;main.c: 218: cont_siete--;
  5099  002738  0EFF               	movlw	255
  5100  00273A  27DD               	addwf	_cont_siete& (0+255),f,b
  5101  00273C  0EFF               	movlw	255
  5102  00273E  23DE               	addwfc	(_cont_siete+1)& (0+255),f,b
  5103  002740  0EFF               	movlw	255
  5104  002742  23DF               	addwfc	(_cont_siete+2)& (0+255),f,b
  5105  002744  0EFF               	movlw	255
  5106  002746  23E0               	addwfc	(_cont_siete+3)& (0+255),f,b
  5107  002748                     i2l201:
  5108                           
  5109                           ; BSR set to: 0
  5110                           ;main.c: 219: };main.c: 220: };main.c: 222: if(t1==1){
  5111  002748  0578               	decf	_t1& (0+255),w,b
  5112  00274A  1179               	iorwf	(_t1+1)& (0+255),w,b
  5113  00274C  117A               	iorwf	(_t1+2)& (0+255),w,b
  5114  00274E  117B               	iorwf	(_t1+3)& (0+255),w,b
  5115  002750  A4D8               	btfss	status,2,c
  5116  002752  D00E               	goto	i2l203
  5117                           
  5118                           ; BSR set to: 0
  5119                           ;main.c: 223: if(bajo3 !=0){
  5120  002754  51D9               	movf	_bajo3& (0+255),w,b
  5121  002756  11DA               	iorwf	(_bajo3+1)& (0+255),w,b
  5122  002758  11DB               	iorwf	(_bajo3+2)& (0+255),w,b
  5123  00275A  11DC               	iorwf	(_bajo3+3)& (0+255),w,b
  5124  00275C  B4D8               	btfsc	status,2,c
  5125  00275E  D008               	goto	i2l203
  5126                           
  5127                           ; BSR set to: 0
  5128                           ;main.c: 224: bajo3--;
  5129  002760  0EFF               	movlw	255
  5130  002762  27D9               	addwf	_bajo3& (0+255),f,b
  5131  002764  0EFF               	movlw	255
  5132  002766  23DA               	addwfc	(_bajo3+1)& (0+255),f,b
  5133  002768  0EFF               	movlw	255
  5134  00276A  23DB               	addwfc	(_bajo3+2)& (0+255),f,b
  5135  00276C  0EFF               	movlw	255
  5136  00276E  23DC               	addwfc	(_bajo3+3)& (0+255),f,b
  5137  002770                     i2l203:
  5138                           
  5139                           ; BSR set to: 0
  5140                           ;main.c: 225: };main.c: 226: };main.c: 228: if(t2==1){
  5141  002770  0574               	decf	_t2& (0+255),w,b
  5142  002772  1175               	iorwf	(_t2+1)& (0+255),w,b
  5143  002774  1176               	iorwf	(_t2+2)& (0+255),w,b
  5144  002776  1177               	iorwf	(_t2+3)& (0+255),w,b
  5145  002778  A4D8               	btfss	status,2,c
  5146  00277A  D00E               	goto	i2l205
  5147                           
  5148                           ; BSR set to: 0
  5149                           ;main.c: 229: if(medio3 !=0){
  5150  00277C  51D5               	movf	_medio3& (0+255),w,b
  5151  00277E  11D6               	iorwf	(_medio3+1)& (0+255),w,b
  5152  002780  11D7               	iorwf	(_medio3+2)& (0+255),w,b
  5153  002782  11D8               	iorwf	(_medio3+3)& (0+255),w,b
  5154  002784  B4D8               	btfsc	status,2,c
  5155  002786  D008               	goto	i2l205
  5156                           
  5157                           ; BSR set to: 0
  5158                           ;main.c: 230: medio3--;
  5159  002788  0EFF               	movlw	255
  5160  00278A  27D5               	addwf	_medio3& (0+255),f,b
  5161  00278C  0EFF               	movlw	255
  5162  00278E  23D6               	addwfc	(_medio3+1)& (0+255),f,b
  5163  002790  0EFF               	movlw	255
  5164  002792  23D7               	addwfc	(_medio3+2)& (0+255),f,b
  5165  002794  0EFF               	movlw	255
  5166  002796  23D8               	addwfc	(_medio3+3)& (0+255),f,b
  5167  002798                     i2l205:
  5168                           
  5169                           ; BSR set to: 0
  5170                           ;main.c: 231: };main.c: 232: };main.c: 234: if(t3==1){
  5171  002798  0570               	decf	_t3& (0+255),w,b
  5172  00279A  1171               	iorwf	(_t3+1)& (0+255),w,b
  5173  00279C  1172               	iorwf	(_t3+2)& (0+255),w,b
  5174  00279E  1173               	iorwf	(_t3+3)& (0+255),w,b
  5175  0027A0  A4D8               	btfss	status,2,c
  5176  0027A2  D00E               	goto	i2l207
  5177                           
  5178                           ; BSR set to: 0
  5179                           ;main.c: 235: if(alto3 !=0){
  5180  0027A4  51D1               	movf	_alto3& (0+255),w,b
  5181  0027A6  11D2               	iorwf	(_alto3+1)& (0+255),w,b
  5182  0027A8  11D3               	iorwf	(_alto3+2)& (0+255),w,b
  5183  0027AA  11D4               	iorwf	(_alto3+3)& (0+255),w,b
  5184  0027AC  B4D8               	btfsc	status,2,c
  5185  0027AE  D008               	goto	i2l207
  5186                           
  5187                           ; BSR set to: 0
  5188                           ;main.c: 236: alto3--;
  5189  0027B0  0EFF               	movlw	255
  5190  0027B2  27D1               	addwf	_alto3& (0+255),f,b
  5191  0027B4  0EFF               	movlw	255
  5192  0027B6  23D2               	addwfc	(_alto3+1)& (0+255),f,b
  5193  0027B8  0EFF               	movlw	255
  5194  0027BA  23D3               	addwfc	(_alto3+2)& (0+255),f,b
  5195  0027BC  0EFF               	movlw	255
  5196  0027BE  23D4               	addwfc	(_alto3+3)& (0+255),f,b
  5197  0027C0                     i2l207:
  5198                           
  5199                           ; BSR set to: 0
  5200                           ;main.c: 237: };main.c: 238: };main.c: 241: if(y1==1){
  5201  0027C0  056C               	decf	_y1& (0+255),w,b
  5202  0027C2  116D               	iorwf	(_y1+1)& (0+255),w,b
  5203  0027C4  116E               	iorwf	(_y1+2)& (0+255),w,b
  5204  0027C6  116F               	iorwf	(_y1+3)& (0+255),w,b
  5205  0027C8  A4D8               	btfss	status,2,c
  5206  0027CA  D00E               	goto	i2l4287
  5207                           
  5208                           ; BSR set to: 0
  5209                           ;main.c: 242: if(cent !=0 )cent--;
  5210  0027CC  51CD               	movf	_cent& (0+255),w,b
  5211  0027CE  11CE               	iorwf	(_cent+1)& (0+255),w,b
  5212  0027D0  11CF               	iorwf	(_cent+2)& (0+255),w,b
  5213  0027D2  11D0               	iorwf	(_cent+3)& (0+255),w,b
  5214  0027D4  B4D8               	btfsc	status,2,c
  5215  0027D6  D008               	goto	i2l4287
  5216                           
  5217                           ; BSR set to: 0
  5218  0027D8  0EFF               	movlw	255
  5219  0027DA  27CD               	addwf	_cent& (0+255),f,b
  5220  0027DC  0EFF               	movlw	255
  5221  0027DE  23CE               	addwfc	(_cent+1)& (0+255),f,b
  5222  0027E0  0EFF               	movlw	255
  5223  0027E2  23CF               	addwfc	(_cent+2)& (0+255),f,b
  5224  0027E4  0EFF               	movlw	255
  5225  0027E6  23D0               	addwfc	(_cent+3)& (0+255),f,b
  5226  0027E8                     i2l4287:
  5227                           
  5228                           ;main.c: 243: };main.c: 245: };main.c: 247: if (TMR1IF == 1) {
  5229  0027E8  A09E               	btfss	3998,0,c	;volatile
  5230  0027EA  D00D               	goto	i2l213
  5231                           
  5232                           ;main.c: 248: TMR1IF = 0;
  5233  0027EC  909E               	bcf	3998,0,c	;volatile
  5234                           
  5235                           ;main.c: 249: TMR1L = 0x1B;
  5236  0027EE  0E1B               	movlw	27
  5237  0027F0  6ECE               	movwf	4046,c	;volatile
  5238                           
  5239                           ;main.c: 250: TMR1H = 0xD1;
  5240  0027F2  0ED1               	movlw	209
  5241  0027F4  6ECF               	movwf	4047,c	;volatile
  5242                           
  5243                           ;main.c: 251: tic_teclado();
  5244  0027F6  EC15  F01A         	call	_tic_teclado	;wreg free
  5245                           
  5246                           ;main.c: 252: tic_LCD();
  5247  0027FA  ECF8  F019         	call	_tic_LCD	;wreg free
  5248                           
  5249                           ;main.c: 253: if (RBIF == 1) {
  5250  0027FE  B0F2               	btfsc	4082,0,c	;volatile
  5251                           
  5252                           ;main.c: 254: marca_tecla();
  5253  002800  EC0F  F01A         	call	_marca_tecla	;wreg free
  5254                           
  5255                           ;main.c: 255: };main.c: 256: RBIF = 0;
  5256  002804  90F2               	bcf	4082,0,c	;volatile
  5257  002806                     i2l213:
  5258  002806  925F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5259  002808  0011               	retfie		f
  5260  00280A                     __end_of_myISR:
  5261                           	opt callstack 0
  5262                           
  5263 ;; *************** function _tic_teclado *****************
  5264 ;; Defined at:
  5265 ;;		line 214 in file "teclado.c"
  5266 ;; Parameters:    Size  Location     Type
  5267 ;;		None
  5268 ;; Auto vars:     Size  Location     Type
  5269 ;;		None
  5270 ;; Return value:  Size  Location     Type
  5271 ;;                  1    wreg      void 
  5272 ;; Registers used:
  5273 ;;		wreg, status,2, status,0
  5274 ;; Tracked objects:
  5275 ;;		On entry : 0/0
  5276 ;;		On exit  : 0/0
  5277 ;;		Unchanged: 0/0
  5278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5279 ;;      Params:         0       0       0       0       0       0       0       0       0
  5280 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5281 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5282 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5283 ;;Total ram usage:        0 bytes
  5284 ;; Hardware stack levels used:    1
  5285 ;; This function calls:
  5286 ;;		Nothing
  5287 ;; This function is called by:
  5288 ;;		_myISR
  5289 ;; This function uses a non-reentrant model
  5290 ;;
  5291                           
  5292                           	psect	text25
  5293  00342A                     __ptext25:
  5294                           	opt callstack 0
  5295  00342A                     _tic_teclado:
  5296                           	opt callstack 24
  5297                           
  5298                           ;teclado.c: 216: if (delay_kb) delay_kb--;
  5299                           
  5300                           ;incstack = 0
  5301  00342A  503A               	movf	_delay_kb,w,c	;volatile
  5302  00342C  B4D8               	btfsc	status,2,c
  5303  00342E  0012               	return	
  5304  003430  063A               	decf	_delay_kb,f,c	;volatile
  5305  003432  0012               	return		;funcret
  5306  003434                     __end_of_tic_teclado:
  5307                           	opt callstack 0
  5308                           
  5309 ;; *************** function _tic_LCD *****************
  5310 ;; Defined at:
  5311 ;;		line 182 in file "lcd.c"
  5312 ;; Parameters:    Size  Location     Type
  5313 ;;		None
  5314 ;; Auto vars:     Size  Location     Type
  5315 ;;		None
  5316 ;; Return value:  Size  Location     Type
  5317 ;;                  1    wreg      void 
  5318 ;; Registers used:
  5319 ;;		wreg, status,2, status,0
  5320 ;; Tracked objects:
  5321 ;;		On entry : 0/0
  5322 ;;		On exit  : 0/0
  5323 ;;		Unchanged: 0/0
  5324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5325 ;;      Params:         0       0       0       0       0       0       0       0       0
  5326 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5327 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5328 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5329 ;;Total ram usage:        0 bytes
  5330 ;; Hardware stack levels used:    1
  5331 ;; This function calls:
  5332 ;;		Nothing
  5333 ;; This function is called by:
  5334 ;;		_myISR
  5335 ;;		_tic_demo_shield2_1
  5336 ;; This function uses a non-reentrant model
  5337 ;;
  5338                           
  5339                           	psect	text26
  5340  0033F0                     __ptext26:
  5341                           	opt callstack 0
  5342  0033F0                     _tic_LCD:
  5343                           	opt callstack 24
  5344                           
  5345                           ;lcd.c: 183: if (LCD_tout) LCD_tout--;
  5346                           
  5347                           ;incstack = 0
  5348  0033F0  0100               	movlb	0	; () banked
  5349  0033F2  51FE               	movf	_LCD_tout& (0+255),w,b
  5350  0033F4  11FF               	iorwf	(_LCD_tout+1)& (0+255),w,b
  5351  0033F6  B4D8               	btfsc	status,2,c
  5352  0033F8  0012               	return	
  5353                           
  5354                           ; BSR set to: 0
  5355  0033FA  07FE               	decf	_LCD_tout& (0+255),f,b
  5356  0033FC  A0D8               	btfss	status,0,c
  5357  0033FE  07FF               	decf	(_LCD_tout+1)& (0+255),f,b
  5358                           
  5359                           ; BSR set to: 0
  5360  003400  0012               	return		;funcret
  5361  003402                     __end_of_tic_LCD:
  5362                           	opt callstack 0
  5363                           
  5364 ;; *************** function _marca_tecla *****************
  5365 ;; Defined at:
  5366 ;;		line 207 in file "teclado.c"
  5367 ;; Parameters:    Size  Location     Type
  5368 ;;		None
  5369 ;; Auto vars:     Size  Location     Type
  5370 ;;		None
  5371 ;; Return value:  Size  Location     Type
  5372 ;;                  1    wreg      void 
  5373 ;; Registers used:
  5374 ;;		wreg, status,2
  5375 ;; Tracked objects:
  5376 ;;		On entry : 0/0
  5377 ;;		On exit  : 0/0
  5378 ;;		Unchanged: 0/0
  5379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5380 ;;      Params:         0       0       0       0       0       0       0       0       0
  5381 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5382 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5383 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5384 ;;Total ram usage:        0 bytes
  5385 ;; Hardware stack levels used:    1
  5386 ;; This function calls:
  5387 ;;		Nothing
  5388 ;; This function is called by:
  5389 ;;		_myISR
  5390 ;; This function uses a non-reentrant model
  5391 ;;
  5392                           
  5393                           	psect	text27
  5394  00341E                     __ptext27:
  5395                           	opt callstack 0
  5396  00341E                     _marca_tecla:
  5397                           	opt callstack 24
  5398                           
  5399                           ;teclado.c: 208: (void) PORTB;
  5400                           
  5401                           ; BSR set to: 0
  5402                           ;incstack = 0
  5403  00341E  5081               	movf	3969,w,c	;volatile
  5404  003420  F000               	nop		;# 
  5405                           
  5406                           ;teclado.c: 210: flag_kb = 1;
  5407  003422  0E01               	movlw	1
  5408  003424  6E3B               	movwf	_flag_kb,c	;volatile
  5409  003426  F000               	nop		;# 
  5410  003428  0012               	return		;funcret
  5411  00342A                     __end_of_marca_tecla:
  5412                           	opt callstack 0
  5413                           
  5414                           	psect	rparam
  5415  0000                     
  5416                           	psect	temp
  5417  00005F                     btemp:
  5418                           	opt callstack 0
  5419  00005F                     	ds	1
  5420  0000                     int$flags	set	btemp
  5421  0000                     wtemp8	set	btemp+1
  5422  0000                     ttemp5	set	btemp+1
  5423  0000                     ttemp6	set	btemp+4
  5424  0000                     ttemp7	set	btemp+8
  5425                           tosu	equ	0xFFF
  5426                           tosh	equ	0xFFE
  5427                           tosl	equ	0xFFD
  5428                           stkptr	equ	0xFFC
  5429                           pclatu	equ	0xFFB
  5430                           pclath	equ	0xFFA
  5431                           pcl	equ	0xFF9
  5432                           tblptru	equ	0xFF8
  5433                           tblptrh	equ	0xFF7
  5434                           tblptrl	equ	0xFF6
  5435                           tablat	equ	0xFF5
  5436                           prodh	equ	0xFF4
  5437                           prodl	equ	0xFF3
  5438                           indf0	equ	0xFEF
  5439                           postinc0	equ	0xFEE
  5440                           postdec0	equ	0xFED
  5441                           preinc0	equ	0xFEC
  5442                           plusw0	equ	0xFEB
  5443                           fsr0h	equ	0xFEA
  5444                           fsr0l	equ	0xFE9
  5445                           wreg	equ	0xFE8
  5446                           indf1	equ	0xFE7
  5447                           postinc1	equ	0xFE6
  5448                           postdec1	equ	0xFE5
  5449                           preinc1	equ	0xFE4
  5450                           plusw1	equ	0xFE3
  5451                           fsr1h	equ	0xFE2
  5452                           fsr1l	equ	0xFE1
  5453                           bsr	equ	0xFE0
  5454                           indf2	equ	0xFDF
  5455                           postinc2	equ	0xFDE
  5456                           postdec2	equ	0xFDD
  5457                           preinc2	equ	0xFDC
  5458                           plusw2	equ	0xFDB
  5459                           fsr2h	equ	0xFDA
  5460                           fsr2l	equ	0xFD9
  5461                           status	equ	0xFD8


Data Sizes:
    Strings     238
    Constant    12
    Data        74
    BSS         138
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     48      94
    BANK0           160      0     160
    BANK1           256      0       8
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    msg2LCD@datos	PTR const unsigned char  size(2) Largest target is 28
		 -> STR_28(CODE[28]), STR_27(CODE[5]), STR_26(CODE[5]), STR_25(CODE[5]), 
		 -> STR_22(CODE[5]), STR_21(CODE[13]), STR_20(CODE[11]), STR_19(CODE[13]), 
		 -> STR_18(CODE[11]), STR_17(CODE[11]), STR_16(CODE[11]), STR_15(CODE[14]), 
		 -> STR_14(CODE[8]), STR_13(CODE[15]), STR_12(CODE[8]), STR_11(CODE[15]), 
		 -> STR_10(CODE[8]), STR_9(CODE[15]), STR_8(CODE[15]), STR_7(CODE[15]), 
		 -> STR_6(CODE[10]), STR_5(CODE[16]), STR_4(CODE[3]), STR_3(CODE[14]), 
		 -> STR_2(CODE[15]), STR_1(CODE[15]), 


Critical Paths under _main in COMRAM

    _main->_principal
    _principal->___almod
    _readADC->___aldiv
    ___aldiv->___lmul
    _pesomedio->_msg2LCD
    _pesobajo->_msg2LCD
    _pesoalto->_msg2LCD
    _char2LCD->_write_DATA
    _casos->_msg2LCD
    _set_CURSOR->_write_CMD
    _msg2LCD->_write_DATA
    _write_DATA->_write_LCD
    _clear_LCD->_write_CMD
    ___almod->_readADC
    _LCD_init->_write_CMD
    _write_CMD->_write_LCD

Critical Paths under _myISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _myISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _myISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _myISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _myISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _myISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _myISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _myISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _myISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   16008
                           _LCD_init
                           _PicIni21
                         _TIMER0_INI
                         _TIMER1_INI
                          _principal
                       _tecladoIni13
 ---------------------------------------------------------------------------------
 (1) _tecladoIni13                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _principal                                            8     8      0   15666
                                             40 COMRAM     8     8      0
                            ___aldiv
                            ___almod
                              _casos
                           _char2LCD
                          _clear_LCD
                            _msg2LCD
                           _pesoalto
                           _pesobajo
                          _pesomedio
                            _readADC
                         _set_CURSOR
                              _tecla
 ---------------------------------------------------------------------------------
 (2) _readADC                                              4     0      4    1805
                                             26 COMRAM     4     0      4
                            ___aldiv
                             ___lmul
                      _obtener_ADC10
 ---------------------------------------------------------------------------------
 (3) _obtener_ADC10                                        6     4      2      71
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     370
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             14     6      8    1364
                                             12 COMRAM    14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _pesomedio                                            0     0      0    2406
                          _clear_LCD
                            _msg2LCD
                         _set_CURSOR
                              _tecla
 ---------------------------------------------------------------------------------
 (2) _pesobajo                                             0     0      0    2406
                          _clear_LCD
                            _msg2LCD
                         _set_CURSOR
                              _tecla
 ---------------------------------------------------------------------------------
 (2) _pesoalto                                             0     0      0    2294
                            _msg2LCD
                         _set_CURSOR
                              _tecla
 ---------------------------------------------------------------------------------
 (2) _tecla                                                3     3      0      26
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _char2LCD                                             5     5      0     134
                                              2 COMRAM     5     5      0
                         _write_DATA
 ---------------------------------------------------------------------------------
 (2) _casos                                                4     4      0    2380
                                              8 COMRAM     4     4      0
                          _clear_LCD
                            _msg2LCD
                         _set_CURSOR
 ---------------------------------------------------------------------------------
 (2) _set_CURSOR                                           5     5      0     135
                                              2 COMRAM     5     5      0
                          _write_CMD
 ---------------------------------------------------------------------------------
 (3) _msg2LCD                                              6     4      2    2133
                                              2 COMRAM     6     4      2
                         _write_DATA
 ---------------------------------------------------------------------------------
 (4) _write_DATA                                           1     1      0      66
                                              1 COMRAM     1     1      0
                          _write_LCD
 ---------------------------------------------------------------------------------
 (3) _clear_LCD                                            4     4      0     112
                                              2 COMRAM     4     4      0
                          _write_CMD
 ---------------------------------------------------------------------------------
 (2) ___almod                                             10     2      8     448
                                             30 COMRAM    10     2      8
                            _readADC (ARG)
 ---------------------------------------------------------------------------------
 (1) _TIMER1_INI                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TIMER0_INI                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PicIni21                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCD_init                                            24    24      0     342
                                              2 COMRAM    24    24      0
                          _write_CMD
 ---------------------------------------------------------------------------------
 (3) _write_CMD                                            1     1      0      66
                                              1 COMRAM     1     1      0
                          _write_LCD
 ---------------------------------------------------------------------------------
 (4) _write_LCD                                            1     1      0      44
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _myISR                                                0     0      0       0
                        _marca_tecla
                            _tic_LCD
                        _tic_teclado
 ---------------------------------------------------------------------------------
 (7) _tic_teclado                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _tic_LCD                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _marca_tecla                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_init
     _write_CMD
       _write_LCD
   _PicIni21
   _TIMER0_INI
   _TIMER1_INI
   _principal
     ___aldiv
       ___lmul (ARG)
     ___almod
       _readADC (ARG)
         ___aldiv
           ___lmul (ARG)
         ___lmul
         _obtener_ADC10
     _casos
       _clear_LCD
         _write_CMD
           _write_LCD
       _msg2LCD
         _write_DATA
           _write_LCD
       _set_CURSOR
         _write_CMD
           _write_LCD
     _char2LCD
       _write_DATA
         _write_LCD
     _clear_LCD
       _write_CMD
         _write_LCD
     _msg2LCD
       _write_DATA
         _write_LCD
     _pesoalto
       _msg2LCD
         _write_DATA
           _write_LCD
       _set_CURSOR
         _write_CMD
           _write_LCD
       _tecla
     _pesobajo
       _clear_LCD
         _write_CMD
           _write_LCD
       _msg2LCD
         _write_DATA
           _write_LCD
       _set_CURSOR
         _write_CMD
           _write_LCD
       _tecla
     _pesomedio
       _clear_LCD
         _write_CMD
           _write_LCD
       _msg2LCD
         _write_DATA
           _write_LCD
       _set_CURSOR
         _write_CMD
           _write_LCD
       _tecla
     _readADC
       ___aldiv
         ___lmul (ARG)
       ___lmul
       _obtener_ADC10
     _set_CURSOR
       _write_CMD
         _write_LCD
     _tecla
   _tecladoIni13

 _myISR (ROOT)
   _marca_tecla
   _tic_LCD
   _tic_teclado

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       8       7        3.1%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     30      5E       1      100.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     106      20        0.0%
DATA                 0      0     106       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Thu Jun 24 15:36:21 2021

                       _a 0052                         _b 00E9                         _c 00E5  
                      _t1 0078                        _t2 0074                        _t3 0070  
                      _y1 006C                        _fa 0088                        _fb 008C  
             __CFG_BOR$ON 000000               __CFG_BORV$3 000000              __CFG_CP0$OFF 000000  
            __CFG_CP1$OFF 000000                       l920 2BB4                       l921 2BBC  
                     l930 2C06                       l923 2BC4                       l932 2C2C  
                     l924 2BD4                       l925 2BCC                       l694 320A  
                     l928 2BE0                       l937 2C92                       l939 2CA6  
            __CFG_CPB$OFF 000000                       _PR2 000FCB                       _dec 00AC  
                     _col 0056                       _uni 00A8          _MultiplicadorSet 00BE  
                     wreg 000FE8              __CFG_LVP$OFF 000000              __CFG_WDT$OFF 000000  
                    l4011 2298                      l4031 235E                      l4051 241C  
                    l4043 23D2                      l4061 245A                      l4037 2398  
                    l4213 334E                      l3511 3292                      l4071 248C  
                    l3417 2B92                      l4081 24B4                      l4049 240E  
                    l3523 3168                      l3515 3148                      l3427 2BAA  
                    l4091 24E6                      l4059 2454                      l3701 282A  
                    l3541 31AE                      l4077 24A0                      l3527 318A  
                    l3607 32CC                      l3537 3304                      l3633 2ECA  
                    l3545 31C2                      l4097 24FC                      l3723 2892  
                    l3715 286C                      l3467 2C52                      l3571 2D30  
                    l3563 2D02                      l3733 28BA                      l3581 2D64  
                    l3557 2CEA                      l3495 2CAE                      l3663 2E18  
                    l3753 2930                      l3497 2CCA                      l3569 2D24  
                    l3585 2D72                      l3747 28FC                      l3763 2966  
                    l3691 2F78                      l3941 2AAA                      l3917 2A2A  
                    l3765 29AC                      l3589 2D88                      l3953 2AEA  
                    l3929 2A6A                      l3891 3022                      l3883 2FEE  
                    l3875 2FC8                      l3965 2B2A                      l3885 2FFA  
                    l3981 21FE                      l3895 3030                      l3879 2FDC  
                    l4871 2516                      l3991 222E                      l3977 2B6A  
                    l4873 254C                      l3899 3046                      l4877 2980  
                    l4879 29A4                      l3999 225A                      STR_1 2157  
                    STR_2 2148                      STR_3 2175                      STR_4 21F8  
                    STR_5 2129                      STR_6 21CC                      STR_7 2166  
                    STR_8 2166                      STR_9 2139                      u3020 2F12  
                    _LATA 000F89                      u3030 2F26                      _LATB 000F8A  
                    _LATC 000F8B                      _LATD 000F8C                      _LATE 000F8D  
                    u3300 2A4A                      u3310 2A8A                      u3320 2ACA  
                    u2600 2BDA                      u3330 2B0A                      u3340 2B4A  
                    u3420 2372                      u3350 2B8C                      u3270 2FFE  
                    u3430 2386                      u2800 3186                      u3440 23AC  
                    u3450 23C0                      u2820 3324                      u3460 23E6  
                    u2910 32EC                      u3470 23FA                      u3471 23F8  
                    u2920 2E60                      u2930 2E74                      u2790 32B2  
                    _RBIE 007F93                      u2880 2D34                      _RBIF 007F90  
                    u2970 2DAE                      u2980 2DC2                      _RBIP 007F88  
                    _RBPU 007F8F              ?_marca_tecla 0001                      _bajo 00F5  
                    _cent 00CD                      _flag 0090                      _fila 0057  
                    _alto 00ED                      _main 3326                      fsr1l 000FE1  
                    btemp 005F                      prodh 000FF4                      prodl 000FF3  
                    start 000E             __CFG_IESO$OFF 000000              msg2LCD@datos 0003  
           __CFG_MCLRE$ON 000000              ___param_bank 000000               ?_TIMER0_INI 0001  
             ?_TIMER1_INI 0001             __CFG_PLLDIV$5 000000          __end_of_LCD_init 2B8E  
         __end_of___aldiv 2D9A           __end_of___almod 3058                     ?_main 0001  
                   _EEADR 000FA9                     STR_10 21D6                     STR_11 2139  
                   STR_12 21D6                     STR_20 21C1                     STR_13 2139  
                   STR_21 2191                     STR_14 21D6                     STR_22 21E4  
                   STR_23 21DE                     STR_15 2183                     STR_16 21AB  
                   STR_25 21E9                     STR_17 21B6                     STR_18 21AB  
                   STR_26 21EE                     STR_27 21F3                     STR_19 219E  
                   STR_28 210D                     _CMCON 000FB4                     i2l201 2748  
                   i2l203 2770                     i2l213 2806                     i2l205 2798  
                   i2l207 27C0                     i2l181 25B8                     i2l191 2680  
                   i2l183 25E0                     i2l193 26A8                     i2l185 2608  
                   i2l195 26D0                     i2l187 2630                     i2l179 2590  
                   i2l197 26F8                     i2l189 2658                     i2l199 2720  
                   _RCREG 000FAE                     _TMR0H 000FD7                     _TMR1H 000FCF  
                   _TMR0L 000FD6                     _TMR1L 000FCE                     _SPBRG 000FAF  
                   _PORTA 000F80                     _PORTB 000F81             __CFG_USBDIV$2 000000  
                   _TRISA 000F92                     _TRISB 000F93                     _TRISC 000F94  
                   _TRISD 000F95                     _TRISE 000F96                     _TXREG 000FAD  
           __CFG_PWRT$OFF 000000             __CFG_WRT0$OFF 000000             __CFG_WRT1$OFF 000000  
     ___lmul@multiplicand 0005            __CFG_EBTR0$OFF 000000            __CFG_FCMEN$OFF 000000  
          __CFG_EBTR1$OFF 000000           __end_of_msg2LCD 319E             __CFG_WRTB$OFF 000000  
           __CFG_WRTC$OFF 000000                     _bajo3 00D9           __end_of_readADC 30D4  
          __CFG_EBTRB$OFF 000000                     _flag2 00A0                     _flag3 009C  
                   _flag4 0098                     _flag5 0094                     _flag6 0104  
                   _flag7 0100                     _alto3 00D1                     _casos 280A  
                   _myISR 0008                     _medio 00F1                     _kilos 0031  
                   _tecla 2B8E           __end_of_tic_LCD 3402                     _multi 00A4  
                   tablat 000FF5                     ttemp5 0060                     ttemp6 0063  
                   ttemp7 0067                     status 000FD8                     wtemp8 0060  
         __initialization 30D4              __end_of_main 3354          __end_of_PicIni21 3380  
                  ??_main 0031             __activetblptr 000002                    ?_casos 0001  
                  _ADCON1 000FC1                    _ADCON2 000FC0                    ?_myISR 0001  
                  _ADRESH 000FC4                    _ADRESL 000FC3                    _EEDATA 000FA8  
                  _CCPR1L 000FBE                    ?_tecla 0001                    _EECON2 000FA7  
                  _INT0IE 007F94                    _INT0IF 007F91                    _INT1IE 007F83  
                  _INT1IF 007F80          __end_of_char2LCD 32EE       __size_of_TIMER0_INI 001A  
                  i2l4287 27E8       __size_of_TIMER1_INI 0020              ?_tic_teclado 0001  
                  _TMR0IF 007F92                    _TMR1IF 007CF0                    _TMR0ON 007EAF  
                  _SPBRGH 000FB0                    _TMR1ON 007E68            __CFG_VREGEN$ON 000000  
          __CFG_XINST$OFF 000000                    ___lmul 319E                 ??___aldiv 0015  
               ??___almod 0027            __CFG_STVREN$ON 000000                    _medio3 00D5  
                  _cuatro 0084                    clear_0 311A                    clear_1 3126  
                  clear_2 3132                    _teclas 2101                 ??_msg2LCD 0005  
        __end_of_pesobajo 2EFE                 ??_readADC 001F          __end_of_pesoalto 2FAC  
            __pdataCOMRAM 0052                 ??_tic_LCD 0001              __mediumconst 0000  
                  tblptrh 000FF7                    tblptrl 000FF6                    tblptru 000FF8  
           _OffsetPeriodo 00FD       demo_shield2_1@flag0 004A       demo_shield2_1@flag1 0049  
     demo_shield2_1@flag2 0048       demo_shield2_1@flag3 0047       demo_shield2_1@cont1 0043  
     demo_shield2_1@cont2 0042       demo_shield2_1@cont3 0041                __accesstop 0060  
 __end_of__initialization 3138           __CFG_PBADEN$OFF 000000                 ?_LCD_init 0001  
           ___rparam_used 000001      __size_of_marca_tecla 000C            __pcstackCOMRAM 0001  
            __pidataBANK0 323A             __end_of_casos 2A06             __end_of_myISR 280A  
           tecla@tecla_KB 0003             __end_of_tecla 2CCE        __size_of_clear_LCD 0038  
               LCD_init@i 0003    __size_of_obtener_ADC10 0046                   ??_casos 0009  
             set_CURSOR@i 0004                   ??_myISR 0001                   ??_tecla 0001  
           ?_tecladoIni13 0001                __pbssBANK0 0060                __pbssBANK1 0100  
               ?_PicIni21 0001                ??_LCD_init 0003             _maximoEncoder 0040  
                 ?___lmul 0001              ??_TIMER0_INI 0001              ??_TIMER1_INI 0001  
      __size_of_pesomedio 00B2            ___lmul@product 0009                _flag_siete 007C  
               ?_char2LCD 0001              char2LCD@dato 0003        __size_of_principal 035A  
                 Leds13@i 005C            ??_tecladoIni13 0001                ??_PicIni21 0001  
              _cont_siete 00DD         __end_of_clear_LCD 3326        __end_of_TIMER0_INI 33DA  
      __end_of_TIMER1_INI 33A0                _frecuencia 005D        __size_of_write_CMD 000E  
      __size_of_write_LCD 0020      __size_of_tic_teclado 000A                 ?_pesobajo 0001  
                 __Hparam 0000                 ?_pesoalto 0001                   __Lparam 0000  
              _guarda_ADC 00B0             _obtener_ADC10 31F4                   ___aldiv 2CCE  
                 ___almod 2FAC           __size_of___lmul 0056              __psmallconst 2100  
obtener_ADC10@GuardoPorta 0003                   __pcinit 30D4  obtener_ADC10@GuardoTrisa 0004  
                 __ramtop 0800                   _flag_kb 003B                   _flagdes 0080  
                 __ptext0 3326                   __ptext1 33DA                   __ptext2 21FC  
                 __ptext3 3058                   __ptext4 31F4                   __ptext5 319E  
                 __ptext6 2CCE                   __ptext7 2D9A                   __ptext8 2E4C  
                 __ptext9 2EFE                ??_char2LCD 0003                   _msg2LCD 3146  
               _T0CONbits 000FD5                   _readADC 3058                 _T1CONbits 000FCD  
               _T2CONbits 000FCA                   _tic_LCD 33F0          ___aldiv@dividend 000D  
              clear_LCD@i 0003             _minimoEncoder 003F                _set_CURSOR 3278  
          __pintcode_body 2556             debounce@state 004D      end_of_initialization 3138  
          set_CURSOR@posi 0003         __end_of_pesomedio 2E4C             __Lmediumconst 0000  
                 int_func 2556                ??_pesobajo 0009                ??_pesoalto 0009  
       __end_of_principal 2556            ?_obtener_ADC10 0001                 _RCSTAbits 000FAB  
        ___aldiv@quotient 0017                   postdec1 000FE5                   postinc0 000FEE  
               _PORTBbits 000F81                 _PORTDbits 000F83                 _PORTEbits 000F84  
       __end_of_write_CMD 3410        _EstadoDeLosBotones 0051         __end_of_write_LCD 33C0  
               _TRISAbits 000F92                 _TRISBbits 000F93                 _TRISCbits 000F94  
               _TRISDbits 000F95                 _TRISEbits 000F96         tic_encoder@estado 0058  
           LCD_init@i_690 0007             LCD_init@i_691 000B             LCD_init@i_692 000F  
           LCD_init@i_693 0013             LCD_init@i_694 0017               _CCP1CONbits 000FBD  
               _TXSTAbits 000FAC         __size_of_LCD_init 0188                _write_DATA 2008  
    __end_of_tecladoIni13 33F0            __end_of___lmul 31F4               _BAUDCONbits 000FB8  
           __pidataCOMRAM 3410            __end_of_teclas 210D       start_initialization 30D4  
             ?_set_CURSOR 0001             ??_marca_tecla 0001         __size_of_PicIni21 002C  
         ??_obtener_ADC10 0003            tecla@status_KB 0039                 _LowerByte 00C0  
                ??___lmul 0009               __pdataBANK0 00C1          __CFG_LPT1OSC$OFF 000000  
         _posicionEncoder 003E  tic_debounce@debounce_tic 0059        demo_shield2_1@cont 0044  
               _UpperByte 005A         __size_of_char2LCD 003A               __pbssCOMRAM 0031  
               __pnvBANK0 00FE                 _clear_LCD 32EE                 _flagCanal 003C  
     __end_of_marca_tecla 342A                 char2LCD@i 0004                 __pintcode 0008  
       __size_of_pesobajo 00B2                  ?___aldiv 000D       __size_of_set_CURSOR 003C  
                ?___almod 001F         __size_of_pesoalto 00AE               ?_write_DATA 0001  
               _flagmedio 0064       obtener_ADC10@ad_res 0005          ___almod@dividend 001F  
       Send4Disp@Nro_Disp 005B                  ?_msg2LCD 0003                 _contdes_a 00E1  
                ?_readADC 001B               __smallconst 2100                  ?_tic_LCD 0001  
             _flag_etapa2 00B4               _flag_inicio 00B8            _desplazar_tout 00BC  
          __size_of_casos 01FC            __size_of_myISR 2802            __size_of_tecla 0140  
demo_shield2_1@PrimeraVez 0046             ??_tic_teclado 0001           ___aldiv@divisor 0011  
            debounce@cnt0 004C              debounce@cnt1 004B           ___aldiv@counter 0015  
                _LATAbits 000F89                  _LATCbits 000F8B                  _LATDbits 000F8C  
                _LATEbits 000F8D                  _LCD_init 2A06                  _LCD_tout 00FE  
                _PIE1bits 000F9D               _encoderTout 003D                 _pesomedio 2D9A  
              ?_clear_LCD 0001     __size_of_tecladoIni13 0016                 _seismedio 00C5  
                _PIR1bits 000F9E            _principal$2717 002D          __CFG_WDTPS$32768 000000  
               _principal 21FC                _ADCON0bits 000FC2             _Multiplicador 00BF  
             _cont_inicio 00F9           _MedioPeriodoSet 0035                 _write_CMD 3402  
               _write_LCD 33A0         ___lmul@multiplier 0001               _INTCON2bits 000FF1  
             _INTCON3bits 000FF0                 copy_data0 30E8                 copy_data1 3108  
     __size_of_write_DATA 000E              _tecladoIni13 33DA                  _PicIni21 3354  
             _marca_tecla 341E       Botones13@Estado_BOT 004E   demo_shield2_1@Desplazar 0045  
              _EECON1bits 000FA6                ?_pesomedio 0001                  __Hrparam 0000  
                __Lrparam 0000       __end_of_tic_teclado 3434                ?_principal 0001  
        __size_of___aldiv 00CC          __size_of___almod 00AC            write_DATA@dato 0002  
                _char2LCD 32B4          __size_of_msg2LCD 0058          __size_of_readADC 007C  
                _delay_kb 003A          __size_of_tic_LCD 0012              ??_set_CURSOR 0003  
              ?_write_CMD 0001                  _flagbajo 0068                ?_write_LCD 0001  
                __ptext10 2B8E                  __ptext11 32B4                  __ptext20 3354  
                __ptext12 280A                  __ptext21 2A06                  __ptext13 3278  
                __ptext22 3402                  __ptext14 3146                  __ptext23 33A0  
                __ptext15 2008                  __ptext16 32EE                  __ptext25 342A  
                __ptext17 2FAC                  __ptext26 33F0                  __ptext18 3380  
                __ptext27 341E                  __ptext19 33C0                  _flagalto 0060  
         ___almod@divisor 0023                  _bot_tout 004F                  _led_tout 0037  
         ___almod@counter 0027             __size_of_main 002E               ??_clear_LCD 0003  
                _pesobajo 2E4C                  _pesoalto 2EFE                  _seisbajo 00C9  
                _seisalto 00C1                  int$flags 005F                  _mux_tout 0050  
      __end_of_set_CURSOR 32B4                  msg2LCD@i 0005     __CFG_CPUDIV$OSC1_PLL2 000000  
              _INTCONbits 000FF2                  intlevel2 0000             write_CMD@dato 0002  
             _tic_teclado 342A             write_LCD@dato 0001               ??_pesomedio 0009  
   __end_of_obtener_ADC10 323A              ??_write_DATA 0002               ??_principal 0029  
              _TIMER0_INI 33C0                _TIMER1_INI 3380              ___aldiv@sign 0016  
             ??_write_CMD 0002               ??_write_LCD 0001        __CFG_FOSC$HSPLL_HS 000000  
      __end_of_write_DATA 2016              ___almod@sign 0028  
